package org.telegram.ui;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.DatePickerDialog.OnDateSetListener;
import android.app.Dialog;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnShowListener;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.content.res.Configuration;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Outline;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Path.Direction;
import android.graphics.PorterDuff.Mode;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.media.ThumbnailUtils;
import android.net.Uri;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.provider.ContactsContract.Contacts;
import android.support.v4.content.FileProvider;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.TextUtils.TruncateAt;
import android.text.style.CharacterStyle;
import android.text.style.ClickableSpan;
import android.text.style.ForegroundColorSpan;
import android.text.style.URLSpan;
import android.util.LongSparseArray;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.TextureView;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import android.view.View.OnLongClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.view.ViewOutlineProvider;
import android.view.ViewTreeObserver.OnPreDrawListener;
import android.view.animation.DecelerateInterpolator;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;
import java.io.File;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.concurrent.CountDownLatch;
import java.util.regex.Matcher;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.BuildVars;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.DataQuery;
import org.telegram.messenger.DownloadController;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.EmojiSuggestion;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.ImageReceiver.BitmapHolder;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MediaController.PhotoEntry;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessageObject.GroupedMessagePosition;
import org.telegram.messenger.MessageObject.GroupedMessages;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.MessagesStorage.IntCallback;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.NotificationCenter.NotificationCenterDelegate;
import org.telegram.messenger.NotificationsController;
import org.telegram.messenger.SecretChatHelper;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SendMessagesHelper.SendingMediaInfo;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.beta.R;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.exoplayer2.C;
import org.telegram.messenger.exoplayer2.DefaultRenderersFactory;
import org.telegram.messenger.exoplayer2.extractor.ts.PsExtractor;
import org.telegram.messenger.exoplayer2.extractor.ts.TsExtractor;
import org.telegram.messenger.exoplayer2.trackselection.AdaptiveTrackSelection;
import org.telegram.messenger.exoplayer2.ui.AspectRatioFrameLayout;
import org.telegram.messenger.exoplayer2.util.MimeTypes;
import org.telegram.messenger.support.widget.GridLayoutManager.SpanSizeLookup;
import org.telegram.messenger.support.widget.GridLayoutManagerFixed;
import org.telegram.messenger.support.widget.LinearLayoutManager;
import org.telegram.messenger.support.widget.LinearSmoothScrollerMiddle;
import org.telegram.messenger.support.widget.RecyclerView;
import org.telegram.messenger.support.widget.RecyclerView.Adapter;
import org.telegram.messenger.support.widget.RecyclerView.ItemDecoration;
import org.telegram.messenger.support.widget.RecyclerView.LayoutParams;
import org.telegram.messenger.support.widget.RecyclerView.OnScrollListener;
import org.telegram.messenger.support.widget.RecyclerView.State;
import org.telegram.messenger.support.widget.RecyclerView.ViewHolder;
import org.telegram.messenger.support.widget.helper.ItemTouchHelper.Callback;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC.BotInfo;
import org.telegram.tgnet.TLRPC.BotInlineResult;
import org.telegram.tgnet.TLRPC.Chat;
import org.telegram.tgnet.TLRPC.ChatFull;
import org.telegram.tgnet.TLRPC.ChatParticipant;
import org.telegram.tgnet.TLRPC.Document;
import org.telegram.tgnet.TLRPC.DocumentAttribute;
import org.telegram.tgnet.TLRPC.EncryptedChat;
import org.telegram.tgnet.TLRPC.FileLocation;
import org.telegram.tgnet.TLRPC.InputStickerSet;
import org.telegram.tgnet.TLRPC.KeyboardButton;
import org.telegram.tgnet.TLRPC.Message;
import org.telegram.tgnet.TLRPC.MessageMedia;
import org.telegram.tgnet.TLRPC.PhotoSize;
import org.telegram.tgnet.TLRPC.TL_botCommand;
import org.telegram.tgnet.TLRPC.TL_channelForbidden;
import org.telegram.tgnet.TLRPC.TL_channelFull;
import org.telegram.tgnet.TLRPC.TL_channelParticipantAdmin;
import org.telegram.tgnet.TLRPC.TL_channelParticipantCreator;
import org.telegram.tgnet.TLRPC.TL_channels_channelParticipant;
import org.telegram.tgnet.TLRPC.TL_channels_exportMessageLink;
import org.telegram.tgnet.TLRPC.TL_channels_reportSpam;
import org.telegram.tgnet.TLRPC.TL_chatForbidden;
import org.telegram.tgnet.TLRPC.TL_chatFull;
import org.telegram.tgnet.TLRPC.TL_chatParticipantsForbidden;
import org.telegram.tgnet.TLRPC.TL_dialog;
import org.telegram.tgnet.TLRPC.TL_document;
import org.telegram.tgnet.TLRPC.TL_documentAttributeImageSize;
import org.telegram.tgnet.TLRPC.TL_documentAttributeVideo;
import org.telegram.tgnet.TLRPC.TL_encryptedChat;
import org.telegram.tgnet.TLRPC.TL_encryptedChatDiscarded;
import org.telegram.tgnet.TLRPC.TL_encryptedChatRequested;
import org.telegram.tgnet.TLRPC.TL_encryptedChatWaiting;
import org.telegram.tgnet.TLRPC.TL_error;
import org.telegram.tgnet.TLRPC.TL_fileLocationUnavailable;
import org.telegram.tgnet.TLRPC.TL_game;
import org.telegram.tgnet.TLRPC.TL_inlineBotSwitchPM;
import org.telegram.tgnet.TLRPC.TL_inputStickerSetID;
import org.telegram.tgnet.TLRPC.TL_keyboardButtonBuy;
import org.telegram.tgnet.TLRPC.TL_keyboardButtonCallback;
import org.telegram.tgnet.TLRPC.TL_keyboardButtonGame;
import org.telegram.tgnet.TLRPC.TL_keyboardButtonSwitchInline;
import org.telegram.tgnet.TLRPC.TL_keyboardButtonUrl;
import org.telegram.tgnet.TLRPC.TL_messageActionPhoneCall;
import org.telegram.tgnet.TLRPC.TL_messageMediaGame;
import org.telegram.tgnet.TLRPC.TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC.TL_messages_getMessageEditData;
import org.telegram.tgnet.TLRPC.TL_messages_getUnreadMentions;
import org.telegram.tgnet.TLRPC.TL_messages_getWebPagePreview;
import org.telegram.tgnet.TLRPC.TL_messages_readMentions;
import org.telegram.tgnet.TLRPC.TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC.TL_photoSizeEmpty;
import org.telegram.tgnet.TLRPC.TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC.TL_replyKeyboardForceReply;
import org.telegram.tgnet.TLRPC.TL_user;
import org.telegram.tgnet.TLRPC.TL_userFull;
import org.telegram.tgnet.TLRPC.TL_webPage;
import org.telegram.tgnet.TLRPC.TL_webPagePending;
import org.telegram.tgnet.TLRPC.User;
import org.telegram.tgnet.TLRPC.WebPage;
import org.telegram.tgnet.TLRPC.messages_Messages;
import org.telegram.ui.ActionBar.ActionBar;
import org.telegram.ui.ActionBar.ActionBar.ActionBarMenuOnItemClick;
import org.telegram.ui.ActionBar.ActionBarLayout;
import org.telegram.ui.ActionBar.ActionBarMenu;
import org.telegram.ui.ActionBar.ActionBarMenuItem;
import org.telegram.ui.ActionBar.ActionBarMenuItem.ActionBarMenuItemSearchListener;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BackDrawable;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.BottomSheet.Builder;
import org.telegram.ui.ActionBar.SimpleTextView;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.ActionBar.Theme.ThemeInfo;
import org.telegram.ui.ActionBar.ThemeDescription;
import org.telegram.ui.ActionBar.ThemeDescription.ThemeDescriptionDelegate;
import org.telegram.ui.Adapters.MentionsAdapter;
import org.telegram.ui.Adapters.MentionsAdapter.MentionsAdapterDelegate;
import org.telegram.ui.Adapters.StickersAdapter;
import org.telegram.ui.Adapters.StickersAdapter.StickersAdapterDelegate;
import org.telegram.ui.AudioSelectActivity.AudioSelectActivityDelegate;
import org.telegram.ui.Cells.BotHelpCell;
import org.telegram.ui.Cells.BotHelpCell.BotHelpCellDelegate;
import org.telegram.ui.Cells.BotSwitchCell;
import org.telegram.ui.Cells.ChatActionCell;
import org.telegram.ui.Cells.ChatActionCell.ChatActionCellDelegate;
import org.telegram.ui.Cells.ChatLoadingCell;
import org.telegram.ui.Cells.ChatMessageCell;
import org.telegram.ui.Cells.ChatMessageCell.ChatMessageCellDelegate;
import org.telegram.ui.Cells.ChatUnreadCell;
import org.telegram.ui.Cells.CheckBoxCell;
import org.telegram.ui.Cells.ContextLinkCell;
import org.telegram.ui.Cells.MentionCell;
import org.telegram.ui.Cells.StickerCell;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.BackupImageView;
import org.telegram.ui.Components.ChatActivityEnterView;
import org.telegram.ui.Components.ChatActivityEnterView.ChatActivityEnterViewDelegate;
import org.telegram.ui.Components.ChatAttachAlert;
import org.telegram.ui.Components.ChatAttachAlert.ChatAttachViewDelegate;
import org.telegram.ui.Components.ChatAvatarContainer;
import org.telegram.ui.Components.ChatBigEmptyView;
import org.telegram.ui.Components.CombinedDrawable;
import org.telegram.ui.Components.CorrectlyMeasuringTextView;
import org.telegram.ui.Components.EmbedBottomSheet;
import org.telegram.ui.Components.EmojiView;
import org.telegram.ui.Components.ExtendedGridLayoutManager;
import org.telegram.ui.Components.FragmentContextView;
import org.telegram.ui.Components.InstantCameraView;
import org.telegram.ui.Components.LayoutHelper;
import org.telegram.ui.Components.NumberTextView;
import org.telegram.ui.Components.PipRoundVideoView;
import org.telegram.ui.Components.RadialProgressView;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.RecyclerListView.Holder;
import org.telegram.ui.Components.RecyclerListView.OnItemClickListener;
import org.telegram.ui.Components.RecyclerListView.OnItemClickListenerExtended;
import org.telegram.ui.Components.RecyclerListView.OnItemLongClickListener;
import org.telegram.ui.Components.RecyclerListView.OnItemLongClickListenerExtended;
import org.telegram.ui.Components.ShareAlert;
import org.telegram.ui.Components.Size;
import org.telegram.ui.Components.SizeNotifierFrameLayout;
import org.telegram.ui.Components.StickersAlert;
import org.telegram.ui.Components.StickersAlert.StickersAlertDelegate;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanBotCommand;
import org.telegram.ui.Components.URLSpanMono;
import org.telegram.ui.Components.URLSpanNoUnderline;
import org.telegram.ui.Components.URLSpanReplacement;
import org.telegram.ui.Components.URLSpanUserMention;
import org.telegram.ui.Components.voip.VoIPHelper;
import org.telegram.ui.DialogsActivity.DialogsActivityDelegate;
import org.telegram.ui.DocumentSelectActivity.DocumentSelectActivityDelegate;
import org.telegram.ui.LocationActivity.LocationActivityDelegate;
import org.telegram.ui.PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate;
import org.telegram.ui.PhotoViewer.EmptyPhotoViewerProvider;
import org.telegram.ui.PhotoViewer.PhotoViewerProvider;
import org.telegram.ui.PhotoViewer.PlaceProviderObject;
import org.telegram.ui.StickerPreviewViewer.StickerPreviewViewerDelegate;

public class ChatActivity extends BaseFragment implements NotificationCenterDelegate, DialogsActivityDelegate, LocationActivityDelegate {
    private static final int add_shortcut = 24;
    private static final int attach_audio = 3;
    private static final int attach_contact = 5;
    private static final int attach_document = 4;
    private static final int attach_gallery = 1;
    private static final int attach_location = 6;
    private static final int attach_photo = 0;
    private static final int attach_video = 2;
    private static final int bot_help = 30;
    private static final int bot_settings = 31;
    private static final int call = 32;
    private static final int chat_enc_timer = 13;
    private static final int chat_menu_attach = 14;
    private static final int clear_history = 15;
    private static final int copy = 10;
    private static final int delete = 12;
    private static final int delete_chat = 16;
    private static final int edit = 23;
    private static final int forward = 11;
    private static final int id_chat_compose_panel = 1000;
    private static final int mute = 18;
    private static final int reply = 19;
    private static final int report = 21;
    private static final int search = 40;
    private static final int share_contact = 17;
    private static final int star = 22;
    private SimpleTextView actionModeSubTextView;
    private SimpleTextView actionModeTextView;
    private FrameLayout actionModeTitleContainer;
    private ArrayList<View> actionModeViews = new ArrayList();
    private TextView addContactItem;
    private TextView addToContactsButton;
    private TextView alertNameTextView;
    private TextView alertTextView;
    private FrameLayout alertView;
    private AnimatorSet alertViewAnimator;
    private boolean allowContextBotPanel;
    private boolean allowContextBotPanelSecond = true;
    private boolean allowStickersPanel;
    private ArrayList<MessageObject> animatingMessageObjects = new ArrayList();
    private Paint aspectPaint;
    private Path aspectPath;
    private AspectRatioFrameLayout aspectRatioFrameLayout;
    private ActionBarMenuItem attachItem;
    private ChatAvatarContainer avatarContainer;
    private ChatBigEmptyView bigEmptyView;
    private MessageObject botButtons;
    private PhotoViewerProvider botContextProvider = new EmptyPhotoViewerProvider() {
        public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, FileLocation fileLocation, int index) {
            if (index >= 0) {
                if (index < ChatActivity.this.botContextResults.size()) {
                    int count = ChatActivity.this.mentionListView.getChildCount();
                    BotInlineResult result = ChatActivity.this.botContextResults.get(index);
                    int i = 0;
                    for (int a = 0; a < count; a++) {
                        ImageReceiver imageReceiver = null;
                        View view = ChatActivity.this.mentionListView.getChildAt(a);
                        if (view instanceof ContextLinkCell) {
                            ContextLinkCell cell = (ContextLinkCell) view;
                            if (cell.getResult() == result) {
                                imageReceiver = cell.getPhotoImage();
                            }
                        }
                        if (imageReceiver != null) {
                            int[] coords = new int[2];
                            view.getLocationInWindow(coords);
                            PlaceProviderObject object = new PlaceProviderObject();
                            object.viewX = coords[0];
                            int i2 = coords[1];
                            if (VERSION.SDK_INT < 21) {
                                i = AndroidUtilities.statusBarHeight;
                            }
                            object.viewY = i2 - i;
                            object.parentView = ChatActivity.this.mentionListView;
                            object.imageReceiver = imageReceiver;
                            object.thumb = imageReceiver.getBitmapSafe();
                            object.radius = imageReceiver.getRoundRadius();
                            return object;
                        }
                    }
                    return null;
                }
            }
            return null;
        }

        public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
            if (index >= 0) {
                if (index < ChatActivity.this.botContextResults.size()) {
                    ChatActivity.this.sendBotInlineResult((BotInlineResult) ChatActivity.this.botContextResults.get(index));
                }
            }
        }
    };
    private ArrayList<Object> botContextResults;
    private SparseArray<BotInfo> botInfo = new SparseArray();
    private MessageObject botReplyButtons;
    private String botUser;
    private int botsCount;
    private FrameLayout bottomOverlay;
    private FrameLayout bottomOverlayChat;
    private TextView bottomOverlayChatText;
    private TextView bottomOverlayText;
    private boolean[] cacheEndReached = new boolean[2];
    private int canEditMessagesCount;
    private int cantDeleteMessagesCount;
    protected ChatActivityEnterView chatActivityEnterView;
    private ChatActivityAdapter chatAdapter;
    private ChatAttachAlert chatAttachAlert;
    private long chatEnterTime;
    private GridLayoutManagerFixed chatLayoutManager;
    private long chatLeaveTime;
    private RecyclerListView chatListView;
    private boolean chatListViewIgnoreLayout;
    private ArrayList<ChatMessageCell> chatMessageCellsCache = new ArrayList();
    private boolean checkTextureViewPosition;
    private Dialog closeChatDialog;
    private ImageView closePinned;
    private ImageView closeReportSpam;
    private SizeNotifierFrameLayout contentView;
    private int createUnreadMessageAfterId;
    private boolean createUnreadMessageAfterIdLoading;
    protected Chat currentChat;
    protected EncryptedChat currentEncryptedChat;
    private boolean currentFloatingDateOnScreen;
    private boolean currentFloatingTopIsNotMessage;
    private String currentPicturePath;
    protected User currentUser;
    private long dialog_id;
    private ChatMessageCell drawLaterRoundProgressCell;
    private int editingMessageObjectReqId;
    private View emojiButtonRed;
    private TextView emptyView;
    private FrameLayout emptyViewContainer;
    private boolean[] endReached = new boolean[2];
    private boolean first = true;
    private boolean firstLoading = true;
    private boolean firstUnreadSent = false;
    private int first_unread_id;
    private boolean fixPaddingsInLayout;
    private AnimatorSet floatingDateAnimation;
    private ChatActionCell floatingDateView;
    private boolean forceScrollToTop;
    private boolean[] forwardEndReached = new boolean[]{true, true};
    private MessageObject forwardingMessage;
    private GroupedMessages forwardingMessageGroup;
    private ArrayList<MessageObject> forwardingMessages;
    private ArrayList<CharSequence> foundUrls;
    private WebPage foundWebPage;
    private FragmentContextView fragmentContextView;
    private FragmentContextView fragmentLocationContextView;
    private TextView gifHintTextView;
    private boolean globalIgnoreLayout;
    private LongSparseArray<GroupedMessages> groupedMessagesMap = new LongSparseArray();
    private boolean hasAllMentionsLocal;
    private boolean hasBotsCommands;
    private boolean hasUnfavedSelected;
    private ActionBarMenuItem headerItem;
    private Runnable hideAlertViewRunnable;
    private int highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
    private boolean ignoreAttachOnPause;
    protected ChatFull info;
    private long inlineReturn;
    private InstantCameraView instantCameraView;
    private boolean isBroadcast;
    private int lastLoadIndex;
    private int last_message_id = 0;
    private int linkSearchRequestId;
    private boolean loading;
    private boolean loadingForward;
    private boolean loadingFromOldPosition;
    private int loadingPinnedMessage;
    private int loadsCount;
    private int[] maxDate = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
    private int[] maxMessageId = new int[]{ConnectionsManager.DEFAULT_DATACENTER_ID, ConnectionsManager.DEFAULT_DATACENTER_ID};
    private TextView mediaBanTooltip;
    private FrameLayout mentionContainer;
    private ExtendedGridLayoutManager mentionGridLayoutManager;
    private LinearLayoutManager mentionLayoutManager;
    private AnimatorSet mentionListAnimation;
    private RecyclerListView mentionListView;
    private boolean mentionListViewIgnoreLayout;
    private boolean mentionListViewIsScrolling;
    private int mentionListViewLastViewPosition;
    private int mentionListViewLastViewTop;
    private int mentionListViewScrollOffsetY;
    private FrameLayout mentiondownButton;
    private ObjectAnimator mentiondownButtonAnimation;
    private TextView mentiondownButtonCounter;
    private ImageView mentiondownButtonImage;
    private MentionsAdapter mentionsAdapter;
    private OnItemClickListener mentionsOnItemClickListener;
    private long mergeDialogId;
    protected ArrayList<MessageObject> messages = new ArrayList();
    private HashMap<String, ArrayList<MessageObject>> messagesByDays = new HashMap();
    private SparseArray<MessageObject>[] messagesDict = new SparseArray[]{new SparseArray(), new SparseArray()};
    private int[] minDate = new int[2];
    private int[] minMessageId = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
    private TextView muteItem;
    private MessageObject needAnimateToMessage;
    private boolean needSelectFromMessageId;
    private int newMentionsCount;
    private int newUnreadMessageCount;
    OnItemClickListenerExtended onItemClickListener = new OnItemClickListenerExtended() {
        public void onItemClick(View view, int position, float x, float y) {
            ChatActivity.this.wasManualScroll = true;
            if (ChatActivity.this.actionBar.isActionModeShowed()) {
                boolean outside = false;
                if (view instanceof ChatMessageCell) {
                    outside = 1 ^ ((ChatMessageCell) view).isInsideBackground(x, y);
                }
                ChatActivity.this.processRowSelect(view, outside);
                return;
            }
            ChatActivity.this.createMenu(view, true, false);
        }
    };
    OnItemLongClickListenerExtended onItemLongClickListener = new OnItemLongClickListenerExtended() {
        public boolean onItemClick(View view, int position, float x, float y) {
            ChatActivity.this.wasManualScroll = true;
            if (ChatActivity.this.actionBar.isActionModeShowed()) {
                boolean outside = false;
                if (view instanceof ChatMessageCell) {
                    outside = ((ChatMessageCell) view).isInsideBackground(x, y) ^ 1;
                }
                ChatActivity.this.processRowSelect(view, outside);
            } else {
                ChatActivity.this.createMenu(view, false, true);
            }
            return true;
        }
    };
    private boolean openAnimationEnded;
    private boolean openSearchKeyboard;
    private View overlayView;
    private FrameLayout pagedownButton;
    private AnimatorSet pagedownButtonAnimation;
    private TextView pagedownButtonCounter;
    private ImageView pagedownButtonImage;
    private boolean pagedownButtonShowedByScroll;
    private boolean paused = true;
    private boolean pausedOnLastMessage;
    private String pendingLinkSearchString;
    private Runnable pendingWebPageTimeoutRunnable;
    private PhotoViewerProvider photoViewerProvider = new EmptyPhotoViewerProvider() {
        public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, FileLocation fileLocation, int index) {
            FileLocation fileLocation2 = fileLocation;
            int count = ChatActivity.this.chatListView.getChildCount();
            int i = 0;
            for (int a = 0; a < count; a++) {
                int b;
                ImageReceiver imageReceiver = null;
                View view = ChatActivity.this.chatListView.getChildAt(a);
                MessageObject message;
                if (view instanceof ChatMessageCell) {
                    if (messageObject != null) {
                        ChatMessageCell cell = (ChatMessageCell) view;
                        message = cell.getMessageObject();
                        if (message != null && message.getId() == messageObject.getId()) {
                            imageReceiver = cell.getPhotoImage();
                        }
                    }
                } else if (view instanceof ChatActionCell) {
                    ChatActionCell cell2 = (ChatActionCell) view;
                    message = cell2.getMessageObject();
                    if (message != null) {
                        if (messageObject != null) {
                            if (message.getId() == messageObject.getId()) {
                                imageReceiver = cell2.getPhotoImage();
                            }
                        } else if (fileLocation2 != null && message.photoThumbs != null) {
                            for (b = 0; b < message.photoThumbs.size(); b++) {
                                PhotoSize photoSize = (PhotoSize) message.photoThumbs.get(b);
                                if (photoSize.location.volume_id == fileLocation2.volume_id && photoSize.location.local_id == fileLocation2.local_id) {
                                    imageReceiver = cell2.getPhotoImage();
                                    break;
                                }
                            }
                        }
                    }
                }
                if (imageReceiver != null) {
                    int[] coords = new int[2];
                    view.getLocationInWindow(coords);
                    PlaceProviderObject object = new PlaceProviderObject();
                    object.viewX = coords[0];
                    b = coords[1];
                    if (VERSION.SDK_INT < 21) {
                        i = AndroidUtilities.statusBarHeight;
                    }
                    object.viewY = b - i;
                    object.parentView = ChatActivity.this.chatListView;
                    object.imageReceiver = imageReceiver;
                    object.thumb = imageReceiver.getBitmapSafe();
                    object.radius = imageReceiver.getRoundRadius();
                    if ((view instanceof ChatActionCell) && ChatActivity.this.currentChat != null) {
                        object.dialogId = -ChatActivity.this.currentChat.id;
                    }
                    if ((ChatActivity.this.pinnedMessageView != null && ChatActivity.this.pinnedMessageView.getTag() == null) || (ChatActivity.this.reportSpamView != null && ChatActivity.this.reportSpamView.getTag() == null)) {
                        object.clipTopAddition = AndroidUtilities.dp(48.0f);
                    }
                    return object;
                }
            }
            return null;
        }
    };
    private FileLocation pinnedImageLocation;
    private View pinnedLineView;
    private BackupImageView pinnedMessageImageView;
    private SimpleTextView pinnedMessageNameTextView;
    private MessageObject pinnedMessageObject;
    private SimpleTextView pinnedMessageTextView;
    private FrameLayout pinnedMessageView;
    private AnimatorSet pinnedMessageViewAnimator;
    private RadialProgressView progressBar;
    private FrameLayout progressView;
    private View progressView2;
    private AnimatorSet replyButtonAnimation;
    private ImageView replyCloseImageView;
    private ImageView replyIconImageView;
    private FileLocation replyImageLocation;
    private BackupImageView replyImageView;
    private View replyLineView;
    private SimpleTextView replyNameTextView;
    private SimpleTextView replyObjectTextView;
    private MessageObject replyingMessageObject;
    private TextView reportSpamButton;
    private FrameLayout reportSpamContainer;
    private LinearLayout reportSpamView;
    private AnimatorSet reportSpamViewAnimator;
    private int returnToLoadIndex;
    private int returnToMessageId;
    private FrameLayout roundVideoContainer;
    private AnimatorSet runningAnimation;
    private MessageObject scrollToMessage;
    private int scrollToMessagePosition = -10000;
    private int scrollToOffsetOnRecreate = 0;
    private int scrollToPositionOnRecreate = -1;
    private boolean scrollToTopOnResume;
    private boolean scrollToTopUnReadOnResume;
    private boolean scrollingFloatingDate;
    private ImageView searchCalendarButton;
    private FrameLayout searchContainer;
    private SimpleTextView searchCountText;
    private ImageView searchDownButton;
    private ActionBarMenuItem searchItem;
    private ImageView searchUpButton;
    private ImageView searchUserButton;
    private boolean searchingForUser;
    private User searchingUserMessages;
    private SparseArray<MessageObject>[] selectedMessagesCanCopyIds = new SparseArray[]{new SparseArray(), new SparseArray()};
    private SparseArray<MessageObject>[] selectedMessagesCanStarIds = new SparseArray[]{new SparseArray(), new SparseArray()};
    private NumberTextView selectedMessagesCountTextView;
    private SparseArray<MessageObject>[] selectedMessagesIds = new SparseArray[]{new SparseArray(), new SparseArray()};
    private MessageObject selectedObject;
    private GroupedMessages selectedObjectGroup;
    private int startLoadFromMessageId;
    private int startLoadFromMessageOffset = ConnectionsManager.DEFAULT_DATACENTER_ID;
    private boolean startReplyOnTextChange;
    private String startVideoEdit;
    private StickersAdapter stickersAdapter;
    private RecyclerListView stickersListView;
    private OnItemClickListener stickersOnItemClickListener;
    private FrameLayout stickersPanel;
    private ImageView stickersPanelArrow;
    private View timeItem2;
    private int topViewWasVisible;
    private MessageObject unreadMessageObject;
    private boolean userBlocked = false;
    private TextureView videoTextureView;
    private AnimatorSet voiceHintAnimation;
    private Runnable voiceHintHideRunnable;
    private TextView voiceHintTextView;
    private Runnable waitingForCharaterEnterRunnable;
    private ArrayList<Integer> waitingForLoad = new ArrayList();
    private boolean waitingForReplyMessageLoad;
    private boolean wasManualScroll;
    private boolean wasPaused;

    class AnonymousClass100 implements OnClickListener {
        final /* synthetic */ boolean[] val$deleteForAll;

        AnonymousClass100(boolean[] zArr) {
            this.val$deleteForAll = zArr;
        }

        public void onClick(View v) {
            CheckBoxCell cell = (CheckBoxCell) v;
            this.val$deleteForAll[0] = this.val$deleteForAll[0] ^ true;
            cell.setChecked(this.val$deleteForAll[0], true);
        }
    }

    class AnonymousClass101 implements OnClickListener {
        final /* synthetic */ boolean[] val$deleteForAll;

        AnonymousClass101(boolean[] zArr) {
            this.val$deleteForAll = zArr;
        }

        public void onClick(View v) {
            CheckBoxCell cell = (CheckBoxCell) v;
            this.val$deleteForAll[0] = this.val$deleteForAll[0] ^ true;
            cell.setChecked(this.val$deleteForAll[0], true);
        }
    }

    class AnonymousClass102 implements DialogInterface.OnClickListener {
        final /* synthetic */ boolean[] val$checks;
        final /* synthetic */ boolean[] val$deleteForAll;
        final /* synthetic */ GroupedMessages val$finalSelectedGroup;
        final /* synthetic */ MessageObject val$finalSelectedObject;
        final /* synthetic */ User val$userFinal;

        AnonymousClass102(MessageObject messageObject, GroupedMessages groupedMessages, boolean[] zArr, User user, boolean[] zArr2) {
            this.val$finalSelectedObject = messageObject;
            this.val$finalSelectedGroup = groupedMessages;
            this.val$deleteForAll = zArr;
            this.val$userFinal = user;
            this.val$checks = zArr2;
        }

        public void onClick(DialogInterface dialogInterface, int i) {
            ArrayList<Integer> ids;
            ArrayList<Long> random_ids;
            if (this.val$finalSelectedObject != null) {
                ids = new ArrayList();
                ArrayList<Long> random_ids2 = null;
                if (r0.val$finalSelectedGroup != null) {
                    random_ids = null;
                    for (int a = 0; a < r0.val$finalSelectedGroup.messages.size(); a++) {
                        MessageObject messageObject = (MessageObject) r0.val$finalSelectedGroup.messages.get(a);
                        ids.add(Integer.valueOf(messageObject.getId()));
                        if (!(ChatActivity.this.currentEncryptedChat == null || messageObject.messageOwner.random_id == 0 || messageObject.type == 10)) {
                            if (random_ids == null) {
                                random_ids = new ArrayList();
                            }
                            random_ids.add(Long.valueOf(messageObject.messageOwner.random_id));
                        }
                    }
                    random_ids2 = random_ids;
                } else {
                    ids.add(Integer.valueOf(r0.val$finalSelectedObject.getId()));
                    if (!(ChatActivity.this.currentEncryptedChat == null || r0.val$finalSelectedObject.messageOwner.random_id == 0 || r0.val$finalSelectedObject.type == 10)) {
                        random_ids2 = new ArrayList();
                        random_ids2.add(Long.valueOf(r0.val$finalSelectedObject.messageOwner.random_id));
                    }
                }
                MessagesController.getInstance(ChatActivity.this.currentAccount).deleteMessages(ids, random_ids2, ChatActivity.this.currentEncryptedChat, r0.val$finalSelectedObject.messageOwner.to_id.channel_id, r0.val$deleteForAll[0]);
            } else {
                ArrayList<Integer> ids2 = null;
                for (int a2 = 1; a2 >= 0; a2--) {
                    MessageObject msg;
                    ids2 = new ArrayList();
                    for (int b = 0; b < ChatActivity.this.selectedMessagesIds[a2].size(); b++) {
                        ids2.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[a2].keyAt(b)));
                    }
                    random_ids = null;
                    int channelId = 0;
                    if (!ids2.isEmpty()) {
                        msg = (MessageObject) ChatActivity.this.selectedMessagesIds[a2].get(((Integer) ids2.get(0)).intValue());
                        if (null == null && msg.messageOwner.to_id.channel_id != 0) {
                            channelId = msg.messageOwner.to_id.channel_id;
                        }
                    }
                    int channelId2 = channelId;
                    if (ChatActivity.this.currentEncryptedChat != null) {
                        random_ids = new ArrayList();
                        for (channelId = 0; channelId < ChatActivity.this.selectedMessagesIds[a2].size(); channelId++) {
                            msg = (MessageObject) ChatActivity.this.selectedMessagesIds[a2].valueAt(channelId);
                            if (!(msg.messageOwner.random_id == 0 || msg.type == 10)) {
                                random_ids.add(Long.valueOf(msg.messageOwner.random_id));
                            }
                        }
                    }
                    MessagesController.getInstance(ChatActivity.this.currentAccount).deleteMessages(ids2, random_ids, ChatActivity.this.currentEncryptedChat, channelId2, r0.val$deleteForAll[0]);
                }
                ChatActivity.this.actionBar.hideActionMode();
                ChatActivity.this.updatePinnedMessageView(true);
                ids = ids2;
            }
            if (r0.val$userFinal != null) {
                if (r0.val$checks[0]) {
                    MessagesController.getInstance(ChatActivity.this.currentAccount).deleteUserFromChat(ChatActivity.this.currentChat.id, r0.val$userFinal, ChatActivity.this.info);
                }
                if (r0.val$checks[1]) {
                    TL_channels_reportSpam req = new TL_channels_reportSpam();
                    req.channel = MessagesController.getInputChannel(ChatActivity.this.currentChat);
                    req.user_id = MessagesController.getInstance(ChatActivity.this.currentAccount).getInputUser(r0.val$userFinal);
                    req.id = ids;
                    ConnectionsManager.getInstance(ChatActivity.this.currentAccount).sendRequest(req, new RequestDelegate() {
                        public void run(TLObject response, TL_error error) {
                        }
                    });
                }
                if (r0.val$checks[2]) {
                    MessagesController.getInstance(ChatActivity.this.currentAccount).deleteUserChannelHistory(ChatActivity.this.currentChat, r0.val$userFinal, 0);
                }
            }
        }
    }

    class AnonymousClass103 implements DialogInterface.OnClickListener {
        final /* synthetic */ ArrayList val$options;

        AnonymousClass103(ArrayList arrayList) {
            this.val$options = arrayList;
        }

        public void onClick(DialogInterface dialogInterface, int i) {
            if (ChatActivity.this.selectedObject != null && i >= 0) {
                if (i < this.val$options.size()) {
                    ChatActivity.this.processSelectedOption(((Integer) this.val$options.get(i)).intValue());
                }
            }
        }
    }

    class AnonymousClass84 implements Runnable {
        final /* synthetic */ Bundle val$bundle;
        final /* synthetic */ int val$channel_id;
        final /* synthetic */ BaseFragment val$lastFragment;

        AnonymousClass84(BaseFragment baseFragment, Bundle bundle, int i) {
            this.val$lastFragment = baseFragment;
            this.val$bundle = bundle;
            this.val$channel_id = i;
        }

        public void run() {
            ActionBarLayout parentLayout = ChatActivity.this.parentLayout;
            if (this.val$lastFragment != null) {
                NotificationCenter.getInstance(ChatActivity.this.currentAccount).removeObserver(this.val$lastFragment, NotificationCenter.closeChats);
            }
            NotificationCenter.getInstance(ChatActivity.this.currentAccount).postNotificationName(NotificationCenter.closeChats, new Object[0]);
            parentLayout.presentFragment(new ChatActivity(this.val$bundle), true);
            AndroidUtilities.runOnUIThread(new Runnable() {
                public void run() {
                    MessagesController.getInstance(ChatActivity.this.currentAccount).loadFullChat(AnonymousClass84.this.val$channel_id, 0, true);
                }
            }, 1000);
        }
    }

    class AnonymousClass85 implements Runnable {
        final /* synthetic */ Bundle val$bundle;
        final /* synthetic */ int val$channel_id;
        final /* synthetic */ BaseFragment val$lastFragment;

        AnonymousClass85(BaseFragment baseFragment, Bundle bundle, int i) {
            this.val$lastFragment = baseFragment;
            this.val$bundle = bundle;
            this.val$channel_id = i;
        }

        public void run() {
            ActionBarLayout parentLayout = ChatActivity.this.parentLayout;
            if (this.val$lastFragment != null) {
                NotificationCenter.getInstance(ChatActivity.this.currentAccount).removeObserver(this.val$lastFragment, NotificationCenter.closeChats);
            }
            NotificationCenter.getInstance(ChatActivity.this.currentAccount).postNotificationName(NotificationCenter.closeChats, new Object[0]);
            parentLayout.presentFragment(new ChatActivity(this.val$bundle), true);
            AndroidUtilities.runOnUIThread(new Runnable() {
                public void run() {
                    MessagesController.getInstance(ChatActivity.this.currentAccount).loadFullChat(AnonymousClass85.this.val$channel_id, 0, true);
                }
            }, 1000);
        }
    }

    class AnonymousClass98 implements Runnable {
        final /* synthetic */ AlertDialog[] val$progressDialog;
        final /* synthetic */ int val$reqId;

        AnonymousClass98(AlertDialog[] alertDialogArr, int i) {
            this.val$progressDialog = alertDialogArr;
            this.val$reqId = i;
        }

        public void run() {
            if (this.val$progressDialog[0] != null) {
                this.val$progressDialog[0].setMessage(LocaleController.getString("Loading", R.string.Loading));
                this.val$progressDialog[0].setCanceledOnTouchOutside(false);
                this.val$progressDialog[0].setCancelable(false);
                this.val$progressDialog[0].setButton(-2, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(AnonymousClass98.this.val$reqId, true);
                        try {
                            dialog.dismiss();
                        } catch (Throwable e) {
                            FileLog.e(e);
                        }
                    }
                });
                ChatActivity.this.showDialog(this.val$progressDialog[0]);
            }
        }
    }

    class AnonymousClass99 implements OnClickListener {
        final /* synthetic */ boolean[] val$checks;

        AnonymousClass99(boolean[] zArr) {
            this.val$checks = zArr;
        }

        public void onClick(View v) {
            if (v.isEnabled()) {
                CheckBoxCell cell = (CheckBoxCell) v;
                Integer num = (Integer) cell.getTag();
                this.val$checks[num.intValue()] = this.val$checks[num.intValue()] ^ true;
                cell.setChecked(this.val$checks[num.intValue()], true);
            }
        }
    }

    class AnonymousClass97 implements RequestDelegate {
        final /* synthetic */ GroupedMessages val$finalSelectedGroup;
        final /* synthetic */ MessageObject val$finalSelectedObject;
        final /* synthetic */ AlertDialog[] val$progressDialog;

        AnonymousClass97(AlertDialog[] alertDialogArr, MessageObject messageObject, GroupedMessages groupedMessages) {
            this.val$progressDialog = alertDialogArr;
            this.val$finalSelectedObject = messageObject;
            this.val$finalSelectedGroup = groupedMessages;
        }

        public void run(final TLObject response, TL_error error) {
            AndroidUtilities.runOnUIThread(new Runnable() {
                public void run() {
                    try {
                        AnonymousClass97.this.val$progressDialog[0].dismiss();
                    } catch (Throwable th) {
                    }
                    AnonymousClass97.this.val$progressDialog[0] = null;
                    int loadType = 2;
                    if (response != null) {
                        TL_channels_channelParticipant participant = response;
                        if (!((participant.participant instanceof TL_channelParticipantAdmin) || (participant.participant instanceof TL_channelParticipantCreator))) {
                            loadType = 0;
                        }
                    }
                    ChatActivity.this.createDeleteMessagesAlert(AnonymousClass97.this.val$finalSelectedObject, AnonymousClass97.this.val$finalSelectedGroup, loadType);
                }
            });
        }
    }

    public class ChatActivityAdapter extends Adapter {
        private int botInfoRow = -1;
        private boolean isBot;
        private int loadingDownRow;
        private int loadingUpRow;
        private Context mContext;
        private int messagesEndRow;
        private int messagesStartRow;
        private int rowCount;

        public ChatActivityAdapter(Context context) {
            this.mContext = context;
            boolean z = ChatActivity.this.currentUser != null && ChatActivity.this.currentUser.bot;
            this.isBot = z;
        }

        public void updateRows() {
            int i;
            this.rowCount = 0;
            if (ChatActivity.this.messages.isEmpty()) {
                this.loadingUpRow = -1;
                this.loadingDownRow = -1;
                this.messagesStartRow = -1;
                this.messagesEndRow = -1;
            } else {
                if (ChatActivity.this.forwardEndReached[0]) {
                    if (ChatActivity.this.mergeDialogId == 0 || ChatActivity.this.forwardEndReached[1]) {
                        this.loadingDownRow = -1;
                        this.messagesStartRow = this.rowCount;
                        this.rowCount += ChatActivity.this.messages.size();
                        this.messagesEndRow = this.rowCount;
                        if (ChatActivity.this.endReached[0]) {
                            if (ChatActivity.this.mergeDialogId != 0 || ChatActivity.this.endReached[1]) {
                                this.loadingUpRow = -1;
                            }
                        }
                        i = this.rowCount;
                        this.rowCount = i + 1;
                        this.loadingUpRow = i;
                    }
                }
                int i2 = this.rowCount;
                this.rowCount = i2 + 1;
                this.loadingDownRow = i2;
                this.messagesStartRow = this.rowCount;
                this.rowCount += ChatActivity.this.messages.size();
                this.messagesEndRow = this.rowCount;
                if (ChatActivity.this.endReached[0]) {
                    if (ChatActivity.this.mergeDialogId != 0) {
                    }
                    this.loadingUpRow = -1;
                }
                i = this.rowCount;
                this.rowCount = i + 1;
                this.loadingUpRow = i;
            }
            if (ChatActivity.this.currentUser == null || !ChatActivity.this.currentUser.bot) {
                this.botInfoRow = -1;
                return;
            }
            i = this.rowCount;
            this.rowCount = i + 1;
            this.botInfoRow = i;
        }

        public int getItemCount() {
            return this.rowCount;
        }

        public long getItemId(int i) {
            return -1;
        }

        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            View view = null;
            if (viewType == 0) {
                if (ChatActivity.this.chatMessageCellsCache.isEmpty()) {
                    view = new ChatMessageCell(this.mContext);
                } else {
                    view = (View) ChatActivity.this.chatMessageCellsCache.get(0);
                    ChatActivity.this.chatMessageCellsCache.remove(0);
                }
                ChatMessageCell chatMessageCell = (ChatMessageCell) view;
                chatMessageCell.setDelegate(new ChatMessageCellDelegate() {
                    public void didPressedShare(ChatMessageCell cell) {
                        if (ChatActivity.this.getParentActivity() != null) {
                            if (ChatActivity.this.chatActivityEnterView != null) {
                                ChatActivity.this.chatActivityEnterView.closeKeyboard();
                            }
                            MessageObject messageObject = cell.getMessageObject();
                            if (!UserObject.isUserSelf(ChatActivity.this.currentUser) || messageObject.messageOwner.fwd_from.saved_from_peer == null) {
                                ArrayList<MessageObject> arrayList = null;
                                if (messageObject.getGroupId() != 0) {
                                    GroupedMessages groupedMessages = (GroupedMessages) ChatActivity.this.groupedMessagesMap.get(messageObject.getGroupId());
                                    if (groupedMessages != null) {
                                        arrayList = groupedMessages.messages;
                                    }
                                }
                                if (arrayList == null) {
                                    arrayList = new ArrayList();
                                    arrayList.add(messageObject);
                                }
                                ChatActivity chatActivity = ChatActivity.this;
                                Context access$28400 = ChatActivityAdapter.this.mContext;
                                boolean z = ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup && ChatActivity.this.currentChat.username != null && ChatActivity.this.currentChat.username.length() > 0;
                                chatActivity.showDialog(new ShareAlert(access$28400, arrayList, null, z, null, false));
                            } else {
                                Bundle args = new Bundle();
                                if (messageObject.messageOwner.fwd_from.saved_from_peer.channel_id != 0) {
                                    args.putInt("chat_id", messageObject.messageOwner.fwd_from.saved_from_peer.channel_id);
                                } else if (messageObject.messageOwner.fwd_from.saved_from_peer.chat_id != 0) {
                                    args.putInt("chat_id", messageObject.messageOwner.fwd_from.saved_from_peer.chat_id);
                                } else if (messageObject.messageOwner.fwd_from.saved_from_peer.user_id != 0) {
                                    args.putInt("user_id", messageObject.messageOwner.fwd_from.saved_from_peer.user_id);
                                }
                                args.putInt("message_id", messageObject.messageOwner.fwd_from.saved_from_msg_id);
                                if (MessagesController.getInstance(ChatActivity.this.currentAccount).checkCanOpenChat(args, ChatActivity.this)) {
                                    ChatActivity.this.presentFragment(new ChatActivity(args));
                                }
                            }
                        }
                    }

                    public boolean needPlayMessage(MessageObject messageObject) {
                        if (!messageObject.isVoice()) {
                            if (!messageObject.isRoundVideo()) {
                                if (messageObject.isMusic()) {
                                    return MediaController.getInstance().setPlaylist(ChatActivity.this.messages, messageObject);
                                }
                                return false;
                            }
                        }
                        boolean result = MediaController.getInstance().playMessage(messageObject);
                        MediaController.getInstance().setVoiceMessagesPlaylist(result ? ChatActivity.this.createVoiceMessagesPlaylist(messageObject, false) : null, false);
                        return result;
                    }

                    public void didPressedChannelAvatar(ChatMessageCell cell, Chat chat, int postId) {
                        if (ChatActivity.this.actionBar.isActionModeShowed()) {
                            ChatActivity.this.processRowSelect(cell, true);
                            return;
                        }
                        if (!(chat == null || chat == ChatActivity.this.currentChat)) {
                            Bundle args = new Bundle();
                            args.putInt("chat_id", chat.id);
                            if (postId != 0) {
                                args.putInt("message_id", postId);
                            }
                            if (MessagesController.getInstance(ChatActivity.this.currentAccount).checkCanOpenChat(args, ChatActivity.this, cell.getMessageObject())) {
                                ChatActivity.this.presentFragment(new ChatActivity(args), true);
                            }
                        }
                    }

                    public void didPressedOther(ChatMessageCell cell) {
                        if (cell.getMessageObject().type != 16) {
                            ChatActivity.this.createMenu(cell, true, false, false);
                        } else if (ChatActivity.this.currentUser != null) {
                            VoIPHelper.startCall(ChatActivity.this.currentUser, ChatActivity.this.getParentActivity(), MessagesController.getInstance(ChatActivity.this.currentAccount).getUserFull(ChatActivity.this.currentUser.id));
                        }
                    }

                    public void didPressedUserAvatar(ChatMessageCell cell, User user) {
                        boolean z = true;
                        if (ChatActivity.this.actionBar.isActionModeShowed()) {
                            ChatActivity.this.processRowSelect(cell, true);
                            return;
                        }
                        if (!(user == null || user.id == UserConfig.getInstance(ChatActivity.this.currentAccount).getClientUserId())) {
                            Bundle args = new Bundle();
                            args.putInt("user_id", user.id);
                            ProfileActivity fragment = new ProfileActivity(args);
                            if (ChatActivity.this.currentUser == null || ChatActivity.this.currentUser.id != user.id) {
                                z = false;
                            }
                            fragment.setPlayProfileAnimation(z);
                            ChatActivity.this.presentFragment(fragment);
                        }
                    }

                    public void didPressedBotButton(ChatMessageCell cell, KeyboardButton button) {
                        if (ChatActivity.this.getParentActivity() != null) {
                            if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || (button instanceof TL_keyboardButtonSwitchInline) || (button instanceof TL_keyboardButtonCallback) || (button instanceof TL_keyboardButtonGame) || (button instanceof TL_keyboardButtonUrl) || (button instanceof TL_keyboardButtonBuy)) {
                                ChatActivity.this.chatActivityEnterView.didPressedBotButton(button, cell.getMessageObject(), cell.getMessageObject());
                            }
                        }
                    }

                    public void didPressedCancelSendButton(ChatMessageCell cell) {
                        MessageObject message = cell.getMessageObject();
                        if (message.messageOwner.send_state != 0) {
                            SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).cancelSendingMessage(message);
                        }
                    }

                    public void didLongPressed(ChatMessageCell cell) {
                        ChatActivity.this.createMenu(cell, false, false);
                    }

                    public boolean canPerformActions() {
                        return (ChatActivity.this.actionBar == null || ChatActivity.this.actionBar.isActionModeShowed()) ? false : true;
                    }

                    public void didPressedUrl(MessageObject messageObject, CharacterStyle url, boolean longPress) {
                        if (url != null) {
                            boolean z = false;
                            if (url instanceof URLSpanMono) {
                                ((URLSpanMono) url).copyToClipboard();
                                Toast.makeText(ChatActivity.this.getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), 0).show();
                            } else if (url instanceof URLSpanUserMention) {
                                User user = MessagesController.getInstance(ChatActivity.this.currentAccount).getUser(Utilities.parseInt(((URLSpanUserMention) url).getURL()));
                                if (user != null) {
                                    MessagesController.openChatOrProfileWith(user, null, ChatActivity.this, 0, false);
                                }
                            } else if (url instanceof URLSpanNoUnderline) {
                                str = ((URLSpanNoUnderline) url).getURL();
                                if (str.startsWith("@")) {
                                    MessagesController.getInstance(ChatActivity.this.currentAccount).openByUserName(str.substring(1), ChatActivity.this, 0);
                                } else {
                                    if (!str.startsWith("#")) {
                                        if (!str.startsWith("$")) {
                                            if (str.startsWith("/") && URLSpanBotCommand.enabled) {
                                                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                                if (ChatActivity.this.currentChat != null && ChatActivity.this.currentChat.megagroup) {
                                                    z = true;
                                                }
                                                chatActivityEnterView.setCommand(messageObject, str, longPress, z);
                                                if (!longPress && ChatActivity.this.chatActivityEnterView.getFieldText() == null) {
                                                    ChatActivity.this.showReplyPanel(false, null, null, null, false);
                                                }
                                            }
                                        }
                                    }
                                    if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                        ChatActivity.this.openSearchWithText(str);
                                    } else {
                                        DialogsActivity fragment = new DialogsActivity(null);
                                        fragment.setSearchString(str);
                                        ChatActivity.this.presentFragment(fragment);
                                    }
                                }
                            } else {
                                str = ((URLSpan) url).getURL();
                                if (longPress) {
                                    Builder builder = new Builder(ChatActivity.this.getParentActivity());
                                    builder.setTitle(str);
                                    builder.setItems(new CharSequence[]{LocaleController.getString("Open", R.string.Open), LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int which) {
                                            boolean z = true;
                                            if (which == 0) {
                                                Context parentActivity = ChatActivity.this.getParentActivity();
                                                String str = str;
                                                if (ChatActivity.this.inlineReturn != 0) {
                                                    z = false;
                                                }
                                                Browser.openUrl(parentActivity, str, z);
                                            } else if (which == 1) {
                                                String url = str;
                                                if (url.startsWith("mailto:")) {
                                                    url = url.substring(7);
                                                } else if (url.startsWith("tel:")) {
                                                    url = url.substring(4);
                                                }
                                                AndroidUtilities.addToClipboard(url);
                                            }
                                        }
                                    });
                                    ChatActivity.this.showDialog(builder.create());
                                } else if (url instanceof URLSpanReplacement) {
                                    ChatActivity.this.showOpenUrlAlert(((URLSpanReplacement) url).getURL(), true);
                                } else if (url instanceof URLSpan) {
                                    if (!(!(messageObject.messageOwner.media instanceof TL_messageMediaWebPage) || messageObject.messageOwner.media.webpage == null || messageObject.messageOwner.media.webpage.cached_page == null)) {
                                        String lowerUrl = str.toLowerCase();
                                        String lowerUrl2 = messageObject.messageOwner.media.webpage.url.toLowerCase();
                                        if ((lowerUrl.contains("telegra.ph") || lowerUrl.contains("t.me/iv")) && (lowerUrl.contains(lowerUrl2) || lowerUrl2.contains(lowerUrl))) {
                                            ArticleViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this);
                                            ArticleViewer.getInstance().open(messageObject);
                                            return;
                                        }
                                    }
                                    Context parentActivity = ChatActivity.this.getParentActivity();
                                    if (ChatActivity.this.inlineReturn == 0) {
                                        z = true;
                                    }
                                    Browser.openUrl(parentActivity, str, z);
                                } else if (url instanceof ClickableSpan) {
                                    ((ClickableSpan) url).onClick(ChatActivity.this.fragmentView);
                                }
                            }
                        }
                    }

                    public void needOpenWebView(String url, String title, String description, String originalUrl, int w, int h) {
                        EmbedBottomSheet.show(ChatActivityAdapter.this.mContext, title, description, originalUrl, url, w, h);
                    }

                    public void didPressedReplyMessage(ChatMessageCell cell, int id) {
                        MessageObject messageObject = cell.getMessageObject();
                        ChatActivity.this.scrollToMessageId(id, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, false);
                    }

                    /* JADX WARNING: inconsistent code. */
                    /* Code decompiled incorrectly, please refer to instructions dump. */
                    public void didPressedViaBot(org.telegram.ui.Cells.ChatMessageCell r4, java.lang.String r5) {
                        /*
                        r3 = this;
                        r0 = org.telegram.ui.ChatActivity.ChatActivityAdapter.this;
                        r0 = org.telegram.ui.ChatActivity.this;
                        r0 = r0.bottomOverlayChat;
                        if (r0 == 0) goto L_0x0018;
                    L_0x000a:
                        r0 = org.telegram.ui.ChatActivity.ChatActivityAdapter.this;
                        r0 = org.telegram.ui.ChatActivity.this;
                        r0 = r0.bottomOverlayChat;
                        r0 = r0.getVisibility();
                        if (r0 == 0) goto L_0x0030;
                    L_0x0018:
                        r0 = org.telegram.ui.ChatActivity.ChatActivityAdapter.this;
                        r0 = org.telegram.ui.ChatActivity.this;
                        r0 = r0.bottomOverlay;
                        if (r0 == 0) goto L_0x0031;
                    L_0x0022:
                        r0 = org.telegram.ui.ChatActivity.ChatActivityAdapter.this;
                        r0 = org.telegram.ui.ChatActivity.this;
                        r0 = r0.bottomOverlay;
                        r0 = r0.getVisibility();
                        if (r0 != 0) goto L_0x0031;
                    L_0x0030:
                        return;
                    L_0x0031:
                        r0 = org.telegram.ui.ChatActivity.ChatActivityAdapter.this;
                        r0 = org.telegram.ui.ChatActivity.this;
                        r0 = r0.chatActivityEnterView;
                        if (r0 == 0) goto L_0x0069;
                    L_0x0039:
                        if (r5 == 0) goto L_0x0069;
                    L_0x003b:
                        r0 = r5.length();
                        if (r0 <= 0) goto L_0x0069;
                    L_0x0041:
                        r0 = org.telegram.ui.ChatActivity.ChatActivityAdapter.this;
                        r0 = org.telegram.ui.ChatActivity.this;
                        r0 = r0.chatActivityEnterView;
                        r1 = new java.lang.StringBuilder;
                        r1.<init>();
                        r2 = "@";
                        r1.append(r2);
                        r1.append(r5);
                        r2 = " ";
                        r1.append(r2);
                        r1 = r1.toString();
                        r0.setFieldText(r1);
                        r0 = org.telegram.ui.ChatActivity.ChatActivityAdapter.this;
                        r0 = org.telegram.ui.ChatActivity.this;
                        r0 = r0.chatActivityEnterView;
                        r0.openKeyboard();
                    L_0x0069:
                        return;
                        */
                        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.ChatActivityAdapter.1.didPressedViaBot(org.telegram.ui.Cells.ChatMessageCell, java.lang.String):void");
                    }

                    public void didPressedImage(ChatMessageCell cell) {
                        MessageObject message = cell.getMessageObject();
                        int i = 0;
                        if (message.isSendError()) {
                            ChatActivity.this.createMenu(cell, false, false);
                        } else if (!message.isSending()) {
                            if (message.needDrawBluredPreview()) {
                                if (ChatActivity.this.sendSecretMessageRead(message)) {
                                    cell.invalidate();
                                }
                                SecretMediaViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                                SecretMediaViewer.getInstance().openMedia(message, ChatActivity.this.photoViewerProvider);
                            } else if (message.type == 13) {
                                ChatActivity chatActivity = ChatActivity.this;
                                Context parentActivity = ChatActivity.this.getParentActivity();
                                BaseFragment baseFragment = ChatActivity.this;
                                InputStickerSet inputStickerSet = message.getInputStickerSet();
                                ChatActivityEnterView chatActivityEnterView = (ChatActivity.this.bottomOverlayChat.getVisibility() == 0 || !ChatObject.canSendStickers(ChatActivity.this.currentChat)) ? null : ChatActivity.this.chatActivityEnterView;
                                chatActivity.showDialog(new StickersAlert(parentActivity, baseFragment, inputStickerSet, null, chatActivityEnterView));
                            } else {
                                if (!(message.isVideo() || message.type == 1 || (message.type == 0 && !message.isWebpageDocument()))) {
                                    if (!message.isGif()) {
                                        File f;
                                        if (message.type == 3) {
                                            ChatActivity.this.sendSecretMessageRead(message);
                                            f = null;
                                            try {
                                                if (!(message.messageOwner.attachPath == null || message.messageOwner.attachPath.length() == 0)) {
                                                    f = new File(message.messageOwner.attachPath);
                                                }
                                                if (f == null || !f.exists()) {
                                                    f = FileLoader.getPathToMessage(message.messageOwner);
                                                }
                                                Intent intent = new Intent("android.intent.action.VIEW");
                                                if (VERSION.SDK_INT >= 24) {
                                                    intent.setFlags(1);
                                                    intent.setDataAndType(FileProvider.getUriForFile(ChatActivity.this.getParentActivity(), "org.telegram.messenger.beta.provider", f), MimeTypes.VIDEO_MP4);
                                                } else {
                                                    intent.setDataAndType(Uri.fromFile(f), MimeTypes.VIDEO_MP4);
                                                }
                                                ChatActivity.this.getParentActivity().startActivityForResult(intent, 500);
                                            } catch (Throwable e) {
                                                FileLog.e(e);
                                                ChatActivity.this.alertUserOpenError(message);
                                            }
                                        } else if (message.type == 4) {
                                            if (!AndroidUtilities.isGoogleMapsInstalled(ChatActivity.this)) {
                                                return;
                                            }
                                            LocationActivity fragment;
                                            if (message.isLiveLocation()) {
                                                fragment = new LocationActivity(2);
                                                fragment.setMessageObject(message);
                                                fragment.setDelegate(ChatActivity.this);
                                                ChatActivity.this.presentFragment(fragment);
                                            } else {
                                                if (ChatActivity.this.currentEncryptedChat == null) {
                                                    i = 3;
                                                }
                                                fragment = new LocationActivity(i);
                                                fragment.setMessageObject(message);
                                                fragment.setDelegate(ChatActivity.this);
                                                ChatActivity.this.presentFragment(fragment);
                                            }
                                        } else if (message.type == 9 || message.type == 0) {
                                            if (message.getDocumentName().toLowerCase().endsWith("attheme")) {
                                                File f2;
                                                f = null;
                                                if (!(message.messageOwner.attachPath == null || message.messageOwner.attachPath.length() == 0)) {
                                                    f2 = new File(message.messageOwner.attachPath);
                                                    if (f2.exists()) {
                                                        f = f2;
                                                    }
                                                }
                                                if (f == null) {
                                                    f2 = FileLoader.getPathToMessage(message.messageOwner);
                                                    if (f2.exists()) {
                                                        f = f2;
                                                    }
                                                }
                                                if (ChatActivity.this.chatLayoutManager != null) {
                                                    i = ChatActivity.this.chatLayoutManager.findFirstVisibleItemPosition();
                                                    if (i != 0) {
                                                        ChatActivity.this.scrollToPositionOnRecreate = i;
                                                        Holder holder = (Holder) ChatActivity.this.chatListView.findViewHolderForAdapterPosition(ChatActivity.this.scrollToPositionOnRecreate);
                                                        if (holder != null) {
                                                            ChatActivity.this.scrollToOffsetOnRecreate = (ChatActivity.this.chatListView.getMeasuredHeight() - holder.itemView.getBottom()) - ChatActivity.this.chatListView.getPaddingBottom();
                                                        } else {
                                                            ChatActivity.this.scrollToPositionOnRecreate = -1;
                                                        }
                                                    } else {
                                                        ChatActivity.this.scrollToPositionOnRecreate = -1;
                                                    }
                                                }
                                                ThemeInfo themeInfo = Theme.applyThemeFile(f, message.getDocumentName(), true);
                                                if (themeInfo != null) {
                                                    ChatActivity.this.presentFragment(new ThemePreviewActivity(f, themeInfo));
                                                    return;
                                                }
                                                ChatActivity.this.scrollToPositionOnRecreate = -1;
                                            }
                                            try {
                                                AndroidUtilities.openForView(message, ChatActivity.this.getParentActivity());
                                            } catch (Throwable e2) {
                                                FileLog.e(e2);
                                                ChatActivity.this.alertUserOpenError(message);
                                            }
                                        }
                                    }
                                }
                                if (message.isVideo()) {
                                    ChatActivity.this.sendSecretMessageRead(message);
                                }
                                PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                                if (PhotoViewer.getInstance().openPhoto(message, message.type != 0 ? ChatActivity.this.dialog_id : 0, message.type != 0 ? ChatActivity.this.mergeDialogId : 0, ChatActivity.this.photoViewerProvider)) {
                                    PhotoViewer.getInstance().setParentChatActivity(ChatActivity.this);
                                }
                            }
                        }
                    }

                    public void didPressedInstantButton(ChatMessageCell cell, int type) {
                        MessageObject messageObject = cell.getMessageObject();
                        if (type == 0) {
                            if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.webpage != null && messageObject.messageOwner.media.webpage.cached_page != null) {
                                ArticleViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this);
                                ArticleViewer.getInstance().open(messageObject);
                            }
                        } else if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.webpage != null) {
                            Browser.openUrl(ChatActivity.this.getParentActivity(), messageObject.messageOwner.media.webpage.url);
                        }
                    }

                    public boolean isChatAdminCell(int uid) {
                        if (ChatObject.isChannel(ChatActivity.this.currentChat) && ChatActivity.this.currentChat.megagroup) {
                            return MessagesController.getInstance(ChatActivity.this.currentAccount).isChannelAdmin(ChatActivity.this.currentChat.id, uid);
                        }
                        return false;
                    }
                });
                if (ChatActivity.this.currentEncryptedChat == null) {
                    chatMessageCell.setAllowAssistant(true);
                }
            } else if (viewType == 1) {
                view = new ChatActionCell(this.mContext);
                ((ChatActionCell) view).setDelegate(new ChatActionCellDelegate() {
                    public void didClickedImage(ChatActionCell cell) {
                        MessageObject message = cell.getMessageObject();
                        PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                        PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(message.photoThumbs, 640);
                        if (photoSize != null) {
                            PhotoViewer.getInstance().openPhoto(photoSize.location, ChatActivity.this.photoViewerProvider);
                            return;
                        }
                        PhotoViewer.getInstance().openPhoto(message, 0, 0, ChatActivity.this.photoViewerProvider);
                    }

                    public void didLongPressed(ChatActionCell cell) {
                        ChatActivity.this.createMenu(cell, false, false);
                    }

                    public void needOpenUserProfile(int uid) {
                        boolean z = true;
                        Bundle args;
                        if (uid < 0) {
                            args = new Bundle();
                            args.putInt("chat_id", -uid);
                            if (MessagesController.getInstance(ChatActivity.this.currentAccount).checkCanOpenChat(args, ChatActivity.this)) {
                                ChatActivity.this.presentFragment(new ChatActivity(args), true);
                            }
                        } else if (uid != UserConfig.getInstance(ChatActivity.this.currentAccount).getClientUserId()) {
                            args = new Bundle();
                            args.putInt("user_id", uid);
                            if (ChatActivity.this.currentEncryptedChat != null && uid == ChatActivity.this.currentUser.id) {
                                args.putLong("dialog_id", ChatActivity.this.dialog_id);
                            }
                            ProfileActivity fragment = new ProfileActivity(args);
                            if (ChatActivity.this.currentUser == null || ChatActivity.this.currentUser.id != uid) {
                                z = false;
                            }
                            fragment.setPlayProfileAnimation(z);
                            ChatActivity.this.presentFragment(fragment);
                        }
                    }

                    public void didPressedReplyMessage(ChatActionCell cell, int id) {
                        MessageObject messageObject = cell.getMessageObject();
                        ChatActivity.this.scrollToMessageId(id, messageObject.getId(), true, messageObject.getDialogId() == ChatActivity.this.mergeDialogId ? 1 : 0, false);
                    }

                    public void didPressedBotButton(MessageObject messageObject, KeyboardButton button) {
                        if (ChatActivity.this.getParentActivity() != null) {
                            if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || (button instanceof TL_keyboardButtonSwitchInline) || (button instanceof TL_keyboardButtonCallback) || (button instanceof TL_keyboardButtonGame) || (button instanceof TL_keyboardButtonUrl) || (button instanceof TL_keyboardButtonBuy)) {
                                ChatActivity.this.chatActivityEnterView.didPressedBotButton(button, messageObject, messageObject);
                            }
                        }
                    }
                });
            } else if (viewType == 2) {
                view = new ChatUnreadCell(this.mContext);
            } else if (viewType == 3) {
                view = new BotHelpCell(this.mContext);
                ((BotHelpCell) view).setDelegate(new BotHelpCellDelegate() {
                    public void didPressUrl(String url) {
                        if (url.startsWith("@")) {
                            MessagesController.getInstance(ChatActivity.this.currentAccount).openByUserName(url.substring(1), ChatActivity.this, 0);
                            return;
                        }
                        if (!url.startsWith("#")) {
                            if (!url.startsWith("$")) {
                                if (url.startsWith("/")) {
                                    ChatActivity.this.chatActivityEnterView.setCommand(null, url, false, false);
                                    if (ChatActivity.this.chatActivityEnterView.getFieldText() == null) {
                                        ChatActivity.this.showReplyPanel(false, null, null, null, false);
                                        return;
                                    }
                                    return;
                                }
                                return;
                            }
                        }
                        DialogsActivity fragment = new DialogsActivity(null);
                        fragment.setSearchString(url);
                        ChatActivity.this.presentFragment(fragment);
                    }
                });
            } else if (viewType == 4) {
                view = new ChatLoadingCell(this.mContext);
            }
            view.setLayoutParams(new LayoutParams(-1, -2));
            return new Holder(view);
        }

        public void onBindViewHolder(ViewHolder holder, int position) {
            ViewHolder viewHolder = holder;
            int i = position;
            if (i == this.botInfoRow) {
                viewHolder.itemView.setText(ChatActivity.this.botInfo.size() != 0 ? ((BotInfo) ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description : null);
                return;
            }
            boolean z;
            if (i != r0.loadingDownRow) {
                if (i != r0.loadingUpRow) {
                    if (i >= r0.messagesStartRow && i < r0.messagesEndRow) {
                        int index;
                        MessageObject message = (MessageObject) ChatActivity.this.messages.get(i - r0.messagesStartRow);
                        View view = viewHolder.itemView;
                        if (view instanceof ChatMessageCell) {
                            boolean z2;
                            boolean pinnedTop;
                            GroupedMessages groupedMessages;
                            GroupedMessagePosition pos;
                            int i2;
                            int nextPosition;
                            int nextPosition2;
                            int prevType;
                            MessageObject nextMessage;
                            boolean z3;
                            int indexOf;
                            final ChatMessageCell messageCell = (ChatMessageCell) view;
                            if (ChatActivity.this.currentChat == null) {
                                if (!UserObject.isUserSelf(ChatActivity.this.currentUser)) {
                                    z2 = false;
                                    messageCell.isChat = z2;
                                    z2 = false;
                                    pinnedTop = false;
                                    groupedMessages = ChatActivity.this.getValidGroupedMessage(message);
                                    if (groupedMessages == null) {
                                        pos = (GroupedMessagePosition) groupedMessages.positions.get(message);
                                        i2 = -100;
                                        if (pos == null) {
                                            if ((pos.flags & 4) == 0) {
                                                i2 = (groupedMessages.posArray.indexOf(pos) + i) + 1;
                                            } else {
                                                pinnedTop = true;
                                            }
                                            if ((pos.flags & 8) == 0) {
                                                nextPosition = (i - groupedMessages.posArray.size()) + groupedMessages.posArray.indexOf(pos);
                                            } else {
                                                z2 = true;
                                                nextPosition = -100;
                                            }
                                        } else {
                                            nextPosition = -100;
                                            i2 = -100;
                                        }
                                        nextPosition2 = nextPosition;
                                    } else {
                                        nextPosition2 = i - 1;
                                        i2 = i + 1;
                                    }
                                    nextPosition = getItemViewType(nextPosition2);
                                    prevType = getItemViewType(i2);
                                    if (!(message.messageOwner.reply_markup instanceof TL_replyInlineMarkup) && nextPosition == holder.getItemViewType()) {
                                        nextMessage = (MessageObject) ChatActivity.this.messages.get(nextPosition2 - r0.messagesStartRow);
                                        z = nextMessage.isOutOwner() != message.isOutOwner() && Math.abs(nextMessage.messageOwner.date - message.messageOwner.date) <= 300;
                                        z2 = z;
                                        if (z2) {
                                            if (ChatActivity.this.currentChat != null) {
                                                z2 = nextMessage.messageOwner.from_id != message.messageOwner.from_id;
                                            } else if (UserObject.isUserSelf(ChatActivity.this.currentUser)) {
                                                z2 = nextMessage.getFromId() != message.getFromId();
                                            }
                                        }
                                    }
                                    if (prevType == holder.getItemViewType()) {
                                        nextMessage = (MessageObject) ChatActivity.this.messages.get(i2 - r0.messagesStartRow);
                                        z = (nextMessage.messageOwner.reply_markup instanceof TL_replyInlineMarkup) && nextMessage.isOutOwner() == message.isOutOwner() && Math.abs(nextMessage.messageOwner.date - message.messageOwner.date) <= 300;
                                        pinnedTop = z;
                                        if (pinnedTop) {
                                            if (ChatActivity.this.currentChat != null) {
                                                pinnedTop = nextMessage.messageOwner.from_id != message.messageOwner.from_id;
                                            } else if (UserObject.isUserSelf(ChatActivity.this.currentUser)) {
                                                pinnedTop = nextMessage.getFromId() != message.getFromId();
                                            }
                                        }
                                    }
                                    messageCell.setMessageObject(message, groupedMessages, z2, pinnedTop);
                                    if ((view instanceof ChatMessageCell) && DownloadController.getInstance(ChatActivity.this.currentAccount).canDownloadMedia(message)) {
                                        ((ChatMessageCell) view).downloadAudioIfNeed();
                                    }
                                    z3 = ChatActivity.this.highlightMessageId == ConnectionsManager.DEFAULT_DATACENTER_ID && message.getId() == ChatActivity.this.highlightMessageId;
                                    messageCell.setHighlighted(z3);
                                    if (ChatActivity.this.searchContainer != null && ChatActivity.this.searchContainer.getVisibility() == 0) {
                                        if (DataQuery.getInstance(ChatActivity.this.currentAccount).isMessageFound(message.getId(), message.getDialogId() != ChatActivity.this.mergeDialogId) && DataQuery.getInstance(ChatActivity.this.currentAccount).getLastSearchQuery() != null) {
                                            messageCell.setHighlightedText(DataQuery.getInstance(ChatActivity.this.currentAccount).getLastSearchQuery());
                                            indexOf = ChatActivity.this.animatingMessageObjects.indexOf(message);
                                            index = indexOf;
                                            if (indexOf != -1) {
                                                ChatActivity.this.animatingMessageObjects.remove(index);
                                                messageCell.getViewTreeObserver().addOnPreDrawListener(new OnPreDrawListener() {
                                                    public boolean onPreDraw() {
                                                        AnonymousClass4 anonymousClass4 = this;
                                                        PipRoundVideoView pipRoundVideoView = PipRoundVideoView.getInstance();
                                                        if (pipRoundVideoView != null) {
                                                            pipRoundVideoView.showTemporary(true);
                                                        }
                                                        messageCell.getViewTreeObserver().removeOnPreDrawListener(anonymousClass4);
                                                        ImageReceiver imageReceiver = messageCell.getPhotoImage();
                                                        float scale = ((float) imageReceiver.getImageWidth()) / ChatActivity.this.instantCameraView.getCameraRect().width;
                                                        int[] position = new int[2];
                                                        messageCell.setAlpha(0.0f);
                                                        messageCell.getLocationOnScreen(position);
                                                        position[0] = position[0] + imageReceiver.getImageX();
                                                        position[1] = position[1] + imageReceiver.getImageY();
                                                        final View cameraContainer = ChatActivity.this.instantCameraView.getCameraContainer();
                                                        cameraContainer.setPivotX(0.0f);
                                                        cameraContainer.setPivotY(0.0f);
                                                        AnimatorSet animatorSet = new AnimatorSet();
                                                        r13 = new Animator[8];
                                                        r13[0] = ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView, "alpha", new float[]{0.0f});
                                                        r13[1] = ObjectAnimator.ofFloat(cameraContainer, "scaleX", new float[]{scale});
                                                        r13[2] = ObjectAnimator.ofFloat(cameraContainer, "scaleY", new float[]{scale});
                                                        r13[3] = ObjectAnimator.ofFloat(cameraContainer, "translationX", new float[]{((float) position[0]) - rect.x});
                                                        r13[4] = ObjectAnimator.ofFloat(cameraContainer, "translationY", new float[]{((float) position[1]) - rect.y});
                                                        r13[5] = ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getSwitchButtonView(), "alpha", new float[]{0.0f});
                                                        r13[6] = ObjectAnimator.ofInt(ChatActivity.this.instantCameraView.getPaint(), "alpha", new int[]{0});
                                                        r13[7] = ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getMuteImageView(), "alpha", new float[]{0.0f});
                                                        animatorSet.playTogether(r13);
                                                        animatorSet.setDuration(180);
                                                        animatorSet.setInterpolator(new DecelerateInterpolator());
                                                        animatorSet.addListener(new AnimatorListenerAdapter() {
                                                            public void onAnimationEnd(Animator animation) {
                                                                AnimatorSet animatorSet = new AnimatorSet();
                                                                r1 = new Animator[2];
                                                                r1[0] = ObjectAnimator.ofFloat(cameraContainer, "alpha", new float[]{0.0f});
                                                                r1[1] = ObjectAnimator.ofFloat(messageCell, "alpha", new float[]{1.0f});
                                                                animatorSet.playTogether(r1);
                                                                animatorSet.setDuration(100);
                                                                animatorSet.setInterpolator(new DecelerateInterpolator());
                                                                animatorSet.addListener(new AnimatorListenerAdapter() {
                                                                    public void onAnimationEnd(Animator animation) {
                                                                        ChatActivity.this.instantCameraView.hideCamera(true);
                                                                        ChatActivity.this.instantCameraView.setVisibility(4);
                                                                    }
                                                                });
                                                                animatorSet.start();
                                                            }
                                                        });
                                                        animatorSet.start();
                                                        return true;
                                                    }
                                                });
                                            }
                                        }
                                    }
                                    messageCell.setHighlightedText(null);
                                    indexOf = ChatActivity.this.animatingMessageObjects.indexOf(message);
                                    index = indexOf;
                                    if (indexOf != -1) {
                                        ChatActivity.this.animatingMessageObjects.remove(index);
                                        messageCell.getViewTreeObserver().addOnPreDrawListener(/* anonymous class already generated */);
                                    }
                                }
                            }
                            z2 = true;
                            messageCell.isChat = z2;
                            z2 = false;
                            pinnedTop = false;
                            groupedMessages = ChatActivity.this.getValidGroupedMessage(message);
                            if (groupedMessages == null) {
                                nextPosition2 = i - 1;
                                i2 = i + 1;
                            } else {
                                pos = (GroupedMessagePosition) groupedMessages.positions.get(message);
                                i2 = -100;
                                if (pos == null) {
                                    nextPosition = -100;
                                    i2 = -100;
                                } else {
                                    if ((pos.flags & 4) == 0) {
                                        pinnedTop = true;
                                    } else {
                                        i2 = (groupedMessages.posArray.indexOf(pos) + i) + 1;
                                    }
                                    if ((pos.flags & 8) == 0) {
                                        z2 = true;
                                        nextPosition = -100;
                                    } else {
                                        nextPosition = (i - groupedMessages.posArray.size()) + groupedMessages.posArray.indexOf(pos);
                                    }
                                }
                                nextPosition2 = nextPosition;
                            }
                            nextPosition = getItemViewType(nextPosition2);
                            prevType = getItemViewType(i2);
                            nextMessage = (MessageObject) ChatActivity.this.messages.get(nextPosition2 - r0.messagesStartRow);
                            if (nextMessage.isOutOwner() != message.isOutOwner()) {
                            }
                            z2 = z;
                            if (z2) {
                                if (ChatActivity.this.currentChat != null) {
                                    if (nextMessage.messageOwner.from_id != message.messageOwner.from_id) {
                                    }
                                    z2 = nextMessage.messageOwner.from_id != message.messageOwner.from_id;
                                } else if (UserObject.isUserSelf(ChatActivity.this.currentUser)) {
                                    if (nextMessage.getFromId() != message.getFromId()) {
                                    }
                                    z2 = nextMessage.getFromId() != message.getFromId();
                                }
                            }
                            if (prevType == holder.getItemViewType()) {
                                nextMessage = (MessageObject) ChatActivity.this.messages.get(i2 - r0.messagesStartRow);
                                if (nextMessage.messageOwner.reply_markup instanceof TL_replyInlineMarkup) {
                                }
                                pinnedTop = z;
                                if (pinnedTop) {
                                    if (ChatActivity.this.currentChat != null) {
                                        if (nextMessage.messageOwner.from_id != message.messageOwner.from_id) {
                                        }
                                        pinnedTop = nextMessage.messageOwner.from_id != message.messageOwner.from_id;
                                    } else if (UserObject.isUserSelf(ChatActivity.this.currentUser)) {
                                        if (nextMessage.getFromId() != message.getFromId()) {
                                        }
                                        pinnedTop = nextMessage.getFromId() != message.getFromId();
                                    }
                                }
                            }
                            messageCell.setMessageObject(message, groupedMessages, z2, pinnedTop);
                            ((ChatMessageCell) view).downloadAudioIfNeed();
                            if (ChatActivity.this.highlightMessageId == ConnectionsManager.DEFAULT_DATACENTER_ID) {
                            }
                            messageCell.setHighlighted(z3);
                            if (message.getDialogId() != ChatActivity.this.mergeDialogId) {
                            }
                            messageCell.setHighlightedText(DataQuery.getInstance(ChatActivity.this.currentAccount).getLastSearchQuery());
                            indexOf = ChatActivity.this.animatingMessageObjects.indexOf(message);
                            index = indexOf;
                            if (indexOf != -1) {
                                ChatActivity.this.animatingMessageObjects.remove(index);
                                messageCell.getViewTreeObserver().addOnPreDrawListener(/* anonymous class already generated */);
                            }
                        } else if (view instanceof ChatActionCell) {
                            ChatActionCell actionCell = (ChatActionCell) view;
                            actionCell.setMessageObject(message);
                            actionCell.setAlpha(1.0f);
                        } else if (view instanceof ChatUnreadCell) {
                            ((ChatUnreadCell) view).setText(LocaleController.getString("UnreadMessages", R.string.UnreadMessages));
                            if (ChatActivity.this.createUnreadMessageAfterId != 0) {
                                ChatActivity.this.createUnreadMessageAfterId = 0;
                            }
                        }
                        if (message != null && message.messageOwner != null && message.messageOwner.media_unread && message.messageOwner.mentioned) {
                            if (!(message.isVoice() || message.isRoundVideo())) {
                                int i3;
                                ChatActivity.this.newMentionsCount = ChatActivity.this.newMentionsCount - 1;
                                if (ChatActivity.this.newMentionsCount <= 0) {
                                    i3 = false;
                                    ChatActivity.this.newMentionsCount = 0;
                                    ChatActivity.this.hasAllMentionsLocal = true;
                                    ChatActivity.this.showMentiondownButton(false, true);
                                } else {
                                    i3 = false;
                                    ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(ChatActivity.this.newMentionsCount)}));
                                }
                                MessagesController instance = MessagesController.getInstance(ChatActivity.this.currentAccount);
                                index = message.getId();
                                if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                    i3 = ChatActivity.this.currentChat.id;
                                }
                                instance.markMentionMessageAsRead(index, i3, ChatActivity.this.dialog_id);
                                message.setContentIsRead();
                            }
                            if (view instanceof ChatMessageCell) {
                                ((ChatMessageCell) view).setHighlightedAnimated();
                                return;
                            }
                            return;
                        }
                        return;
                    }
                    return;
                }
            }
            ChatLoadingCell loadingCell = viewHolder.itemView;
            z = true;
            if (ChatActivity.this.loadsCount <= 1) {
                z = false;
            }
            loadingCell.setProgressVisible(z);
        }

        public int getItemViewType(int position) {
            if (position >= this.messagesStartRow && position < this.messagesEndRow) {
                return ((MessageObject) ChatActivity.this.messages.get(position - this.messagesStartRow)).contentType;
            }
            if (position == this.botInfoRow) {
                return 3;
            }
            return 4;
        }

        public void onViewAttachedToWindow(ViewHolder holder) {
            if (holder.itemView instanceof ChatMessageCell) {
                final ChatMessageCell messageCell = holder.itemView;
                MessageObject message = messageCell.getMessageObject();
                boolean selected = false;
                boolean disableSelection = false;
                boolean z = true;
                if (ChatActivity.this.actionBar.isActionModeShowed()) {
                    MessageObject messageObject = ChatActivity.this.chatActivityEnterView != null ? ChatActivity.this.chatActivityEnterView.getEditingMessageObject() : null;
                    int idx = message.getDialogId() == ChatActivity.this.dialog_id ? 0 : 1;
                    if (messageObject != message) {
                        if (ChatActivity.this.selectedMessagesIds[idx].indexOfKey(message.getId()) < 0) {
                            messageCell.setBackgroundDrawable(null);
                            disableSelection = true;
                        }
                    }
                    ChatActivity.this.setCellSelectionBackground(message, messageCell, idx);
                    selected = true;
                    disableSelection = true;
                } else {
                    messageCell.setBackgroundDrawable(null);
                }
                boolean z2 = !disableSelection;
                boolean z3 = disableSelection && selected;
                messageCell.setCheckPressed(z2, z3);
                messageCell.getViewTreeObserver().addOnPreDrawListener(new OnPreDrawListener() {
                    public boolean onPreDraw() {
                        messageCell.getViewTreeObserver().removeOnPreDrawListener(this);
                        int height = ChatActivity.this.chatListView.getMeasuredHeight();
                        int top = messageCell.getTop();
                        int bottom = messageCell.getBottom();
                        int viewTop = top >= 0 ? 0 : -top;
                        int viewBottom = messageCell.getMeasuredHeight();
                        if (viewBottom > height) {
                            viewBottom = viewTop + height;
                        }
                        messageCell.setVisiblePart(viewTop, viewBottom - viewTop);
                        return true;
                    }
                });
                if (ChatActivity.this.highlightMessageId == ConnectionsManager.DEFAULT_DATACENTER_ID || messageCell.getMessageObject().getId() != ChatActivity.this.highlightMessageId) {
                    z = false;
                }
                messageCell.setHighlighted(z);
            }
        }

        public void updateRowAtPosition(int index) {
            if (ChatActivity.this.chatLayoutManager != null) {
                int lastVisibleItem = -1;
                if (!(ChatActivity.this.wasManualScroll || ChatActivity.this.unreadMessageObject == null)) {
                    int pos = ChatActivity.this.messages.indexOf(ChatActivity.this.unreadMessageObject);
                    if (pos >= 0) {
                        lastVisibleItem = this.messagesStartRow + pos;
                    }
                }
                notifyItemChanged(index);
                if (lastVisibleItem != -1) {
                    ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(lastVisibleItem, ((ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListView.getPaddingBottom()) - ChatActivity.this.chatListView.getPaddingTop()) - AndroidUtilities.dp(29.0f));
                }
            }
        }

        public void updateRowWithMessageObject(MessageObject messageObject) {
            int index = ChatActivity.this.messages.indexOf(messageObject);
            if (index != -1) {
                updateRowAtPosition(this.messagesStartRow + index);
            }
        }

        public void notifyDataSetChanged() {
            updateRows();
            try {
                super.notifyDataSetChanged();
            } catch (Throwable e) {
                FileLog.e(e);
            }
        }

        public void notifyItemChanged(int position) {
            try {
                super.notifyItemChanged(position);
            } catch (Throwable e) {
                FileLog.e(e);
            }
        }

        public void notifyItemRangeChanged(int positionStart, int itemCount) {
            try {
                super.notifyItemRangeChanged(positionStart, itemCount);
            } catch (Throwable e) {
                FileLog.e(e);
            }
        }

        public void notifyItemInserted(int position) {
            updateRows();
            try {
                super.notifyItemInserted(position);
            } catch (Throwable e) {
                FileLog.e(e);
            }
        }

        public void notifyItemMoved(int fromPosition, int toPosition) {
            updateRows();
            try {
                super.notifyItemMoved(fromPosition, toPosition);
            } catch (Throwable e) {
                FileLog.e(e);
            }
        }

        public void notifyItemRangeInserted(int positionStart, int itemCount) {
            updateRows();
            try {
                super.notifyItemRangeInserted(positionStart, itemCount);
            } catch (Throwable e) {
                FileLog.e(e);
            }
        }

        public void notifyItemRemoved(int position) {
            updateRows();
            try {
                super.notifyItemRemoved(position);
            } catch (Throwable e) {
                FileLog.e(e);
            }
        }

        public void notifyItemRangeRemoved(int positionStart, int itemCount) {
            updateRows();
            try {
                super.notifyItemRangeRemoved(positionStart, itemCount);
            } catch (Throwable e) {
                FileLog.e(e);
            }
        }
    }

    private void applyDraftMaybe(boolean r1) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: org.telegram.ui.ChatActivity.applyDraftMaybe(boolean):void
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:59)
	at jadx.core.ProcessClass.process(ProcessClass.java:42)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r0 = this;
        r0 = r14.chatActivityEnterView;
        if (r0 != 0) goto L_0x0005;
    L_0x0004:
        return;
    L_0x0005:
        r0 = r14.currentAccount;
        r0 = org.telegram.messenger.DataQuery.getInstance(r0);
        r1 = r14.dialog_id;
        r0 = r0.getDraft(r1);
        r1 = 0;
        if (r0 == 0) goto L_0x0025;
    L_0x0014:
        r2 = r0.reply_to_msg_id;
        if (r2 == 0) goto L_0x0025;
    L_0x0018:
        r2 = r14.currentAccount;
        r2 = org.telegram.messenger.DataQuery.getInstance(r2);
        r3 = r14.dialog_id;
        r2 = r2.getDraftMessage(r3);
        goto L_0x0026;
    L_0x0025:
        r2 = r1;
    L_0x0026:
        r3 = r14.chatActivityEnterView;
        r3 = r3.getFieldText();
        r4 = 0;
        if (r3 != 0) goto L_0x0163;
    L_0x002f:
        if (r0 == 0) goto L_0x0177;
    L_0x0031:
        r3 = r14.chatActivityEnterView;
        r5 = r0.no_webpage;
        r6 = 1;
        r5 = r5 ^ r6;
        r3.setWebPage(r1, r5);
        r1 = r0.entities;
        r1 = r1.isEmpty();
        if (r1 != 0) goto L_0x0137;
    L_0x0042:
        r1 = r0.message;
        r1 = android.text.SpannableStringBuilder.valueOf(r1);
        r3 = r14.currentAccount;
        org.telegram.messenger.DataQuery.getInstance(r3);
        r3 = r0.entities;
        org.telegram.messenger.DataQuery.sortEntities(r3);
        r3 = 0;
        r5 = r3;
        r3 = r4;
        r7 = r0.entities;
        r7 = r7.size();
        if (r3 >= r7) goto L_0x0135;
    L_0x005d:
        r7 = r0.entities;
        r7 = r7.get(r3);
        r7 = (org.telegram.tgnet.TLRPC.MessageEntity) r7;
        r8 = r7 instanceof org.telegram.tgnet.TLRPC.TL_inputMessageEntityMentionName;
        r9 = 33;
        if (r8 != 0) goto L_0x00de;
        r8 = r7 instanceof org.telegram.tgnet.TLRPC.TL_messageEntityMentionName;
        if (r8 == 0) goto L_0x0070;
        goto L_0x00de;
        r8 = r7 instanceof org.telegram.tgnet.TLRPC.TL_messageEntityCode;
        if (r8 == 0) goto L_0x008b;
        r8 = r7.offset;
        r9 = r7.length;
        r8 = r8 + r9;
        r8 = r8 + r5;
        r9 = "`";
        r1.insert(r8, r9);
        r8 = r7.offset;
        r8 = r8 + r5;
        r9 = "`";
        r1.insert(r8, r9);
        r5 = r5 + 2;
        goto L_0x0131;
        r8 = r7 instanceof org.telegram.tgnet.TLRPC.TL_messageEntityPre;
        if (r8 == 0) goto L_0x00a6;
        r8 = r7.offset;
        r9 = r7.length;
        r8 = r8 + r9;
        r8 = r8 + r5;
        r9 = "```";
        r1.insert(r8, r9);
        r8 = r7.offset;
        r8 = r8 + r5;
        r9 = "```";
        r1.insert(r8, r9);
        r5 = r5 + 6;
        goto L_0x0131;
        r8 = r7 instanceof org.telegram.tgnet.TLRPC.TL_messageEntityBold;
        if (r8 == 0) goto L_0x00c2;
        r8 = new org.telegram.ui.Components.TypefaceSpan;
        r10 = "fonts/rmedium.ttf";
        r10 = org.telegram.messenger.AndroidUtilities.getTypeface(r10);
        r8.<init>(r10);
        r10 = r7.offset;
        r10 = r10 + r5;
        r11 = r7.offset;
        r12 = r7.length;
        r11 = r11 + r12;
        r11 = r11 + r5;
        r1.setSpan(r8, r10, r11, r9);
        goto L_0x0131;
        r8 = r7 instanceof org.telegram.tgnet.TLRPC.TL_messageEntityItalic;
        if (r8 == 0) goto L_0x0131;
        r8 = new org.telegram.ui.Components.TypefaceSpan;
        r10 = "fonts/ritalic.ttf";
        r10 = org.telegram.messenger.AndroidUtilities.getTypeface(r10);
        r8.<init>(r10);
        r10 = r7.offset;
        r10 = r10 + r5;
        r11 = r7.offset;
        r12 = r7.length;
        r11 = r11 + r12;
        r11 = r11 + r5;
        r1.setSpan(r8, r10, r11, r9);
        goto L_0x0131;
        r8 = r7 instanceof org.telegram.tgnet.TLRPC.TL_inputMessageEntityMentionName;
        if (r8 == 0) goto L_0x00ea;
        r8 = r7;
        r8 = (org.telegram.tgnet.TLRPC.TL_inputMessageEntityMentionName) r8;
        r8 = r8.user_id;
        r8 = r8.user_id;
        goto L_0x00ef;
        r8 = r7;
        r8 = (org.telegram.tgnet.TLRPC.TL_messageEntityMentionName) r8;
        r8 = r8.user_id;
        r10 = r7.offset;
        r10 = r10 + r5;
        r11 = r7.length;
        r10 = r10 + r11;
        r11 = r1.length();
        if (r10 >= r11) goto L_0x010e;
        r10 = r7.offset;
        r10 = r10 + r5;
        r11 = r7.length;
        r10 = r10 + r11;
        r10 = r1.charAt(r10);
        r11 = 32;
        if (r10 != r11) goto L_0x010e;
        r10 = r7.length;
        r10 = r10 + r6;
        r7.length = r10;
        r10 = new org.telegram.ui.Components.URLSpanUserMention;
        r11 = new java.lang.StringBuilder;
        r11.<init>();
        r12 = "";
        r11.append(r12);
        r11.append(r8);
        r11 = r11.toString();
        r10.<init>(r11, r6);
        r11 = r7.offset;
        r11 = r11 + r5;
        r12 = r7.offset;
        r12 = r12 + r5;
        r13 = r7.length;
        r12 = r12 + r13;
        r1.setSpan(r10, r11, r12, r9);
        r3 = r3 + 1;
        goto L_0x0055;
        goto L_0x0139;
    L_0x0137:
        r1 = r0.message;
        r3 = r14.chatActivityEnterView;
        r3.setFieldText(r1);
        r3 = r14.getArguments();
        r5 = "hasUrl";
        r3 = r3.getBoolean(r5, r4);
        if (r3 == 0) goto L_0x0162;
        r3 = r14.chatActivityEnterView;
        r5 = r0.message;
        r7 = 10;
        r5 = r5.indexOf(r7);
        r5 = r5 + r6;
        r3.setSelection(r5);
        r3 = new org.telegram.ui.ChatActivity$95;
        r3.<init>();
        r5 = 700; // 0x2bc float:9.81E-43 double:3.46E-321;
        org.telegram.messenger.AndroidUtilities.runOnUIThread(r3, r5);
        goto L_0x0177;
    L_0x0163:
        if (r15 == 0) goto L_0x0177;
        if (r0 != 0) goto L_0x0177;
        r1 = r14.chatActivityEnterView;
        r3 = "";
        r1.setFieldText(r3);
        r6 = 0;
        r7 = 0;
        r8 = 0;
        r9 = 0;
        r10 = 0;
        r5 = r14;
        r5.showReplyPanel(r6, r7, r8, r9, r10);
    L_0x0177:
        r1 = r14.replyingMessageObject;
        if (r1 != 0) goto L_0x019a;
        if (r2 == 0) goto L_0x019a;
        r1 = new org.telegram.messenger.MessageObject;
        r3 = r14.currentAccount;
        r5 = r14.currentAccount;
        r5 = org.telegram.messenger.MessagesController.getInstance(r5);
        r5 = r5.getUsers();
        r1.<init>(r3, r2, r5, r4);
        r14.replyingMessageObject = r1;
        r7 = 1;
        r8 = r14.replyingMessageObject;
        r9 = 0;
        r10 = 0;
        r11 = 0;
        r6 = r14;
        r6.showReplyPanel(r7, r8, r9, r10, r11);
        return;
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.applyDraftMaybe(boolean):void");
    }

    private void createDeleteMessagesAlert(org.telegram.messenger.MessageObject r1, org.telegram.messenger.MessageObject.GroupedMessages r2, int r3) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: org.telegram.ui.ChatActivity.createDeleteMessagesAlert(org.telegram.messenger.MessageObject, org.telegram.messenger.MessageObject$GroupedMessages, int):void
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:59)
	at jadx.core.ProcessClass.process(ProcessClass.java:42)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r0 = this;
        r7 = r40;
        r8 = r41;
        r9 = r42;
        r10 = r43;
        r0 = r40.getParentActivity();
        if (r0 != 0) goto L_0x000f;
    L_0x000e:
        return;
    L_0x000f:
        r0 = new org.telegram.ui.ActionBar.AlertDialog$Builder;
        r1 = r40.getParentActivity();
        r0.<init>(r1);
        r11 = r0;
        r0 = 1;
        r1 = 0;
        if (r9 == 0) goto L_0x0024;
    L_0x001d:
        r2 = r9.messages;
        r2 = r2.size();
    L_0x0023:
        goto L_0x0039;
    L_0x0024:
        if (r8 == 0) goto L_0x0028;
    L_0x0026:
        r2 = 1;
        goto L_0x0023;
    L_0x0028:
        r2 = r7.selectedMessagesIds;
        r2 = r2[r1];
        r2 = r2.size();
        r3 = r7.selectedMessagesIds;
        r3 = r3[r0];
        r3 = r3.size();
        r2 = r2 + r3;
    L_0x0039:
        r12 = r2;
        r2 = "AreYouSureDeleteMessages";
        r3 = 2131493005; // 0x7f0c008d float:1.8609478E38 double:1.053097468E-314;
        r4 = new java.lang.Object[r0];
        r5 = "messages";
        r5 = org.telegram.messenger.LocaleController.formatPluralString(r5, r12);
        r4[r1] = r5;
        r2 = org.telegram.messenger.LocaleController.formatString(r2, r3, r4);
        r11.setMessage(r2);
        r2 = "Message";
        r3 = 2131493817; // 0x7f0c03b9 float:1.8611125E38 double:1.0530978693E-314;
        r2 = org.telegram.messenger.LocaleController.getString(r2, r3);
        r11.setTitle(r2);
        r2 = 3;
        r13 = new boolean[r2];
        r14 = new boolean[r0];
        r3 = 0;
        r4 = r7.currentUser;
        if (r4 == 0) goto L_0x0072;
    L_0x0066:
        r4 = r7.currentAccount;
        r4 = org.telegram.messenger.MessagesController.getInstance(r4);
        r4 = r4.canRevokePmInbox;
        if (r4 == 0) goto L_0x0072;
    L_0x0070:
        r4 = r0;
        goto L_0x0073;
    L_0x0072:
        r4 = r1;
    L_0x0073:
        r15 = r4;
        r4 = r7.currentUser;
        if (r4 == 0) goto L_0x0081;
    L_0x0078:
        r4 = r7.currentAccount;
        r4 = org.telegram.messenger.MessagesController.getInstance(r4);
        r4 = r4.revokeTimePmLimit;
        goto L_0x0089;
    L_0x0081:
        r4 = r7.currentAccount;
        r4 = org.telegram.messenger.MessagesController.getInstance(r4);
        r4 = r4.revokeTimeLimit;
    L_0x0089:
        r6 = r4;
        r4 = r7.currentChat;
        if (r4 == 0) goto L_0x03ba;
    L_0x008e:
        r4 = r7.currentChat;
        r4 = r4.megagroup;
        if (r4 == 0) goto L_0x03ba;
    L_0x0094:
        r4 = 0;
        r5 = r7.currentChat;
        r5 = org.telegram.messenger.ChatObject.canBlockUsers(r5);
        r2 = r7.currentAccount;
        r2 = org.telegram.tgnet.ConnectionsManager.getInstance(r2);
        r2 = r2.getCurrentTime();
        if (r8 == 0) goto L_0x010e;
    L_0x00a7:
        r1 = r8.messageOwner;
        r1 = r1.action;
        if (r1 == 0) goto L_0x00bd;
    L_0x00ad:
        r1 = r8.messageOwner;
        r1 = r1.action;
        r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_messageActionEmpty;
        if (r1 != 0) goto L_0x00bd;
    L_0x00b5:
        r1 = r8.messageOwner;
        r1 = r1.action;
        r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatDeleteUser;
        if (r1 == 0) goto L_0x00cf;
    L_0x00bd:
        r1 = r7.currentAccount;
        r1 = org.telegram.messenger.MessagesController.getInstance(r1);
        r0 = r8.messageOwner;
        r0 = r0.from_id;
        r0 = java.lang.Integer.valueOf(r0);
        r3 = r1.getUser(r0);
    L_0x00cf:
        r0 = r41.isSendError();
        if (r0 != 0) goto L_0x0101;
    L_0x00d5:
        r0 = r41.getDialogId();
        r24 = r3;
        r23 = r4;
        r3 = r7.mergeDialogId;
        r25 = (r0 > r3 ? 1 : (r0 == r3 ? 0 : -1));
        if (r25 != 0) goto L_0x0105;
    L_0x00e3:
        r0 = r8.messageOwner;
        r0 = r0.action;
        if (r0 == 0) goto L_0x00f1;
    L_0x00e9:
        r0 = r8.messageOwner;
        r0 = r0.action;
        r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_messageActionEmpty;
        if (r0 == 0) goto L_0x0105;
    L_0x00f1:
        r0 = r41.isOut();
        if (r0 == 0) goto L_0x0105;
    L_0x00f7:
        r0 = r8.messageOwner;
        r0 = r0.date;
        r0 = r2 - r0;
        if (r0 > r6) goto L_0x0105;
    L_0x00ff:
        r0 = 1;
        goto L_0x0106;
    L_0x0101:
        r24 = r3;
        r23 = r4;
    L_0x0105:
        r0 = 0;
    L_0x0106:
        r29 = r2;
        r27 = r12;
        r3 = r24;
        goto L_0x01e1;
    L_0x010e:
        r23 = r4;
        r0 = -1;
        r1 = r0;
        r0 = 1;
    L_0x0113:
        if (r0 < 0) goto L_0x015a;
    L_0x0115:
        r24 = 0;
        r4 = r1;
        r1 = 0;
    L_0x0119:
        r26 = r3;
        r3 = r7.selectedMessagesIds;
        r3 = r3[r0];
        r3 = r3.size();
        if (r1 >= r3) goto L_0x014c;
    L_0x0125:
        r3 = r7.selectedMessagesIds;
        r3 = r3[r0];
        r3 = r3.valueAt(r1);
        r3 = (org.telegram.messenger.MessageObject) r3;
        r27 = r12;
        r12 = -1;
        if (r4 != r12) goto L_0x0138;
    L_0x0134:
        r12 = r3.messageOwner;
        r4 = r12.from_id;
    L_0x0138:
        if (r4 < 0) goto L_0x0148;
    L_0x013a:
        r12 = r3.messageOwner;
        r12 = r12.from_id;
        if (r4 == r12) goto L_0x0141;
    L_0x0140:
        goto L_0x0148;
    L_0x0141:
        r1 = r1 + 1;
        r3 = r26;
        r12 = r27;
        goto L_0x0119;
    L_0x0148:
        r4 = -2;
        r1 = r4;
        goto L_0x014f;
    L_0x014c:
        r27 = r12;
        r1 = r4;
    L_0x014f:
        r3 = -2;
        if (r1 != r3) goto L_0x0153;
    L_0x0152:
        goto L_0x015e;
    L_0x0153:
        r0 = r0 + -1;
        r3 = r26;
        r12 = r27;
        goto L_0x0113;
    L_0x015a:
        r26 = r3;
        r27 = r12;
    L_0x015e:
        r0 = 0;
        r3 = r0;
        r0 = 1;
    L_0x0161:
        if (r0 < 0) goto L_0x01c7;
    L_0x0163:
        r4 = 0;
    L_0x0164:
        r12 = r7.selectedMessagesIds;
        r12 = r12[r0];
        r12 = r12.size();
        if (r4 >= r12) goto L_0x01b6;
    L_0x016e:
        r12 = r7.selectedMessagesIds;
        r12 = r12[r0];
        r12 = r12.valueAt(r4);
        r12 = (org.telegram.messenger.MessageObject) r12;
        r28 = r3;
        r3 = 1;
        if (r0 != r3) goto L_0x01a2;
    L_0x017d:
        r3 = r12.isOut();
        if (r3 == 0) goto L_0x019a;
    L_0x0183:
        r3 = r12.messageOwner;
        r3 = r3.action;
        if (r3 != 0) goto L_0x019a;
    L_0x0189:
        r3 = r12.messageOwner;
        r3 = r3.date;
        r3 = r2 - r3;
        r29 = r2;
        r2 = 172800; // 0x2a300 float:2.42144E-40 double:8.53745E-319;
        if (r3 > r2) goto L_0x01af;
    L_0x0196:
        r2 = 1;
        r23 = r2;
        goto L_0x01af;
    L_0x019a:
        r29 = r2;
        r2 = 0;
        r3 = 1;
    L_0x019f:
        r23 = r2;
        goto L_0x01ba;
    L_0x01a2:
        r29 = r2;
        if (r0 != 0) goto L_0x01af;
    L_0x01a6:
        r2 = r12.isOut();
        if (r2 != 0) goto L_0x01af;
    L_0x01ac:
        r2 = 0;
        r3 = 1;
        goto L_0x019f;
    L_0x01af:
        r4 = r4 + 1;
        r3 = r28;
        r2 = r29;
        goto L_0x0164;
    L_0x01b6:
        r29 = r2;
        r28 = r3;
    L_0x01ba:
        if (r3 == 0) goto L_0x01c2;
    L_0x01bd:
        r28 = r3;
        r0 = r23;
        goto L_0x01cd;
    L_0x01c2:
        r0 = r0 + -1;
        r2 = r29;
        goto L_0x0161;
    L_0x01c7:
        r29 = r2;
        r28 = r3;
        r0 = r23;
    L_0x01cd:
        r2 = -1;
        if (r1 == r2) goto L_0x01df;
    L_0x01d0:
        r2 = r7.currentAccount;
        r2 = org.telegram.messenger.MessagesController.getInstance(r2);
        r3 = java.lang.Integer.valueOf(r1);
        r3 = r2.getUser(r3);
        goto L_0x01e1;
    L_0x01df:
        r3 = r26;
    L_0x01e1:
        if (r3 == 0) goto L_0x0321;
    L_0x01e3:
        r1 = r3.id;
        r2 = r7.currentAccount;
        r2 = org.telegram.messenger.UserConfig.getInstance(r2);
        r2 = r2.getClientUserId();
        if (r1 == r2) goto L_0x0321;
    L_0x01f1:
        r1 = 2;
        if (r10 == r1) goto L_0x0321;
    L_0x01f4:
        r2 = 1;
        if (r10 != r2) goto L_0x0246;
    L_0x01f7:
        r4 = r7.currentChat;
        r4 = r4.creator;
        if (r4 != 0) goto L_0x0246;
    L_0x01fd:
        r1 = new org.telegram.ui.ActionBar.AlertDialog[r2];
        r4 = new org.telegram.ui.ActionBar.AlertDialog;
        r12 = r40.getParentActivity();
        r4.<init>(r12, r2);
        r2 = 0;
        r1[r2] = r4;
        r2 = new org.telegram.tgnet.TLRPC$TL_channels_getParticipant;
        r2.<init>();
        r4 = r7.currentChat;
        r4 = org.telegram.messenger.MessagesController.getInputChannel(r4);
        r2.channel = r4;
        r4 = r7.currentAccount;
        r4 = org.telegram.messenger.MessagesController.getInstance(r4);
        r4 = r4.getInputUser(r3);
        r2.user_id = r4;
        r4 = r7.currentAccount;
        r4 = org.telegram.tgnet.ConnectionsManager.getInstance(r4);
        r12 = new org.telegram.ui.ChatActivity$97;
        r12.<init>(r1, r8, r9);
        r4 = r4.sendRequest(r2, r12);
        if (r4 == 0) goto L_0x0243;
    L_0x0235:
        r12 = r4;
        r30 = r2;
        r2 = new org.telegram.ui.ChatActivity$98;
        r2.<init>(r1, r12);
        r9 = 1000; // 0x3e8 float:1.401E-42 double:4.94E-321;
        org.telegram.messenger.AndroidUtilities.runOnUIThread(r2, r9);
        goto L_0x0245;
    L_0x0243:
        r30 = r2;
    L_0x0245:
        return;
    L_0x0246:
        r2 = new android.widget.FrameLayout;
        r4 = r40.getParentActivity();
        r2.<init>(r4);
        r4 = 0;
        r9 = r4;
        r4 = 0;
    L_0x0252:
        r10 = 3;
        if (r4 >= r10) goto L_0x0318;
    L_0x0255:
        if (r5 != 0) goto L_0x0260;
    L_0x0257:
        if (r4 != 0) goto L_0x0260;
    L_0x025a:
        r31 = r5;
        r32 = r6;
        goto L_0x030f;
    L_0x0260:
        r12 = new org.telegram.ui.Cells.CheckBoxCell;
        r10 = r40.getParentActivity();
        r1 = 1;
        r12.<init>(r10, r1);
        r1 = r12;
        r10 = 0;
        r12 = org.telegram.ui.ActionBar.Theme.getSelectorDrawable(r10);
        r1.setBackgroundDrawable(r12);
        r10 = java.lang.Integer.valueOf(r4);
        r1.setTag(r10);
        if (r4 != 0) goto L_0x0290;
    L_0x027c:
        r10 = "DeleteBanUser";
        r12 = 2131493363; // 0x7f0c01f3 float:1.8610204E38 double:1.053097645E-314;
        r10 = org.telegram.messenger.LocaleController.getString(r10, r12);
        r12 = "";
        r31 = r5;
        r5 = 0;
        r1.setText(r10, r12, r5, r5);
    L_0x028d:
        r32 = r6;
        goto L_0x02c9;
    L_0x0290:
        r31 = r5;
        r5 = 0;
        r10 = 1;
        if (r4 != r10) goto L_0x02a5;
    L_0x0296:
        r10 = "DeleteReportSpam";
        r12 = 2131493375; // 0x7f0c01ff float:1.8610228E38 double:1.053097651E-314;
        r10 = org.telegram.messenger.LocaleController.getString(r10, r12);
        r12 = "";
        r1.setText(r10, r12, r5, r5);
        goto L_0x028d;
    L_0x02a5:
        r10 = 2;
        if (r4 != r10) goto L_0x02c7;
    L_0x02a8:
        r12 = "DeleteAllFrom";
        r10 = 1;
        r5 = new java.lang.Object[r10];
        r10 = r3.first_name;
        r32 = r6;
        r6 = r3.last_name;
        r6 = org.telegram.messenger.ContactsController.formatName(r10, r6);
        r10 = 0;
        r5[r10] = r6;
        r6 = 2131493360; // 0x7f0c01f0 float:1.8610198E38 double:1.0530976435E-314;
        r5 = org.telegram.messenger.LocaleController.formatString(r12, r6, r5);
        r6 = "";
        r1.setText(r5, r6, r10, r10);
        goto L_0x02c9;
    L_0x02c7:
        r32 = r6;
    L_0x02c9:
        r5 = org.telegram.messenger.LocaleController.isRTL;
        if (r5 == 0) goto L_0x02d6;
    L_0x02cd:
        r5 = 1098907648; // 0x41800000 float:16.0 double:5.42932517E-315;
        r6 = org.telegram.messenger.AndroidUtilities.dp(r5);
        r5 = 1090519040; // 0x41000000 float:8.0 double:5.38787994E-315;
        goto L_0x02dc;
    L_0x02d6:
        r5 = 1090519040; // 0x41000000 float:8.0 double:5.38787994E-315;
        r6 = org.telegram.messenger.AndroidUtilities.dp(r5);
    L_0x02dc:
        r10 = org.telegram.messenger.LocaleController.isRTL;
        if (r10 == 0) goto L_0x02e5;
    L_0x02e0:
        r10 = org.telegram.messenger.AndroidUtilities.dp(r5);
        goto L_0x02e8;
    L_0x02e5:
        r5 = 1098907648; // 0x41800000 float:16.0 double:5.42932517E-315;
        goto L_0x02e0;
    L_0x02e8:
        r5 = 0;
        r1.setPadding(r6, r5, r10, r5);
        r33 = -1;
        r34 = 1111490560; // 0x42400000 float:48.0 double:5.491493014E-315;
        r35 = 51;
        r36 = 0;
        r5 = 48;
        r5 = r5 * r9;
        r5 = (float) r5;
        r38 = 0;
        r39 = 0;
        r37 = r5;
        r5 = org.telegram.ui.Components.LayoutHelper.createFrame(r33, r34, r35, r36, r37, r38, r39);
        r2.addView(r1, r5);
        r5 = new org.telegram.ui.ChatActivity$99;
        r5.<init>(r13);
        r1.setOnClickListener(r5);
        r9 = r9 + 1;
    L_0x030f:
        r4 = r4 + 1;
        r5 = r31;
        r6 = r32;
        r1 = 2;
        goto L_0x0252;
    L_0x0318:
        r31 = r5;
        r32 = r6;
        r11.setView(r2);
        goto L_0x03b3;
    L_0x0321:
        r31 = r5;
        r32 = r6;
        if (r0 == 0) goto L_0x03b2;
        r1 = new android.widget.FrameLayout;
        r2 = r40.getParentActivity();
        r1.<init>(r2);
        r2 = new org.telegram.ui.Cells.CheckBoxCell;
        r4 = r40.getParentActivity();
        r5 = 1;
        r2.<init>(r4, r5);
        r4 = 0;
        r5 = org.telegram.ui.ActionBar.Theme.getSelectorDrawable(r4);
        r2.setBackgroundDrawable(r5);
        r5 = r7.currentChat;
        if (r5 == 0) goto L_0x0355;
        r5 = "DeleteForAll";
        r6 = 2131493367; // 0x7f0c01f7 float:1.8610212E38 double:1.053097647E-314;
        r5 = org.telegram.messenger.LocaleController.getString(r5, r6);
        r6 = "";
        r2.setText(r5, r6, r4, r4);
        goto L_0x036e;
        r5 = "DeleteForUser";
        r6 = 1;
        r6 = new java.lang.Object[r6];
        r9 = r7.currentUser;
        r9 = org.telegram.messenger.UserObject.getFirstName(r9);
        r6[r4] = r9;
        r9 = 2131493368; // 0x7f0c01f8 float:1.8610214E38 double:1.0530976475E-314;
        r5 = org.telegram.messenger.LocaleController.formatString(r5, r9, r6);
        r6 = "";
        r2.setText(r5, r6, r4, r4);
        r4 = org.telegram.messenger.LocaleController.isRTL;
        if (r4 == 0) goto L_0x037b;
        r4 = 1098907648; // 0x41800000 float:16.0 double:5.42932517E-315;
        r5 = org.telegram.messenger.AndroidUtilities.dp(r4);
        r4 = 1090519040; // 0x41000000 float:8.0 double:5.38787994E-315;
        goto L_0x0381;
        r4 = 1090519040; // 0x41000000 float:8.0 double:5.38787994E-315;
        r5 = org.telegram.messenger.AndroidUtilities.dp(r4);
        r6 = org.telegram.messenger.LocaleController.isRTL;
        if (r6 == 0) goto L_0x038a;
        r4 = org.telegram.messenger.AndroidUtilities.dp(r4);
        goto L_0x038d;
        r4 = 1098907648; // 0x41800000 float:16.0 double:5.42932517E-315;
        goto L_0x0385;
        r6 = 0;
        r2.setPadding(r5, r6, r4, r6);
        r16 = -1;
        r17 = 1111490560; // 0x42400000 float:48.0 double:5.491493014E-315;
        r18 = 51;
        r19 = 0;
        r20 = 0;
        r21 = 0;
        r22 = 0;
        r4 = org.telegram.ui.Components.LayoutHelper.createFrame(r16, r17, r18, r19, r20, r21, r22);
        r1.addView(r2, r4);
        r4 = new org.telegram.ui.ChatActivity$100;
        r4.<init>(r14);
        r2.setOnClickListener(r4);
        r11.setView(r1);
        goto L_0x03b3;
        r3 = 0;
        r26 = r3;
        r6 = r32;
        goto L_0x052e;
    L_0x03ba:
        r26 = r3;
        r32 = r6;
        r27 = r12;
        r0 = r7.currentChat;
        r0 = org.telegram.messenger.ChatObject.isChannel(r0);
        if (r0 != 0) goto L_0x052c;
        r0 = r7.currentEncryptedChat;
        if (r0 != 0) goto L_0x052c;
        r0 = 0;
        r1 = r7.currentAccount;
        r1 = org.telegram.tgnet.ConnectionsManager.getInstance(r1);
        r1 = r1.getCurrentTime();
        r2 = r7.currentUser;
        if (r2 == 0) goto L_0x03f1;
        r2 = r7.currentUser;
        r2 = r2.id;
        r3 = r7.currentAccount;
        r3 = org.telegram.messenger.UserConfig.getInstance(r3);
        r3 = r3.getClientUserId();
        if (r2 == r3) goto L_0x03f1;
        r2 = r7.currentUser;
        r2 = r2.bot;
        if (r2 == 0) goto L_0x03f5;
        r2 = r7.currentChat;
        if (r2 == 0) goto L_0x049d;
        if (r8 == 0) goto L_0x043f;
        r2 = r41.isSendError();
        if (r2 != 0) goto L_0x0439;
        r2 = r8.messageOwner;
        r2 = r2.action;
        if (r2 == 0) goto L_0x040f;
        r2 = r8.messageOwner;
        r2 = r2.action;
        r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_messageActionEmpty;
        if (r2 == 0) goto L_0x040c;
        goto L_0x040f;
        r6 = r32;
        goto L_0x043b;
        r2 = r41.isOut();
        if (r2 != 0) goto L_0x042d;
        if (r15 != 0) goto L_0x042d;
        r2 = r7.currentChat;
        if (r2 == 0) goto L_0x040c;
        r2 = r7.currentChat;
        r2 = r2.creator;
        if (r2 != 0) goto L_0x042d;
        r2 = r7.currentChat;
        r2 = r2.admin;
        if (r2 == 0) goto L_0x040c;
        r2 = r7.currentChat;
        r2 = r2.admins_enabled;
        if (r2 == 0) goto L_0x040c;
        r2 = r8.messageOwner;
        r2 = r2.date;
        r2 = r1 - r2;
        r6 = r32;
        if (r2 > r6) goto L_0x043b;
        r2 = 1;
        goto L_0x043c;
        r6 = r32;
        r2 = 0;
        r0 = r2;
        goto L_0x049f;
        r6 = r32;
        r2 = 0;
        r3 = r0;
        r0 = 1;
        if (r0 < 0) goto L_0x049b;
        r4 = 0;
        r5 = r3;
        r3 = 0;
        r9 = r7.selectedMessagesIds;
        r9 = r9[r0];
        r9 = r9.size();
        if (r3 >= r9) goto L_0x0494;
        r9 = r7.selectedMessagesIds;
        r9 = r9[r0];
        r9 = r9.valueAt(r3);
        r9 = (org.telegram.messenger.MessageObject) r9;
        r10 = r9.messageOwner;
        r10 = r10.action;
        if (r10 == 0) goto L_0x0464;
        goto L_0x0491;
        r10 = r9.isOut();
        if (r10 != 0) goto L_0x0486;
        if (r15 != 0) goto L_0x0486;
        r10 = r7.currentChat;
        if (r10 == 0) goto L_0x0483;
        r10 = r7.currentChat;
        r10 = r10.creator;
        if (r10 != 0) goto L_0x0486;
        r10 = r7.currentChat;
        r10 = r10.admin;
        if (r10 == 0) goto L_0x0483;
        r10 = r7.currentChat;
        r10 = r10.admins_enabled;
        if (r10 == 0) goto L_0x0483;
        goto L_0x0486;
        r2 = 1;
        r5 = 0;
        goto L_0x0494;
        if (r5 != 0) goto L_0x0491;
        r10 = r9.messageOwner;
        r10 = r10.date;
        r10 = r1 - r10;
        if (r10 > r6) goto L_0x0491;
        r5 = 1;
        r3 = r3 + 1;
        goto L_0x0449;
        r3 = r5;
        if (r2 == 0) goto L_0x0498;
        goto L_0x049b;
        r0 = r0 + -1;
        goto L_0x0444;
        r0 = r3;
        goto L_0x049f;
        r6 = r32;
        if (r0 == 0) goto L_0x052e;
        r2 = new android.widget.FrameLayout;
        r3 = r40.getParentActivity();
        r2.<init>(r3);
        r3 = new org.telegram.ui.Cells.CheckBoxCell;
        r4 = r40.getParentActivity();
        r5 = 1;
        r3.<init>(r4, r5);
        r4 = 0;
        r5 = org.telegram.ui.ActionBar.Theme.getSelectorDrawable(r4);
        r3.setBackgroundDrawable(r5);
        r5 = r7.currentChat;
        if (r5 == 0) goto L_0x04cf;
        r5 = "DeleteForAll";
        r9 = 2131493367; // 0x7f0c01f7 float:1.8610212E38 double:1.053097647E-314;
        r5 = org.telegram.messenger.LocaleController.getString(r5, r9);
        r9 = "";
        r3.setText(r5, r9, r4, r4);
        goto L_0x04e8;
        r5 = "DeleteForUser";
        r9 = 1;
        r9 = new java.lang.Object[r9];
        r10 = r7.currentUser;
        r10 = org.telegram.messenger.UserObject.getFirstName(r10);
        r9[r4] = r10;
        r10 = 2131493368; // 0x7f0c01f8 float:1.8610214E38 double:1.0530976475E-314;
        r5 = org.telegram.messenger.LocaleController.formatString(r5, r10, r9);
        r9 = "";
        r3.setText(r5, r9, r4, r4);
        r4 = org.telegram.messenger.LocaleController.isRTL;
        if (r4 == 0) goto L_0x04f5;
        r4 = 1098907648; // 0x41800000 float:16.0 double:5.42932517E-315;
        r5 = org.telegram.messenger.AndroidUtilities.dp(r4);
        r4 = 1090519040; // 0x41000000 float:8.0 double:5.38787994E-315;
        goto L_0x04fb;
        r4 = 1090519040; // 0x41000000 float:8.0 double:5.38787994E-315;
        r5 = org.telegram.messenger.AndroidUtilities.dp(r4);
        r9 = org.telegram.messenger.LocaleController.isRTL;
        if (r9 == 0) goto L_0x0504;
        r4 = org.telegram.messenger.AndroidUtilities.dp(r4);
        goto L_0x0507;
        r4 = 1098907648; // 0x41800000 float:16.0 double:5.42932517E-315;
        goto L_0x04ff;
        r9 = 0;
        r3.setPadding(r5, r9, r4, r9);
        r16 = -1;
        r17 = 1111490560; // 0x42400000 float:48.0 double:5.491493014E-315;
        r18 = 51;
        r19 = 0;
        r20 = 0;
        r21 = 0;
        r22 = 0;
        r4 = org.telegram.ui.Components.LayoutHelper.createFrame(r16, r17, r18, r19, r20, r21, r22);
        r2.addView(r3, r4);
        r4 = new org.telegram.ui.ChatActivity$101;
        r4.<init>(r14);
        r3.setOnClickListener(r4);
        r11.setView(r2);
        goto L_0x052e;
        r6 = r32;
        r5 = r26;
        r0 = "OK";
        r1 = 2131494028; // 0x7f0c048c float:1.8611553E38 double:1.0530979736E-314;
        r9 = org.telegram.messenger.LocaleController.getString(r0, r1);
        r10 = new org.telegram.ui.ChatActivity$102;
        r0 = r10;
        r1 = r7;
        r2 = r8;
        r3 = r42;
        r4 = r14;
        r12 = r6;
        r6 = r13;
        r0.<init>(r2, r3, r4, r5, r6);
        r11.setPositiveButton(r9, r10);
        r0 = "Cancel";
        r1 = 2131493127; // 0x7f0c0107 float:1.8609725E38 double:1.0530975284E-314;
        r0 = org.telegram.messenger.LocaleController.getString(r0, r1);
        r1 = 0;
        r11.setNegativeButton(r0, r1);
        r0 = r11.create();
        r7.showDialog(r0);
        return;
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.createDeleteMessagesAlert(org.telegram.messenger.MessageObject, org.telegram.messenger.MessageObject$GroupedMessages, int):void");
    }

    private void createMenu(android.view.View r1, boolean r2, boolean r3, boolean r4) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: org.telegram.ui.ChatActivity.createMenu(android.view.View, boolean, boolean, boolean):void
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:59)
	at jadx.core.ProcessClass.process(ProcessClass.java:42)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r0 = this;
        r6 = r20;
        r7 = r21;
        r0 = r6.actionBar;
        r0 = r0.isActionModeShowed();
        if (r0 == 0) goto L_0x000d;
    L_0x000c:
        return;
    L_0x000d:
        r0 = 0;
        r1 = r7 instanceof org.telegram.ui.Cells.ChatMessageCell;
        if (r1 == 0) goto L_0x001b;
    L_0x0012:
        r1 = r7;
        r1 = (org.telegram.ui.Cells.ChatMessageCell) r1;
        r0 = r1.getMessageObject();
    L_0x0019:
        r8 = r0;
        goto L_0x0027;
    L_0x001b:
        r1 = r7 instanceof org.telegram.ui.Cells.ChatActionCell;
        if (r1 == 0) goto L_0x0019;
    L_0x001f:
        r1 = r7;
        r1 = (org.telegram.ui.Cells.ChatActionCell) r1;
        r0 = r1.getMessageObject();
        goto L_0x0019;
    L_0x0027:
        if (r8 != 0) goto L_0x002a;
    L_0x0029:
        return;
    L_0x002a:
        r9 = r6.getMessageType(r8);
        if (r22 == 0) goto L_0x0048;
    L_0x0030:
        r0 = r8.messageOwner;
        r0 = r0.action;
        r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_messageActionPinMessage;
        if (r0 == 0) goto L_0x0048;
    L_0x0038:
        r0 = r8.messageOwner;
        r1 = r0.reply_to_msg_id;
        r0 = r8.messageOwner;
        r2 = r0.id;
        r3 = 1;
        r4 = 0;
        r5 = 0;
        r0 = r6;
        r0.scrollToMessageId(r1, r2, r3, r4, r5);
        return;
    L_0x0048:
        r0 = 0;
        r6.selectedObject = r0;
        r6.selectedObjectGroup = r0;
        r6.forwardingMessage = r0;
        r6.forwardingMessageGroup = r0;
        r1 = 1;
        r2 = r1;
    L_0x0053:
        if (r2 < 0) goto L_0x006d;
    L_0x0055:
        r3 = r6.selectedMessagesCanCopyIds;
        r3 = r3[r2];
        r3.clear();
        r3 = r6.selectedMessagesCanStarIds;
        r3 = r3[r2];
        r3.clear();
        r3 = r6.selectedMessagesIds;
        r3 = r3[r2];
        r3.clear();
        r2 = r2 + -1;
        goto L_0x0053;
    L_0x006d:
        r2 = 0;
        r6.cantDeleteMessagesCount = r2;
        r6.canEditMessagesCount = r2;
        r3 = r6.actionBar;
        r3.hideActionMode();
        r6.updatePinnedMessageView(r1);
        if (r24 == 0) goto L_0x0081;
    L_0x007c:
        r0 = r6.getValidGroupedMessage(r8);
        goto L_0x0082;
        r4 = 1;
        r10 = r8.getDialogId();
        r12 = r6.mergeDialogId;
        r5 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1));
        if (r5 == 0) goto L_0x00d3;
        r5 = r8.getId();
        if (r5 <= 0) goto L_0x00d3;
        r5 = r6.currentChat;
        r5 = org.telegram.messenger.ChatObject.isChannel(r5);
        if (r5 == 0) goto L_0x00d3;
        r5 = r6.currentChat;
        r5 = r5.creator;
        if (r5 != 0) goto L_0x00c3;
        r5 = r6.currentChat;
        r5 = r5.admin_rights;
        if (r5 == 0) goto L_0x00d3;
        r5 = r6.currentChat;
        r5 = r5.megagroup;
        if (r5 == 0) goto L_0x00b5;
        r5 = r6.currentChat;
        r5 = r5.admin_rights;
        r5 = r5.pin_messages;
        if (r5 != 0) goto L_0x00c3;
        r5 = r6.currentChat;
        r5 = r5.megagroup;
        if (r5 != 0) goto L_0x00d3;
        r5 = r6.currentChat;
        r5 = r5.admin_rights;
        r5 = r5.edit_messages;
        if (r5 == 0) goto L_0x00d3;
        r5 = r8.messageOwner;
        r5 = r5.action;
        if (r5 == 0) goto L_0x00d1;
        r5 = r8.messageOwner;
        r5 = r5.action;
        r5 = r5 instanceof org.telegram.tgnet.TLRPC.TL_messageActionEmpty;
        if (r5 == 0) goto L_0x00d3;
        r5 = r1;
        goto L_0x00d4;
        r5 = r2;
        r10 = r8.getDialogId();
        r12 = r6.mergeDialogId;
        r14 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1));
        if (r14 == 0) goto L_0x0116;
        r10 = r6.info;
        if (r10 == 0) goto L_0x0116;
        r10 = r6.info;
        r10 = r10.pinned_msg_id;
        r11 = r8.getId();
        if (r10 != r11) goto L_0x0116;
        r10 = r6.currentChat;
        r10 = r10.creator;
        if (r10 != 0) goto L_0x0114;
        r10 = r6.currentChat;
        r10 = r10.admin_rights;
        if (r10 == 0) goto L_0x0116;
        r10 = r6.currentChat;
        r10 = r10.megagroup;
        if (r10 == 0) goto L_0x0106;
        r10 = r6.currentChat;
        r10 = r10.admin_rights;
        r10 = r10.pin_messages;
        if (r10 != 0) goto L_0x0114;
        r10 = r6.currentChat;
        r10 = r10.megagroup;
        if (r10 != 0) goto L_0x0116;
        r10 = r6.currentChat;
        r10 = r10.admin_rights;
        r10 = r10.edit_messages;
        if (r10 == 0) goto L_0x0116;
        r10 = r1;
        goto L_0x0117;
        r10 = r2;
        if (r0 != 0) goto L_0x0135;
        r11 = r6.currentChat;
        r11 = r8.canEditMessage(r11);
        if (r11 == 0) goto L_0x0135;
        r11 = r6.chatActivityEnterView;
        r11 = r11.hasAudioToSend();
        if (r11 != 0) goto L_0x0135;
        r11 = r8.getDialogId();
        r13 = r6.mergeDialogId;
        r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1));
        if (r15 == 0) goto L_0x0135;
        r11 = r1;
        goto L_0x0136;
        r11 = r2;
        r12 = r6.currentEncryptedChat;
        if (r12 == 0) goto L_0x0146;
        r12 = r6.currentEncryptedChat;
        r12 = r12.layer;
        r12 = org.telegram.messenger.AndroidUtilities.getPeerLayerVersion(r12);
        r13 = 46;
        if (r12 < r13) goto L_0x019c;
        if (r9 != r1) goto L_0x0158;
        r12 = r8.getDialogId();
        r1 = r6.mergeDialogId;
        r14 = (r12 > r1 ? 1 : (r12 == r1 ? 0 : -1));
        if (r14 == 0) goto L_0x019c;
        r1 = r8.needDrawBluredPreview();
        if (r1 != 0) goto L_0x019c;
        r1 = r6.currentEncryptedChat;
        if (r1 != 0) goto L_0x0162;
        r1 = r8.getId();
        if (r1 < 0) goto L_0x019c;
        r1 = r6.bottomOverlayChat;
        if (r1 == 0) goto L_0x016e;
        r1 = r6.bottomOverlayChat;
        r1 = r1.getVisibility();
        if (r1 == 0) goto L_0x019c;
        r1 = r6.isBroadcast;
        if (r1 != 0) goto L_0x019c;
        r1 = r6.currentChat;
        if (r1 == 0) goto L_0x019d;
        r1 = r6.currentChat;
        r1 = org.telegram.messenger.ChatObject.isNotInChat(r1);
        if (r1 != 0) goto L_0x019c;
        r1 = r6.currentChat;
        r1 = org.telegram.messenger.ChatObject.isChannel(r1);
        if (r1 == 0) goto L_0x0194;
        r1 = r6.currentChat;
        r1 = org.telegram.messenger.ChatObject.canPost(r1);
        if (r1 != 0) goto L_0x0194;
        r1 = r6.currentChat;
        r1 = r1.megagroup;
        if (r1 == 0) goto L_0x019c;
        r1 = r6.currentChat;
        r1 = org.telegram.messenger.ChatObject.canSendMessages(r1);
        if (r1 != 0) goto L_0x019d;
        r4 = 0;
        r1 = 20;
        r2 = 2;
        if (r22 != 0) goto L_0x0253;
        if (r9 < r2) goto L_0x0253;
        if (r9 == r1) goto L_0x0253;
        r12 = r8.needDrawBluredPreview();
        if (r12 != 0) goto L_0x0253;
        r12 = r8.isLiveLocation();
        if (r12 == 0) goto L_0x01b4;
        goto L_0x0253;
        r1 = r6.actionBar;
        r1 = r1.createActionMode();
        r12 = 11;
        r12 = r1.getItem(r12);
        if (r12 == 0) goto L_0x01c7;
        r13 = 0;
        r12.setVisibility(r13);
        goto L_0x01c8;
        r13 = 0;
        r14 = 12;
        r12 = r1.getItem(r14);
        if (r12 == 0) goto L_0x01d3;
        r12.setVisibility(r13);
        r13 = r6.actionBar;
        r13.showActionMode();
        r13 = 1;
        r6.updatePinnedMessageView(r13);
        r13 = new android.animation.AnimatorSet;
        r13.<init>();
        r14 = new java.util.ArrayList;
        r14.<init>();
        r15 = 0;
        r16 = r15;
        r2 = r6.actionModeViews;
        r2 = r2.size();
        r17 = r1;
        r1 = r16;
        if (r1 >= r2) goto L_0x0225;
        r2 = r6.actionModeViews;
        r2 = r2.get(r1);
        r2 = (android.view.View) r2;
        r15 = org.telegram.ui.ActionBar.ActionBar.getCurrentActionBarHeight();
        r3 = 2;
        r7 = r15 / 2;
        r7 = (float) r7;
        r2.setPivotY(r7);
        org.telegram.messenger.AndroidUtilities.clearDrawableAnimation(r2);
        r7 = "scaleY";
        r18 = r12;
        r12 = new float[r3];
        r12 = {1036831949, 1065353216};
        r3 = android.animation.ObjectAnimator.ofFloat(r2, r7, r12);
        r14.add(r3);
        r15 = r1 + 1;
        r1 = r17;
        r12 = r18;
        r2 = 2;
        r7 = r21;
        goto L_0x01e7;
        r18 = r12;
        r13.playTogether(r14);
        r1 = 250; // 0xfa float:3.5E-43 double:1.235E-321;
        r13.setDuration(r1);
        r13.start();
        r2 = r23;
        r6.addToSelectedMessages(r8, r2);
        r1 = r6.selectedMessagesCountTextView;
        r3 = r6.selectedMessagesIds;
        r7 = 0;
        r3 = r3[r7];
        r3 = r3.size();
        r12 = r6.selectedMessagesIds;
        r15 = 1;
        r12 = r12[r15];
        r12 = r12.size();
        r3 = r3 + r12;
        r1.setNumber(r3, r7);
        r20.updateVisibleRows();
        return;
        r2 = r23;
        if (r9 < 0) goto L_0x0aaa;
        r6.selectedObject = r8;
        r6.selectedObjectGroup = r0;
        r3 = r20.getParentActivity();
        if (r3 != 0) goto L_0x0262;
        return;
        r3 = new org.telegram.ui.ActionBar.AlertDialog$Builder;
        r7 = r20.getParentActivity();
        r3.<init>(r7);
        r7 = new java.util.ArrayList;
        r7.<init>();
        r12 = new java.util.ArrayList;
        r12.<init>();
        r13 = 2131493356; // 0x7f0c01ec float:1.861019E38 double:1.0530976415E-314;
        if (r9 != 0) goto L_0x02a1;
        r1 = "Retry";
        r14 = 2131494273; // 0x7f0c0581 float:1.861205E38 double:1.0530980946E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r14);
        r7.add(r1);
        r1 = 0;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "Delete";
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r14 = 1;
        r1 = java.lang.Integer.valueOf(r14);
        r12.add(r1);
        goto L_0x0a7c;
        r14 = 1;
        r1 = 8;
        if (r9 != r14) goto L_0x0403;
        r14 = r6.currentChat;
        if (r14 == 0) goto L_0x0364;
        r14 = r6.isBroadcast;
        if (r14 != 0) goto L_0x0364;
        if (r4 == 0) goto L_0x02c3;
        r14 = "Reply";
        r13 = 2131494235; // 0x7f0c055b float:1.8611973E38 double:1.053098076E-314;
        r13 = org.telegram.messenger.LocaleController.getString(r14, r13);
        r7.add(r13);
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        if (r10 == 0) goto L_0x02db;
        r1 = "UnpinMessage";
        r13 = 2131494514; // 0x7f0c0672 float:1.8612539E38 double:1.0530982137E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 14;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x02f2;
        if (r5 == 0) goto L_0x02f2;
        r1 = "PinMessage";
        r13 = 2131494166; // 0x7f0c0516 float:1.8611833E38 double:1.0530980417E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 13;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        if (r11 == 0) goto L_0x0309;
        r1 = "Edit";
        r13 = 2131493397; // 0x7f0c0215 float:1.8610273E38 double:1.053097662E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 12;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = r6.selectedObject;
        r1 = r1.contentType;
        if (r1 != 0) goto L_0x0346;
        r1 = r6.selectedObject;
        r1 = r1.getId();
        if (r1 <= 0) goto L_0x0346;
        r1 = r6.selectedObject;
        r1 = r1.isOut();
        if (r1 != 0) goto L_0x0346;
        r1 = r6.currentChat;
        r1 = org.telegram.messenger.ChatObject.isChannel(r1);
        if (r1 != 0) goto L_0x0331;
        r1 = r6.currentUser;
        if (r1 == 0) goto L_0x0346;
        r1 = r6.currentUser;
        r1 = r1.bot;
        if (r1 == 0) goto L_0x0346;
        r1 = "ReportChat";
        r13 = 2131494238; // 0x7f0c055e float:1.8611979E38 double:1.0530980773E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 23;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = r6.currentChat;
        r1 = r8.canDeleteMessage(r1);
        if (r1 == 0) goto L_0x0a7c;
        r1 = "Delete";
        r13 = 2131493356; // 0x7f0c01ec float:1.861019E38 double:1.0530976415E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 1;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x0a7c;
        r13 = r8.messageOwner;
        r13 = r13.action;
        if (r13 == 0) goto L_0x03c4;
        r13 = r8.messageOwner;
        r13 = r13.action;
        r13 = r13 instanceof org.telegram.tgnet.TLRPC.TL_messageActionPhoneCall;
        if (r13 == 0) goto L_0x03c4;
        r13 = r8.messageOwner;
        r13 = r13.action;
        r13 = (org.telegram.tgnet.TLRPC.TL_messageActionPhoneCall) r13;
        r14 = r13.reason;
        r14 = r14 instanceof org.telegram.tgnet.TLRPC.TL_phoneCallDiscardReasonMissed;
        if (r14 != 0) goto L_0x0384;
        r14 = r13.reason;
        r14 = r14 instanceof org.telegram.tgnet.TLRPC.TL_phoneCallDiscardReasonBusy;
        if (r14 == 0) goto L_0x0394;
        r14 = r8.isOutOwner();
        if (r14 != 0) goto L_0x0394;
        r14 = "CallBack";
        r1 = 2131493107; // 0x7f0c00f3 float:1.8609685E38 double:1.0530975185E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r14, r1);
        goto L_0x039d;
        r1 = "CallAgain";
        r14 = 2131493106; // 0x7f0c00f2 float:1.8609683E38 double:1.053097518E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r14);
        r7.add(r1);
        r1 = 18;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = org.telegram.ui.Components.voip.VoIPHelper.canRateCall(r13);
        if (r1 == 0) goto L_0x03c4;
        r1 = "CallMessageReportProblem";
        r14 = 2131493114; // 0x7f0c00fa float:1.86097E38 double:1.053097522E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r14);
        r7.add(r1);
        r1 = 19;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        if (r22 == 0) goto L_0x03e5;
        r1 = r6.selectedObject;
        r1 = r1.getId();
        if (r1 <= 0) goto L_0x03e5;
        if (r4 == 0) goto L_0x03e5;
        r1 = "Reply";
        r13 = 2131494235; // 0x7f0c055b float:1.8611973E38 double:1.053098076E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 8;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = r6.currentChat;
        r1 = r8.canDeleteMessage(r1);
        if (r1 == 0) goto L_0x0a7c;
        r1 = "Delete";
        r13 = 2131493356; // 0x7f0c01ec float:1.861019E38 double:1.0530976415E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 1;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x0a7c;
        r1 = 2131493303; // 0x7f0c01b7 float:1.8610082E38 double:1.0530976154E-314;
        r13 = 20;
        if (r9 != r13) goto L_0x0445;
        r13 = "Retry";
        r14 = 2131494273; // 0x7f0c0581 float:1.861205E38 double:1.0530980946E-314;
        r13 = org.telegram.messenger.LocaleController.getString(r13, r14);
        r7.add(r13);
        r13 = 0;
        r13 = java.lang.Integer.valueOf(r13);
        r12.add(r13);
        r13 = "Copy";
        r1 = org.telegram.messenger.LocaleController.getString(r13, r1);
        r7.add(r1);
        r1 = 3;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "Delete";
        r13 = 2131493356; // 0x7f0c01ec float:1.861019E38 double:1.0530976415E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 1;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x0a7c;
        r13 = r6.currentEncryptedChat;
        if (r13 != 0) goto L_0x08a3;
        if (r4 == 0) goto L_0x0460;
        r13 = "Reply";
        r14 = 2131494235; // 0x7f0c055b float:1.8611973E38 double:1.053098076E-314;
        r13 = org.telegram.messenger.LocaleController.getString(r13, r14);
        r7.add(r13);
        r13 = 8;
        r14 = java.lang.Integer.valueOf(r13);
        r12.add(r14);
        r13 = r6.selectedObject;
        r13 = r13.type;
        if (r13 == 0) goto L_0x046c;
        r13 = r6.selectedObject;
        r13 = r13.caption;
        if (r13 == 0) goto L_0x047d;
        r13 = "Copy";
        r13 = org.telegram.messenger.LocaleController.getString(r13, r1);
        r7.add(r13);
        r13 = 3;
        r13 = java.lang.Integer.valueOf(r13);
        r12.add(r13);
        r13 = r6.currentChat;
        r13 = org.telegram.messenger.ChatObject.isChannel(r13);
        if (r13 == 0) goto L_0x04b2;
        r13 = r6.currentChat;
        r13 = r13.megagroup;
        if (r13 == 0) goto L_0x04b2;
        r13 = r6.currentChat;
        r13 = r13.username;
        r13 = android.text.TextUtils.isEmpty(r13);
        if (r13 != 0) goto L_0x04b2;
        r13 = r6.currentChat;
        r13 = org.telegram.messenger.ChatObject.hasAdminRights(r13);
        if (r13 == 0) goto L_0x04b2;
        r13 = "CopyLink";
        r14 = 2131493304; // 0x7f0c01b8 float:1.8610084E38 double:1.053097616E-314;
        r13 = org.telegram.messenger.LocaleController.getString(r13, r14);
        r7.add(r13);
        r13 = 22;
        r13 = java.lang.Integer.valueOf(r13);
        r12.add(r13);
        r13 = 3;
        if (r9 != r13) goto L_0x04e6;
        r1 = r6.selectedObject;
        r1 = r1.messageOwner;
        r1 = r1.media;
        r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaWebPage;
        if (r1 == 0) goto L_0x07de;
        r1 = r6.selectedObject;
        r1 = r1.messageOwner;
        r1 = r1.media;
        r1 = r1.webpage;
        r1 = r1.document;
        r1 = org.telegram.messenger.MessageObject.isNewGifDocument(r1);
        if (r1 == 0) goto L_0x07de;
        r1 = "SaveToGIFs";
        r13 = 2131494289; // 0x7f0c0591 float:1.8612082E38 double:1.0530981025E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 11;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x07de;
        r13 = 4;
        if (r9 != r13) goto L_0x05c8;
        r1 = r6.selectedObject;
        r1 = r1.isVideo();
        if (r1 == 0) goto L_0x0523;
        r1 = r6.selectedObject;
        r1 = r1.needDrawBluredPreview();
        if (r1 != 0) goto L_0x07de;
        r1 = "SaveToGallery";
        r13 = 2131494290; // 0x7f0c0592 float:1.8612084E38 double:1.053098103E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 4;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "ShareFile";
        r13 = 2131494383; // 0x7f0c05ef float:1.8612273E38 double:1.053098149E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 6;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x07de;
        r1 = r6.selectedObject;
        r1 = r1.isMusic();
        if (r1 == 0) goto L_0x0556;
        r1 = "SaveToMusic";
        r13 = 2131494292; // 0x7f0c0594 float:1.8612088E38 double:1.053098104E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 10;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "ShareFile";
        r13 = 2131494383; // 0x7f0c05ef float:1.8612273E38 double:1.053098149E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 6;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x07de;
        r1 = r6.selectedObject;
        r1 = r1.getDocument();
        if (r1 == 0) goto L_0x05aa;
        r1 = r6.selectedObject;
        r1 = r1.getDocument();
        r1 = org.telegram.messenger.MessageObject.isNewGifDocument(r1);
        if (r1 == 0) goto L_0x057f;
        r1 = "SaveToGIFs";
        r13 = 2131494289; // 0x7f0c0591 float:1.8612082E38 double:1.0530981025E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 11;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "SaveToDownloads";
        r13 = 2131494288; // 0x7f0c0590 float:1.861208E38 double:1.053098102E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 10;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "ShareFile";
        r13 = 2131494383; // 0x7f0c05ef float:1.8612273E38 double:1.053098149E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 6;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x07de;
        r1 = r6.selectedObject;
        r1 = r1.needDrawBluredPreview();
        if (r1 != 0) goto L_0x07de;
        r1 = "SaveToGallery";
        r13 = 2131494290; // 0x7f0c0592 float:1.8612084E38 double:1.053098103E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 4;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x07de;
        r13 = 5;
        if (r9 != r13) goto L_0x0609;
        r1 = "ApplyLocalizationFile";
        r14 = 2131492983; // 0x7f0c0077 float:1.8609433E38 double:1.0530974573E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r14);
        r7.add(r1);
        r1 = java.lang.Integer.valueOf(r13);
        r12.add(r1);
        r1 = "SaveToDownloads";
        r13 = 2131494288; // 0x7f0c0590 float:1.861208E38 double:1.053098102E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r13 = 10;
        r1 = java.lang.Integer.valueOf(r13);
        r12.add(r1);
        r1 = "ShareFile";
        r13 = 2131494383; // 0x7f0c05ef float:1.8612273E38 double:1.053098149E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 6;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x07de;
        r13 = 10;
        if (r9 != r13) goto L_0x064c;
        r1 = "ApplyThemeFile";
        r13 = 2131492985; // 0x7f0c0079 float:1.8609437E38 double:1.053097458E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 5;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "SaveToDownloads";
        r13 = 2131494288; // 0x7f0c0590 float:1.861208E38 double:1.053098102E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 10;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "ShareFile";
        r13 = 2131494383; // 0x7f0c05ef float:1.8612273E38 double:1.053098149E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r13 = 6;
        r1 = java.lang.Integer.valueOf(r13);
        r12.add(r1);
        goto L_0x07de;
        r13 = 6;
        if (r9 != r13) goto L_0x068e;
        r1 = "SaveToGallery";
        r13 = 2131494290; // 0x7f0c0592 float:1.8612084E38 double:1.053098103E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 7;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "SaveToDownloads";
        r13 = 2131494288; // 0x7f0c0590 float:1.861208E38 double:1.053098102E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 10;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "ShareFile";
        r13 = 2131494383; // 0x7f0c05ef float:1.8612273E38 double:1.053098149E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 6;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x07de;
        r13 = 7;
        if (r9 != r13) goto L_0x0711;
        r1 = r6.selectedObject;
        r1 = r1.isMask();
        if (r1 == 0) goto L_0x06b0;
        r1 = "AddToMasks";
        r13 = 2131492942; // 0x7f0c004e float:1.860935E38 double:1.053097437E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 9;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x07de;
        r1 = "AddToStickers";
        r13 = 2131492943; // 0x7f0c004f float:1.8609352E38 double:1.0530974375E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 9;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = r6.currentAccount;
        r1 = org.telegram.messenger.DataQuery.getInstance(r1);
        r13 = r6.selectedObject;
        r13 = r13.getDocument();
        r1 = r1.isStickerInFavorites(r13);
        if (r1 != 0) goto L_0x06fa;
        r1 = r6.currentAccount;
        r1 = org.telegram.messenger.DataQuery.getInstance(r1);
        r1 = r1.canAddStickerToFavorites();
        if (r1 == 0) goto L_0x07de;
        r1 = "AddToFavorites";
        r13 = 2131492941; // 0x7f0c004d float:1.8609348E38 double:1.0530974365E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 20;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x07de;
        r1 = "DeleteFromFavorites";
        r13 = 2131493369; // 0x7f0c01f9 float:1.8610216E38 double:1.053097648E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 21;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x07de;
        r13 = 8;
        if (r9 != r13) goto L_0x079d;
        r13 = r6.currentAccount;
        r13 = org.telegram.messenger.MessagesController.getInstance(r13);
        r14 = r6.selectedObject;
        r14 = r14.messageOwner;
        r14 = r14.media;
        r14 = r14.user_id;
        r14 = java.lang.Integer.valueOf(r14);
        r13 = r13.getUser(r14);
        if (r13 == 0) goto L_0x0764;
        r14 = r13.id;
        r1 = r6.currentAccount;
        r1 = org.telegram.messenger.UserConfig.getInstance(r1);
        r1 = r1.getClientUserId();
        if (r14 == r1) goto L_0x0764;
        r1 = r6.currentAccount;
        r1 = org.telegram.messenger.ContactsController.getInstance(r1);
        r1 = r1.contactsDict;
        r14 = r13.id;
        r14 = java.lang.Integer.valueOf(r14);
        r1 = r1.get(r14);
        if (r1 != 0) goto L_0x0764;
        r1 = "AddContactTitle";
        r14 = 2131492928; // 0x7f0c0040 float:1.8609322E38 double:1.05309743E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r14);
        r7.add(r1);
        r1 = 15;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = r6.selectedObject;
        r1 = r1.messageOwner;
        r1 = r1.media;
        r1 = r1.phone_number;
        r1 = android.text.TextUtils.isEmpty(r1);
        if (r1 != 0) goto L_0x079c;
        r1 = "Copy";
        r14 = 2131493303; // 0x7f0c01b7 float:1.8610082E38 double:1.0530976154E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r14);
        r7.add(r1);
        r1 = 16;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "Call";
        r14 = 2131493105; // 0x7f0c00f1 float:1.860968E38 double:1.0530975175E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r14);
        r7.add(r1);
        r1 = 17;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x07de;
        r1 = 9;
        if (r9 != r1) goto L_0x07de;
        r1 = r6.currentAccount;
        r1 = org.telegram.messenger.DataQuery.getInstance(r1);
        r13 = r6.selectedObject;
        r13 = r13.getDocument();
        r1 = r1.isStickerInFavorites(r13);
        if (r1 != 0) goto L_0x07c9;
        r1 = "AddToFavorites";
        r13 = 2131492941; // 0x7f0c004d float:1.8609348E38 double:1.0530974365E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 20;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x07de;
        r1 = "DeleteFromFavorites";
        r13 = 2131493369; // 0x7f0c01f9 float:1.8610216E38 double:1.053097648E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 21;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = r6.selectedObject;
        r1 = r1.needDrawBluredPreview();
        if (r1 != 0) goto L_0x0802;
        r1 = r6.selectedObject;
        r1 = r1.isLiveLocation();
        if (r1 != 0) goto L_0x0802;
        r1 = "Forward";
        r13 = 2131493548; // 0x7f0c02ac float:1.861058E38 double:1.0530977364E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 2;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        if (r10 == 0) goto L_0x081a;
        r1 = "UnpinMessage";
        r13 = 2131494514; // 0x7f0c0672 float:1.8612539E38 double:1.0530982137E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 14;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x0831;
        if (r5 == 0) goto L_0x0831;
        r1 = "PinMessage";
        r13 = 2131494166; // 0x7f0c0516 float:1.8611833E38 double:1.0530980417E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 13;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        if (r11 == 0) goto L_0x0848;
        r1 = "Edit";
        r13 = 2131493397; // 0x7f0c0215 float:1.8610273E38 double:1.053097662E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 12;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = r6.selectedObject;
        r1 = r1.contentType;
        if (r1 != 0) goto L_0x0885;
        r1 = r6.selectedObject;
        r1 = r1.getId();
        if (r1 <= 0) goto L_0x0885;
        r1 = r6.selectedObject;
        r1 = r1.isOut();
        if (r1 != 0) goto L_0x0885;
        r1 = r6.currentChat;
        r1 = org.telegram.messenger.ChatObject.isChannel(r1);
        if (r1 != 0) goto L_0x0870;
        r1 = r6.currentUser;
        if (r1 == 0) goto L_0x0885;
        r1 = r6.currentUser;
        r1 = r1.bot;
        if (r1 == 0) goto L_0x0885;
        r1 = "ReportChat";
        r13 = 2131494238; // 0x7f0c055e float:1.8611979E38 double:1.0530980773E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 23;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = r6.currentChat;
        r1 = r8.canDeleteMessage(r1);
        if (r1 == 0) goto L_0x0a7c;
        r1 = "Delete";
        r13 = 2131493356; // 0x7f0c01ec float:1.861019E38 double:1.0530976415E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 1;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x0a7c;
        if (r4 == 0) goto L_0x08ba;
        r1 = "Reply";
        r13 = 2131494235; // 0x7f0c055b float:1.8611973E38 double:1.053098076E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 8;
        r13 = java.lang.Integer.valueOf(r1);
        r12.add(r13);
        r1 = r6.selectedObject;
        r1 = r1.type;
        if (r1 == 0) goto L_0x08c6;
        r1 = r6.selectedObject;
        r1 = r1.caption;
        if (r1 == 0) goto L_0x08da;
        r1 = "Copy";
        r13 = 2131493303; // 0x7f0c01b7 float:1.8610082E38 double:1.0530976154E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 3;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = 4;
        if (r9 != r1) goto L_0x0992;
        r13 = r6.selectedObject;
        r13 = r13.isVideo();
        if (r13 == 0) goto L_0x090e;
        r13 = "SaveToGallery";
        r14 = 2131494290; // 0x7f0c0592 float:1.8612084E38 double:1.053098103E-314;
        r13 = org.telegram.messenger.LocaleController.getString(r13, r14);
        r7.add(r13);
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "ShareFile";
        r13 = 2131494383; // 0x7f0c05ef float:1.8612273E38 double:1.053098149E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 6;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x0a68;
        r1 = r6.selectedObject;
        r1 = r1.isMusic();
        if (r1 == 0) goto L_0x0941;
        r1 = "SaveToMusic";
        r13 = 2131494292; // 0x7f0c0594 float:1.8612088E38 double:1.053098104E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 10;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "ShareFile";
        r13 = 2131494383; // 0x7f0c05ef float:1.8612273E38 double:1.053098149E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 6;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x0a68;
        r1 = r6.selectedObject;
        r1 = r1.isVideo();
        if (r1 != 0) goto L_0x097c;
        r1 = r6.selectedObject;
        r1 = r1.getDocument();
        if (r1 == 0) goto L_0x097c;
        r1 = "SaveToDownloads";
        r13 = 2131494288; // 0x7f0c0590 float:1.861208E38 double:1.053098102E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 10;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = "ShareFile";
        r13 = 2131494383; // 0x7f0c05ef float:1.8612273E38 double:1.053098149E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 6;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x0a68;
        r1 = "SaveToGallery";
        r13 = 2131494290; // 0x7f0c0592 float:1.8612084E38 double:1.053098103E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 4;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x0a68;
        r1 = 5;
        if (r9 != r1) goto L_0x09aa;
        r13 = "ApplyLocalizationFile";
        r14 = 2131492983; // 0x7f0c0077 float:1.8609433E38 double:1.0530974573E-314;
        r13 = org.telegram.messenger.LocaleController.getString(r13, r14);
        r7.add(r13);
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x0a68;
        r13 = 10;
        if (r9 != r13) goto L_0x09c3;
        r13 = "ApplyThemeFile";
        r14 = 2131492985; // 0x7f0c0079 float:1.8609437E38 double:1.053097458E-314;
        r13 = org.telegram.messenger.LocaleController.getString(r13, r14);
        r7.add(r13);
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x0a68;
        r1 = 7;
        if (r9 != r1) goto L_0x09dd;
        r1 = "AddToStickers";
        r13 = 2131492943; // 0x7f0c004f float:1.8609352E38 double:1.0530974375E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 9;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        goto L_0x0a68;
        r1 = 8;
        if (r9 != r1) goto L_0x0a68;
        r1 = r6.currentAccount;
        r1 = org.telegram.messenger.MessagesController.getInstance(r1);
        r13 = r6.selectedObject;
        r13 = r13.messageOwner;
        r13 = r13.media;
        r13 = r13.user_id;
        r13 = java.lang.Integer.valueOf(r13);
        r1 = r1.getUser(r13);
        if (r1 == 0) goto L_0x0a30;
        r13 = r1.id;
        r14 = r6.currentAccount;
        r14 = org.telegram.messenger.UserConfig.getInstance(r14);
        r14 = r14.getClientUserId();
        if (r13 == r14) goto L_0x0a30;
        r13 = r6.currentAccount;
        r13 = org.telegram.messenger.ContactsController.getInstance(r13);
        r13 = r13.contactsDict;
        r14 = r1.id;
        r14 = java.lang.Integer.valueOf(r14);
        r13 = r13.get(r14);
        if (r13 != 0) goto L_0x0a30;
        r13 = "AddContactTitle";
        r14 = 2131492928; // 0x7f0c0040 float:1.8609322E38 double:1.05309743E-314;
        r13 = org.telegram.messenger.LocaleController.getString(r13, r14);
        r7.add(r13);
        r13 = 15;
        r13 = java.lang.Integer.valueOf(r13);
        r12.add(r13);
        r13 = r6.selectedObject;
        r13 = r13.messageOwner;
        r13 = r13.media;
        r13 = r13.phone_number;
        r13 = android.text.TextUtils.isEmpty(r13);
        if (r13 != 0) goto L_0x0a68;
        r13 = "Copy";
        r14 = 2131493303; // 0x7f0c01b7 float:1.8610082E38 double:1.0530976154E-314;
        r13 = org.telegram.messenger.LocaleController.getString(r13, r14);
        r7.add(r13);
        r13 = 16;
        r13 = java.lang.Integer.valueOf(r13);
        r12.add(r13);
        r13 = "Call";
        r14 = 2131493105; // 0x7f0c00f1 float:1.860968E38 double:1.0530975175E-314;
        r13 = org.telegram.messenger.LocaleController.getString(r13, r14);
        r7.add(r13);
        r13 = 17;
        r13 = java.lang.Integer.valueOf(r13);
        r12.add(r13);
        r1 = "Delete";
        r13 = 2131493356; // 0x7f0c01ec float:1.861019E38 double:1.0530976415E-314;
        r1 = org.telegram.messenger.LocaleController.getString(r1, r13);
        r7.add(r1);
        r1 = 1;
        r1 = java.lang.Integer.valueOf(r1);
        r12.add(r1);
        r1 = r12.isEmpty();
        if (r1 == 0) goto L_0x0a83;
        return;
        r1 = r7.size();
        r1 = new java.lang.CharSequence[r1];
        r1 = r7.toArray(r1);
        r1 = (java.lang.CharSequence[]) r1;
        r13 = new org.telegram.ui.ChatActivity$103;
        r13.<init>(r12);
        r3.setItems(r1, r13);
        r13 = "Message";
        r14 = 2131493817; // 0x7f0c03b9 float:1.8611125E38 double:1.0530978693E-314;
        r13 = org.telegram.messenger.LocaleController.getString(r13, r14);
        r3.setTitle(r13);
        r13 = r3.create();
        r6.showDialog(r13);
        return;
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.createMenu(android.view.View, boolean, boolean, boolean):void");
    }

    private int getMessageType(org.telegram.messenger.MessageObject r1) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: org.telegram.ui.ChatActivity.getMessageType(org.telegram.messenger.MessageObject):int
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:59)
	at jadx.core.ProcessClass.process(ProcessClass.java:42)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r0 = this;
        r0 = r18;
        r1 = r19;
        r2 = -1;
        if (r1 != 0) goto L_0x0008;
    L_0x0007:
        return r2;
    L_0x0008:
        r3 = r0.currentEncryptedChat;
        r4 = 4;
        r5 = 5;
        r6 = 3;
        r7 = 8;
        r8 = 12;
        r9 = 11;
        r10 = 20;
        r11 = 7;
        r12 = 10;
        r13 = 6;
        r14 = 0;
        r16 = 2;
        if (r3 != 0) goto L_0x0151;
    L_0x001e:
        r3 = r0.isBroadcast;
        if (r3 == 0) goto L_0x0030;
    L_0x0022:
        r3 = r19.getId();
        if (r3 > 0) goto L_0x0030;
    L_0x0028:
        r3 = r19.isSendError();
        if (r3 == 0) goto L_0x0030;
    L_0x002e:
        r3 = 1;
        goto L_0x0031;
    L_0x0030:
        r3 = r14;
    L_0x0031:
        r15 = r0.isBroadcast;
        if (r15 != 0) goto L_0x0041;
    L_0x0035:
        r15 = r19.getId();
        if (r15 > 0) goto L_0x0041;
    L_0x003b:
        r15 = r19.isOut();
        if (r15 != 0) goto L_0x0043;
    L_0x0041:
        if (r3 == 0) goto L_0x0052;
    L_0x0043:
        r4 = r19.isSendError();
        if (r4 == 0) goto L_0x0051;
    L_0x0049:
        r2 = r19.isMediaEmpty();
        if (r2 != 0) goto L_0x0050;
    L_0x004f:
        return r14;
    L_0x0050:
        return r10;
    L_0x0051:
        return r2;
    L_0x0052:
        r10 = r1.type;
        if (r10 != r13) goto L_0x0057;
    L_0x0056:
        return r2;
    L_0x0057:
        r10 = r1.type;
        if (r10 == r12) goto L_0x0148;
    L_0x005b:
        r10 = r1.type;
        if (r10 == r9) goto L_0x0148;
    L_0x005f:
        r9 = r1.type;
        r10 = 16;
        if (r9 != r10) goto L_0x0067;
    L_0x0065:
        goto L_0x0148;
    L_0x0067:
        r2 = r19.isVoice();
        if (r2 == 0) goto L_0x006e;
    L_0x006d:
        return r16;
    L_0x006e:
        r2 = r19.isSticker();
        if (r2 == 0) goto L_0x00a1;
    L_0x0074:
        r2 = r19.getInputStickerSet();
        r4 = r2 instanceof org.telegram.tgnet.TLRPC.TL_inputStickerSetID;
        if (r4 == 0) goto L_0x008b;
    L_0x007c:
        r4 = r0.currentAccount;
        r4 = org.telegram.messenger.DataQuery.getInstance(r4);
        r5 = r2.id;
        r4 = r4.isStickerPackInstalled(r5);
        if (r4 != 0) goto L_0x009e;
    L_0x008a:
        return r11;
    L_0x008b:
        r4 = r2 instanceof org.telegram.tgnet.TLRPC.TL_inputStickerSetShortName;
        if (r4 == 0) goto L_0x009e;
    L_0x008f:
        r4 = r0.currentAccount;
        r4 = org.telegram.messenger.DataQuery.getInstance(r4);
        r5 = r2.short_name;
        r4 = r4.isStickerPackInstalled(r5);
        if (r4 != 0) goto L_0x009e;
    L_0x009d:
        return r11;
    L_0x009e:
        r4 = 9;
        return r4;
    L_0x00a1:
        r2 = r19.isRoundVideo();
        if (r2 == 0) goto L_0x00b1;
    L_0x00a7:
        r2 = r19.isRoundVideo();
        if (r2 == 0) goto L_0x00cc;
    L_0x00ad:
        r2 = org.telegram.messenger.BuildVars.DEBUG_VERSION;
        if (r2 == 0) goto L_0x00cc;
    L_0x00b1:
        r2 = r1.messageOwner;
        r2 = r2.media;
        r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaPhoto;
        if (r2 != 0) goto L_0x00d8;
    L_0x00b9:
        r2 = r19.getDocument();
        if (r2 != 0) goto L_0x00d8;
    L_0x00bf:
        r2 = r19.isMusic();
        if (r2 != 0) goto L_0x00d8;
    L_0x00c5:
        r2 = r19.isVideo();
        if (r2 == 0) goto L_0x00cc;
    L_0x00cb:
        goto L_0x00d8;
    L_0x00cc:
        r2 = r1.type;
        if (r2 != r8) goto L_0x00d1;
    L_0x00d0:
        return r7;
    L_0x00d1:
        r2 = r19.isMediaEmpty();
        if (r2 == 0) goto L_0x0147;
    L_0x00d7:
        return r6;
    L_0x00d8:
        r2 = 0;
        r6 = r1.messageOwner;
        r6 = r6.attachPath;
        r6 = android.text.TextUtils.isEmpty(r6);
        if (r6 != 0) goto L_0x00f3;
    L_0x00e3:
        r6 = new java.io.File;
        r7 = r1.messageOwner;
        r7 = r7.attachPath;
        r6.<init>(r7);
        r7 = r6.exists();
        if (r7 == 0) goto L_0x00f3;
    L_0x00f2:
        r2 = 1;
    L_0x00f3:
        if (r2 != 0) goto L_0x0102;
    L_0x00f5:
        r6 = r1.messageOwner;
        r6 = org.telegram.messenger.FileLoader.getPathToMessage(r6);
        r7 = r6.exists();
        if (r7 == 0) goto L_0x0102;
    L_0x0101:
        r2 = 1;
    L_0x0102:
        if (r2 == 0) goto L_0x0146;
    L_0x0104:
        r6 = r19.getDocument();
        if (r6 == 0) goto L_0x0145;
        r6 = r19.getDocument();
        r6 = r6.mime_type;
        if (r6 == 0) goto L_0x0145;
        r7 = r19.getDocumentName();
        r7 = r7.toLowerCase();
        r8 = "attheme";
        r7 = r7.endsWith(r8);
        if (r7 == 0) goto L_0x0123;
        return r12;
        r7 = "/xml";
        r7 = r6.endsWith(r7);
        if (r7 == 0) goto L_0x012c;
        return r5;
        r5 = "/png";
        r5 = r6.endsWith(r5);
        if (r5 != 0) goto L_0x0144;
        r5 = "/jpg";
        r5 = r6.endsWith(r5);
        if (r5 != 0) goto L_0x0144;
        r5 = "/jpeg";
        r5 = r6.endsWith(r5);
        if (r5 == 0) goto L_0x0145;
        return r13;
        return r4;
    L_0x0147:
        return r16;
    L_0x0148:
        r4 = r19.getId();
        if (r4 != 0) goto L_0x014f;
        return r2;
        r2 = 1;
        return r2;
    L_0x0151:
        r3 = r19.isSending();
        if (r3 == 0) goto L_0x0158;
        return r2;
        r3 = r1.type;
        if (r3 != r13) goto L_0x015d;
        return r2;
        r3 = r19.isSendError();
        if (r3 == 0) goto L_0x016b;
        r2 = r19.isMediaEmpty();
        if (r2 != 0) goto L_0x016a;
        return r14;
        return r10;
        r3 = r1.type;
        if (r3 == r12) goto L_0x0213;
        r3 = r1.type;
        if (r3 != r9) goto L_0x0175;
        goto L_0x0213;
        r2 = r19.isVoice();
        if (r2 == 0) goto L_0x017c;
        return r16;
        r2 = r19.isSticker();
        if (r2 == 0) goto L_0x019b;
        r2 = r19.getInputStickerSet();
        r3 = r2 instanceof org.telegram.tgnet.TLRPC.TL_inputStickerSetShortName;
        if (r3 == 0) goto L_0x0199;
        r3 = r0.currentAccount;
        r3 = org.telegram.messenger.DataQuery.getInstance(r3);
        r4 = r2.short_name;
        r3 = r3.isStickerPackInstalled(r4);
        if (r3 != 0) goto L_0x0199;
        return r11;
        goto L_0x0212;
        r2 = r19.isRoundVideo();
        if (r2 != 0) goto L_0x0206;
        r2 = r1.messageOwner;
        r2 = r2.media;
        r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaPhoto;
        if (r2 != 0) goto L_0x01bb;
        r2 = r19.getDocument();
        if (r2 != 0) goto L_0x01bb;
        r2 = r19.isMusic();
        if (r2 != 0) goto L_0x01bb;
        r2 = r19.isVideo();
        if (r2 == 0) goto L_0x0206;
        r2 = 0;
        r3 = r1.messageOwner;
        r3 = r3.attachPath;
        r3 = android.text.TextUtils.isEmpty(r3);
        if (r3 != 0) goto L_0x01d6;
        r3 = new java.io.File;
        r6 = r1.messageOwner;
        r6 = r6.attachPath;
        r3.<init>(r6);
        r6 = r3.exists();
        if (r6 == 0) goto L_0x01d6;
        r2 = 1;
        if (r2 != 0) goto L_0x01e5;
        r3 = r1.messageOwner;
        r3 = org.telegram.messenger.FileLoader.getPathToMessage(r3);
        r6 = r3.exists();
        if (r6 == 0) goto L_0x01e5;
        r2 = 1;
        if (r2 == 0) goto L_0x0205;
        r3 = r19.getDocument();
        if (r3 == 0) goto L_0x01fe;
        r3 = r19.getDocument();
        r3 = r3.mime_type;
        if (r3 == 0) goto L_0x01fe;
        r6 = "text/xml";
        r6 = r3.endsWith(r6);
        if (r6 == 0) goto L_0x01fe;
        return r5;
        r3 = r1.messageOwner;
        r3 = r3.ttl;
        if (r3 > 0) goto L_0x0205;
        return r4;
        goto L_0x0212;
        r2 = r1.type;
        if (r2 != r8) goto L_0x020b;
        return r7;
        r2 = r19.isMediaEmpty();
        if (r2 == 0) goto L_0x0212;
        return r6;
        return r16;
        r3 = r19.getId();
        if (r3 == 0) goto L_0x0222;
        r3 = r19.isSending();
        if (r3 == 0) goto L_0x0220;
        goto L_0x0222;
        r2 = 1;
        return r2;
        return r2;
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.getMessageType(org.telegram.messenger.MessageObject):int");
    }

    public void didReceivedNotification(int r1, int r2, java.lang.Object... r3) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: org.telegram.ui.ChatActivity.didReceivedNotification(int, int, java.lang.Object[]):void
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:59)
	at jadx.core.ProcessClass.process(ProcessClass.java:42)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r0 = this;
        r7 = r80;
        r8 = r81;
        r9 = r83;
        r1 = org.telegram.messenger.NotificationCenter.messagesDidLoaded;
        r3 = 10;
        r6 = 3;
        r12 = -1;
        r15 = 4;
        r4 = 2;
        r14 = 1;
        r13 = 0;
        if (r8 != r1) goto L_0x0a91;
    L_0x0012:
        r1 = r9[r3];
        r1 = (java.lang.Integer) r1;
        r1 = r1.intValue();
        r3 = r7.classGuid;
        if (r1 != r3) goto L_0x0a8a;
    L_0x001e:
        r3 = r7.openAnimationEnded;
        if (r3 != 0) goto L_0x003d;
        r3 = r7.currentAccount;
        r3 = org.telegram.messenger.NotificationCenter.getInstance(r3);
        r11 = new int[r15];
        r22 = org.telegram.messenger.NotificationCenter.chatInfoDidLoaded;
        r11[r13] = r22;
        r22 = org.telegram.messenger.NotificationCenter.dialogsNeedReload;
        r11[r14] = r22;
        r22 = org.telegram.messenger.NotificationCenter.closeChats;
        r11[r4] = r22;
        r22 = org.telegram.messenger.NotificationCenter.botKeyboardDidLoaded;
        r11[r6] = r22;
        r3.setAllowedNotificationsDutingAnimation(r11);
        r3 = 11;
        r3 = r9[r3];
        r3 = (java.lang.Integer) r3;
        r3 = r3.intValue();
        r11 = r7.waitingForLoad;
        r5 = java.lang.Integer.valueOf(r3);
        r5 = r11.indexOf(r5);
        r11 = r7.currentAccount;
        r11 = org.telegram.messenger.UserConfig.getInstance(r11);
        r11 = r11.getClientUserId();
        if (r5 != r12) goto L_0x005e;
        return;
        r12 = r7.waitingForLoad;
        r12.remove(r5);
        r12 = r9[r4];
        r12 = (java.util.ArrayList) r12;
        r22 = 0;
        r4 = r7.waitingForReplyMessageLoad;
        if (r4 == 0) goto L_0x00d3;
        r4 = r7.createUnreadMessageAfterIdLoading;
        if (r4 != 0) goto L_0x00c1;
        r4 = 0;
        r23 = r13;
        r24 = r23;
        r2 = r12.size();
        r10 = r24;
        if (r10 >= r2) goto L_0x00bc;
        r2 = r12.get(r10);
        r2 = (org.telegram.messenger.MessageObject) r2;
        r15 = r2.getId();
        r6 = r7.startLoadFromMessageId;
        if (r15 != r6) goto L_0x008e;
        r4 = 1;
        goto L_0x00bc;
        r6 = r10 + 1;
        r15 = r12.size();
        if (r6 >= r15) goto L_0x00b6;
        r6 = r10 + 1;
        r6 = r12.get(r6);
        r6 = (org.telegram.messenger.MessageObject) r6;
        r15 = r2.getId();
        r14 = r7.startLoadFromMessageId;
        if (r15 < r14) goto L_0x00b6;
        r14 = r6.getId();
        r15 = r7.startLoadFromMessageId;
        if (r14 >= r15) goto L_0x00b6;
        r14 = r2.getId();
        r7.startLoadFromMessageId = r14;
        r4 = 1;
        goto L_0x00bc;
        r23 = r10 + 1;
        r6 = 3;
        r14 = 1;
        r15 = 4;
        goto L_0x0074;
        if (r4 != 0) goto L_0x00c1;
        r7.startLoadFromMessageId = r13;
        return;
        r2 = r7.startLoadFromMessageId;
        r4 = r7.needSelectFromMessageId;
        r6 = r7.createUnreadMessageAfterId;
        r10 = r7.createUnreadMessageAfterIdLoading;
        r80.clearChatData();
        r7.createUnreadMessageAfterId = r6;
        r7.startLoadFromMessageId = r2;
        r7.needSelectFromMessageId = r4;
        goto L_0x00d5;
        r10 = r22;
        r2 = r7.loadsCount;
        r4 = 1;
        r2 = r2 + r4;
        r7.loadsCount = r2;
        r2 = r9[r13];
        r2 = (java.lang.Long) r2;
        r14 = r2.longValue();
        r26 = r1;
        r1 = r7.dialog_id;
        r4 = (r14 > r1 ? 1 : (r14 == r1 ? 0 : -1));
        if (r4 != 0) goto L_0x00ed;
        r1 = r13;
        goto L_0x00ee;
        r1 = 1;
        r2 = 1;
        r4 = r9[r2];
        r4 = (java.lang.Integer) r4;
        r2 = r4.intValue();
        r4 = 3;
        r6 = r9[r4];
        r6 = (java.lang.Boolean) r6;
        r4 = r6.booleanValue();
        r6 = 4;
        r22 = r9[r6];
        r6 = r22;
        r6 = (java.lang.Integer) r6;
        r6 = r6.intValue();
        r22 = 7;
        r22 = r9[r22];
        r13 = r22;
        r13 = (java.lang.Integer) r13;
        r13 = r13.intValue();
        r22 = 8;
        r22 = r9[r22];
        r28 = r3;
        r3 = r22;
        r3 = (java.lang.Integer) r3;
        r3 = r3.intValue();
        r22 = 12;
        r22 = r9[r22];
        r29 = r5;
        r5 = r22;
        r5 = (java.lang.Integer) r5;
        r5 = r5.intValue();
        r22 = 13;
        r22 = r9[r22];
        r30 = r13;
        r13 = r22;
        r13 = (java.lang.Integer) r13;
        r13 = r13.intValue();
        if (r13 >= 0) goto L_0x014e;
        r13 = r13 * -1;
        r31 = r13;
        r13 = 0;
        r7.hasAllMentionsLocal = r13;
        r33 = r31;
        r13 = 1;
        goto L_0x015b;
        r32 = r13;
        r13 = r7.first;
        if (r13 == 0) goto L_0x0158;
        r13 = 1;
        r7.hasAllMentionsLocal = r13;
        goto L_0x0159;
        r13 = 1;
        r33 = r32;
        r13 = 4;
        if (r3 != r13) goto L_0x0198;
        r7.startLoadFromMessageId = r5;
        r13 = r12.size();
        r22 = 1;
        r13 = r13 + -1;
        if (r13 <= 0) goto L_0x0198;
        r22 = r12.get(r13);
        r35 = r5;
        r5 = r22;
        r5 = (org.telegram.messenger.MessageObject) r5;
        r36 = r14;
        r14 = r5.type;
        if (r14 >= 0) goto L_0x0191;
        r14 = r5.getId();
        r15 = r7.startLoadFromMessageId;
        if (r14 != r15) goto L_0x0191;
        r14 = r13 + -1;
        r14 = r12.get(r14);
        r14 = (org.telegram.messenger.MessageObject) r14;
        r14 = r14.getId();
        r7.startLoadFromMessageId = r14;
        goto L_0x019c;
        r13 = r13 + -1;
        r5 = r35;
        r14 = r36;
        goto L_0x0168;
        r35 = r5;
        r36 = r14;
        r5 = 0;
        r13 = 0;
        if (r6 == 0) goto L_0x01d3;
        r14 = 5;
        r15 = r9[r14];
        r15 = (java.lang.Integer) r15;
        r14 = r15.intValue();
        r7.last_message_id = r14;
        r14 = 3;
        if (r3 != r14) goto L_0x01c7;
        r14 = r7.loadingFromOldPosition;
        if (r14 == 0) goto L_0x01c3;
        r14 = 6;
        r15 = r9[r14];
        r15 = (java.lang.Integer) r15;
        r13 = r15.intValue();
        if (r13 == 0) goto L_0x01bf;
        r7.createUnreadMessageAfterId = r6;
        r14 = 0;
        r7.loadingFromOldPosition = r14;
        goto L_0x01c4;
        r14 = 0;
        r7.first_unread_id = r14;
        goto L_0x01e8;
        r7.first_unread_id = r6;
        r14 = 6;
        r15 = r9[r14];
        r15 = (java.lang.Integer) r15;
        r13 = r15.intValue();
        goto L_0x01e8;
        r14 = r7.startLoadFromMessageId;
        if (r14 == 0) goto L_0x01e8;
        r14 = 3;
        if (r3 == r14) goto L_0x01dd;
        r14 = 4;
        if (r3 != r14) goto L_0x01e8;
        r14 = 5;
        r15 = r9[r14];
        r15 = (java.lang.Integer) r15;
        r14 = r15.intValue();
        r7.last_message_id = r14;
        r14 = 0;
        if (r3 == 0) goto L_0x01f9;
        r15 = r7.startLoadFromMessageId;
        if (r15 != 0) goto L_0x01f3;
        r15 = r7.last_message_id;
        if (r15 == 0) goto L_0x01f9;
        r15 = r7.forwardEndReached;
        r22 = 0;
        r15[r1] = r22;
        r15 = 1;
        if (r3 == r15) goto L_0x0206;
        r15 = 3;
        if (r3 != r15) goto L_0x0200;
        goto L_0x0206;
        r39 = r5;
        r40 = r6;
        r15 = 1;
        goto L_0x0224;
        r15 = 1;
        if (r1 != r15) goto L_0x0220;
        r39 = r5;
        r5 = r7.endReached;
        r40 = r6;
        r6 = r7.cacheEndReached;
        r22 = 0;
        r6[r22] = r15;
        r5[r22] = r15;
        r5 = r7.forwardEndReached;
        r5[r22] = r22;
        r5 = r7.minMessageId;
        r5[r22] = r22;
        goto L_0x0224;
        r39 = r5;
        r40 = r6;
        r5 = r7.loadsCount;
        if (r5 != r15) goto L_0x0235;
        r5 = r12.size();
        r6 = 20;
        if (r5 <= r6) goto L_0x0235;
        r5 = r7.loadsCount;
        r5 = r5 + r15;
        r7.loadsCount = r5;
        r5 = r7.firstLoading;
        if (r5 == 0) goto L_0x028f;
        r5 = r7.forwardEndReached;
        r5 = r5[r1];
        if (r5 != 0) goto L_0x0284;
        r5 = r7.messages;
        r5.clear();
        r5 = r7.messagesByDays;
        r5.clear();
        r5 = r7.groupedMessagesMap;
        r5.clear();
        r5 = 0;
        r6 = 2;
        if (r5 >= r6) goto L_0x0284;
        r6 = r7.messagesDict;
        r6 = r6[r5];
        r6.clear();
        r6 = r7.currentEncryptedChat;
        if (r6 != 0) goto L_0x026b;
        r6 = r7.maxMessageId;
        r15 = 2147483647; // 0x7fffffff float:NaN double:1.060997895E-314;
        r6[r5] = r15;
        r6 = r7.minMessageId;
        r21 = -2147483648; // 0xffffffff80000000 float:-0.0 double:NaN;
        r6[r5] = r21;
        goto L_0x0278;
        r15 = 2147483647; // 0x7fffffff float:NaN double:1.060997895E-314;
        r21 = -2147483648; // 0xffffffff80000000 float:-0.0 double:NaN;
        r6 = r7.maxMessageId;
        r6[r5] = r21;
        r6 = r7.minMessageId;
        r6[r5] = r15;
        r6 = r7.maxDate;
        r6[r5] = r21;
        r6 = r7.minDate;
        r15 = 0;
        r6[r5] = r15;
        r5 = r5 + 1;
        goto L_0x024f;
        r15 = 0;
        r7.firstLoading = r15;
        r5 = new org.telegram.ui.ChatActivity$83;
        r5.<init>();
        org.telegram.messenger.AndroidUtilities.runOnUIThread(r5);
        r5 = 1;
        if (r3 != r5) goto L_0x0295;
        java.util.Collections.reverse(r12);
        r5 = r7.currentEncryptedChat;
        if (r5 != 0) goto L_0x02a7;
        r5 = r7.currentAccount;
        r5 = org.telegram.messenger.DataQuery.getInstance(r5);
        r41 = r14;
        r14 = r7.dialog_id;
        r5.loadReplyMessagesForMessages(r12, r14);
        goto L_0x02a9;
        r41 = r14;
        r5 = 0;
        r6 = 2;
        if (r3 != r6) goto L_0x02bb;
        r6 = r12.isEmpty();
        if (r6 == 0) goto L_0x02bb;
        if (r4 != 0) goto L_0x02bb;
        r6 = r7.forwardEndReached;
        r14 = 0;
        r15 = 1;
        r6[r14] = r15;
        r6 = 0;
        r14 = 0;
        r15 = org.telegram.messenger.MediaController.getInstance();
        r9 = r6;
        r8 = r14;
        r14 = r41;
        r6 = r5;
        r5 = 0;
        r42 = r13;
        r13 = r12.size();
        if (r5 >= r13) goto L_0x06fe;
        r13 = r12.get(r5);
        r13 = (org.telegram.messenger.MessageObject) r13;
        r21 = r13.getApproximateHeight();
        r6 = r6 + r21;
        r43 = r4;
        r4 = r7.currentUser;
        if (r4 == 0) goto L_0x0307;
        r4 = r7.currentUser;
        r4 = r4.self;
        if (r4 == 0) goto L_0x02ef;
        r4 = r13.messageOwner;
        r44 = r2;
        r2 = 1;
        r4.out = r2;
        goto L_0x02f1;
        r44 = r2;
        r2 = r7.currentUser;
        r2 = r2.bot;
        if (r2 == 0) goto L_0x02fd;
        r2 = r13.isOut();
        if (r2 != 0) goto L_0x0303;
        r2 = r7.currentUser;
        r2 = r2.id;
        if (r2 != r11) goto L_0x0309;
        r13.setIsRead();
        goto L_0x0309;
        r44 = r2;
        r2 = r7.messagesDict;
        r2 = r2[r1];
        r4 = r13.getId();
        r2 = r2.indexOfKey(r4);
        if (r2 < 0) goto L_0x0321;
        r46 = r1;
        r4 = r5;
        r48 = r10;
        r45 = r11;
        goto L_0x06ee;
        r2 = r15.isPlayingMessage(r13);
        if (r2 == 0) goto L_0x0337;
        r2 = r15.getPlayingMessageObject();
        r4 = r2.audioProgress;
        r13.audioProgress = r4;
        r4 = r2.audioProgressSec;
        r13.audioProgressSec = r4;
        r4 = r2.audioPlayerDuration;
        r13.audioPlayerDuration = r4;
        if (r1 != 0) goto L_0x0350;
        r2 = r7.currentChat;
        r2 = org.telegram.messenger.ChatObject.isChannel(r2);
        if (r2 == 0) goto L_0x0350;
        r2 = r13.getId();
        r4 = 1;
        if (r2 != r4) goto L_0x0350;
        r2 = r7.endReached;
        r2[r1] = r4;
        r2 = r7.cacheEndReached;
        r2[r1] = r4;
        r2 = r13.getId();
        if (r2 <= 0) goto L_0x0379;
        r2 = r7.maxMessageId;
        r4 = r13.getId();
        r45 = r11;
        r11 = r7.maxMessageId;
        r11 = r11[r1];
        r4 = java.lang.Math.min(r4, r11);
        r2[r1] = r4;
        r2 = r7.minMessageId;
        r4 = r13.getId();
        r11 = r7.minMessageId;
        r11 = r11[r1];
        r4 = java.lang.Math.max(r4, r11);
        r2[r1] = r4;
        goto L_0x039f;
        r45 = r11;
        r2 = r7.currentEncryptedChat;
        if (r2 == 0) goto L_0x039f;
        r2 = r7.maxMessageId;
        r4 = r13.getId();
        r11 = r7.maxMessageId;
        r11 = r11[r1];
        r4 = java.lang.Math.max(r4, r11);
        r2[r1] = r4;
        r2 = r7.minMessageId;
        r4 = r13.getId();
        r11 = r7.minMessageId;
        r11 = r11[r1];
        r4 = java.lang.Math.min(r4, r11);
        r2[r1] = r4;
        r2 = r13.messageOwner;
        r2 = r2.date;
        if (r2 == 0) goto L_0x03cd;
        r2 = r7.maxDate;
        r4 = r7.maxDate;
        r4 = r4[r1];
        r11 = r13.messageOwner;
        r11 = r11.date;
        r4 = java.lang.Math.max(r4, r11);
        r2[r1] = r4;
        r2 = r7.minDate;
        r2 = r2[r1];
        if (r2 == 0) goto L_0x03c5;
        r2 = r13.messageOwner;
        r2 = r2.date;
        r4 = r7.minDate;
        r4 = r4[r1];
        if (r2 >= r4) goto L_0x03cd;
        r2 = r7.minDate;
        r4 = r13.messageOwner;
        r4 = r4.date;
        r2[r1] = r4;
        r2 = r13.getId();
        r4 = r7.last_message_id;
        if (r2 != r4) goto L_0x03db;
        r2 = r7.forwardEndReached;
        r4 = 1;
        r2[r1] = r4;
        goto L_0x03dc;
        r4 = 1;
        r2 = r13.type;
        if (r2 < 0) goto L_0x06e9;
        if (r1 != r4) goto L_0x03f2;
        r2 = r13.messageOwner;
        r2 = r2.action;
        r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatMigrateTo;
        if (r2 == 0) goto L_0x03f2;
        r46 = r1;
        r4 = r5;
        r48 = r10;
        goto L_0x06ee;
        r2 = r7.needAnimateToMessage;
        if (r2 == 0) goto L_0x0417;
        r2 = r7.needAnimateToMessage;
        r2 = r2.getId();
        r4 = r13.getId();
        if (r2 != r4) goto L_0x0417;
        r2 = r13.getId();
        if (r2 >= 0) goto L_0x0417;
        r2 = r13.type;
        r4 = 5;
        if (r2 != r4) goto L_0x0417;
        r13 = r7.needAnimateToMessage;
        r2 = r7.animatingMessageObjects;
        r2.add(r13);
        r2 = 0;
        r7.needAnimateToMessage = r2;
        r2 = r13.isOut();
        if (r2 != 0) goto L_0x0425;
        r2 = r13.isUnread();
        if (r2 == 0) goto L_0x0425;
        r39 = 1;
        r2 = r7.messagesDict;
        r2 = r2[r1];
        r4 = r13.getId();
        r2.put(r4, r13);
        r2 = r7.messagesByDays;
        r4 = r13.dateKey;
        r2 = r2.get(r4);
        r2 = (java.util.ArrayList) r2;
        if (r2 != 0) goto L_0x048a;
        r4 = new java.util.ArrayList;
        r4.<init>();
        r2 = r4;
        r4 = r7.messagesByDays;
        r11 = r13.dateKey;
        r4.put(r11, r2);
        r4 = new org.telegram.tgnet.TLRPC$TL_message;
        r4.<init>();
        r11 = r13.messageOwner;
        r11 = r11.date;
        r46 = r1;
        r47 = r2;
        r1 = (long) r11;
        r1 = org.telegram.messenger.LocaleController.formatDateChat(r1);
        r4.message = r1;
        r1 = 0;
        r4.id = r1;
        r2 = r13.messageOwner;
        r2 = r2.date;
        r4.date = r2;
        r2 = new org.telegram.messenger.MessageObject;
        r11 = r7.currentAccount;
        r2.<init>(r11, r4, r1);
        r1 = r2;
        r2 = 10;
        r1.type = r2;
        r2 = 1;
        r1.contentType = r2;
        r1.isDateObject = r2;
        if (r3 != r2) goto L_0x0480;
        r2 = r7.messages;
        r11 = 0;
        r2.add(r11, r1);
        goto L_0x0485;
        r2 = r7.messages;
        r2.add(r1);
        r14 = r14 + 1;
        r2 = r47;
        goto L_0x048c;
        r46 = r1;
        r1 = r13.hasValidGroupId();
        if (r1 == 0) goto L_0x055c;
        r1 = r7.groupedMessagesMap;
        r4 = r13.messageOwner;
        r48 = r10;
        r10 = r4.grouped_id;
        r1 = r1.get(r10);
        r1 = (org.telegram.messenger.MessageObject.GroupedMessages) r1;
        if (r1 == 0) goto L_0x0506;
        r4 = r7.messages;
        r4 = r4.size();
        r10 = 1;
        if (r4 <= r10) goto L_0x0506;
        if (r3 != r10) goto L_0x04b7;
        r4 = r7.messages;
        r10 = 0;
        r4 = r4.get(r10);
        r4 = (org.telegram.messenger.MessageObject) r4;
        goto L_0x04c7;
        r4 = r7.messages;
        r10 = r7.messages;
        r10 = r10.size();
        r11 = 2;
        r10 = r10 - r11;
        r4 = r4.get(r10);
        r4 = (org.telegram.messenger.MessageObject) r4;
        r10 = r4.messageOwner;
        r10 = r10.grouped_id;
        r49 = r1;
        r1 = r13.messageOwner;
        r50 = r5;
        r51 = r6;
        r5 = r1.grouped_id;
        r1 = (r10 > r5 ? 1 : (r10 == r5 ? 0 : -1));
        if (r1 != 0) goto L_0x04f0;
        r5 = r4.localGroupId;
        r10 = 0;
        r1 = (r5 > r10 ? 1 : (r5 == r10 ? 0 : -1));
        if (r1 == 0) goto L_0x050c;
        r5 = r4.localGroupId;
        r13.localGroupId = r5;
        r1 = r7.groupedMessagesMap;
        r5 = r4.localGroupId;
        r1 = r1.get(r5);
        r1 = (org.telegram.messenger.MessageObject.GroupedMessages) r1;
        goto L_0x050e;
        r1 = r4.messageOwner;
        r5 = r1.grouped_id;
        r1 = r13.messageOwner;
        r10 = r1.grouped_id;
        r1 = (r5 > r10 ? 1 : (r5 == r10 ? 0 : -1));
        if (r1 == 0) goto L_0x050c;
        r1 = org.telegram.messenger.Utilities.random;
        r5 = r1.nextLong();
        r13.localGroupId = r5;
        r1 = 0;
        goto L_0x050e;
        r49 = r1;
        r50 = r5;
        r51 = r6;
        r1 = r49;
        if (r1 != 0) goto L_0x0524;
        r4 = new org.telegram.messenger.MessageObject$GroupedMessages;
        r4.<init>();
        r1 = r4;
        r4 = r13.getGroupId();
        r1.groupId = r4;
        r4 = r7.groupedMessagesMap;
        r5 = r1.groupId;
        r4.put(r5, r1);
        goto L_0x053f;
        if (r9 == 0) goto L_0x0530;
        r4 = r13.getGroupId();
        r4 = r9.indexOfKey(r4);
        if (r4 >= 0) goto L_0x053f;
        if (r8 != 0) goto L_0x0538;
        r4 = new android.util.LongSparseArray;
        r4.<init>();
        r8 = r4;
        r4 = r13.getGroupId();
        r8.put(r4, r1);
        if (r9 != 0) goto L_0x0547;
        r4 = new android.util.LongSparseArray;
        r4.<init>();
        r9 = r4;
        r4 = r1.groupId;
        r9.put(r4, r1);
        r4 = 1;
        if (r3 != r4) goto L_0x0555;
        r4 = r1.messages;
        r4.add(r13);
        goto L_0x055b;
        r4 = r1.messages;
        r5 = 0;
        r4.add(r5, r13);
        goto L_0x0570;
        r50 = r5;
        r51 = r6;
        r48 = r10;
        r1 = r13.messageOwner;
        r4 = r1.grouped_id;
        r10 = 0;
        r1 = (r4 > r10 ? 1 : (r4 == r10 ? 0 : -1));
        if (r1 == 0) goto L_0x0570;
        r1 = r13.messageOwner;
        r1.grouped_id = r10;
        r1 = 1;
        r14 = r14 + r1;
        r2.add(r13);
        if (r3 != r1) goto L_0x057e;
        r4 = r7.messages;
        r5 = 0;
        r4.add(r5, r13);
        goto L_0x058a;
        r4 = r7.messages;
        r5 = r7.messages;
        r5 = r5.size();
        r5 = r5 - r1;
        r4.add(r5, r13);
        r4 = r7.currentEncryptedChat;
        if (r4 != 0) goto L_0x05b6;
        r4 = r7.createUnreadMessageAfterId;
        if (r4 == 0) goto L_0x05b4;
        if (r3 == r1) goto L_0x05b4;
        r5 = r50 + 1;
        r1 = r12.size();
        if (r5 >= r1) goto L_0x05b4;
        r5 = r50 + 1;
        r1 = r12.get(r5);
        r1 = (org.telegram.messenger.MessageObject) r1;
        r4 = r13.isOut();
        if (r4 != 0) goto L_0x05b2;
        r4 = r1.getId();
        r5 = r7.createUnreadMessageAfterId;
        if (r4 < r5) goto L_0x05da;
        r1 = 0;
        goto L_0x05da;
        r1 = 0;
        goto L_0x05da;
        r1 = r7.createUnreadMessageAfterId;
        if (r1 == 0) goto L_0x05d9;
        r1 = 1;
        if (r3 == r1) goto L_0x05d9;
        r5 = r50 + -1;
        if (r5 < 0) goto L_0x05d9;
        r5 = r50 + -1;
        r1 = r12.get(r5);
        r1 = (org.telegram.messenger.MessageObject) r1;
        r4 = r13.isOut();
        if (r4 != 0) goto L_0x05d7;
        r4 = r1.getId();
        r5 = r7.createUnreadMessageAfterId;
        if (r4 < r5) goto L_0x05da;
        r1 = 0;
        goto L_0x05da;
        r1 = 0;
        r4 = 2;
        if (r3 != r4) goto L_0x062b;
        r5 = r13.getId();
        r6 = r7.first_unread_id;
        if (r5 != r6) goto L_0x062b;
        r5 = org.telegram.messenger.AndroidUtilities.displaySize;
        r5 = r5.y;
        r5 = r5 / r4;
        r6 = r51;
        if (r6 > r5) goto L_0x05f5;
        r4 = r7.forwardEndReached;
        r5 = 0;
        r4 = r4[r5];
        if (r4 != 0) goto L_0x065a;
        r4 = new org.telegram.tgnet.TLRPC$TL_message;
        r4.<init>();
        r5 = "";
        r4.message = r5;
        r5 = 0;
        r4.id = r5;
        r10 = new org.telegram.messenger.MessageObject;
        r11 = r7.currentAccount;
        r10.<init>(r11, r4, r5);
        r5 = r10;
        r10 = 6;
        r5.type = r10;
        r10 = 2;
        r5.contentType = r10;
        r10 = r7.messages;
        r11 = r7.messages;
        r11 = r11.size();
        r21 = 1;
        r11 = r11 + -1;
        r10.add(r11, r5);
        r7.unreadMessageObject = r5;
        r10 = r7.unreadMessageObject;
        r7.scrollToMessage = r10;
        r10 = -10000; // 0xffffffffffffd8f0 float:NaN double:NaN;
        r7.scrollToMessagePosition = r10;
        r14 = r14 + 1;
        goto L_0x065a;
        r6 = r51;
        r4 = 3;
        if (r3 == r4) goto L_0x0633;
        r4 = 4;
        if (r3 != r4) goto L_0x065a;
        r4 = r13.getId();
        r5 = r7.startLoadFromMessageId;
        if (r4 != r5) goto L_0x065a;
        r4 = r7.needSelectFromMessageId;
        if (r4 == 0) goto L_0x0646;
        r4 = r13.getId();
        r7.highlightMessageId = r4;
        goto L_0x064b;
        r4 = 2147483647; // 0x7fffffff float:NaN double:1.060997895E-314;
        r7.highlightMessageId = r4;
        r7.scrollToMessage = r13;
        r4 = 0;
        r7.startLoadFromMessageId = r4;
        r4 = r7.scrollToMessagePosition;
        r5 = -10000; // 0xffffffffffffd8f0 float:NaN double:NaN;
        if (r4 != r5) goto L_0x065a;
        r4 = -9000; // 0xffffffffffffdcd8 float:NaN double:NaN;
        r7.scrollToMessagePosition = r4;
        r4 = 2;
        if (r3 == r4) goto L_0x06e6;
        r4 = r7.unreadMessageObject;
        if (r4 != 0) goto L_0x06e6;
        r4 = r7.createUnreadMessageAfterId;
        if (r4 == 0) goto L_0x06e6;
        r4 = r7.currentEncryptedChat;
        if (r4 != 0) goto L_0x0677;
        r4 = r13.isOut();
        if (r4 != 0) goto L_0x0677;
        r4 = r13.getId();
        r5 = r7.createUnreadMessageAfterId;
        if (r4 >= r5) goto L_0x0689;
        r4 = r7.currentEncryptedChat;
        if (r4 == 0) goto L_0x06e6;
        r4 = r13.isOut();
        if (r4 != 0) goto L_0x06e6;
        r4 = r13.getId();
        r5 = r7.createUnreadMessageAfterId;
        if (r4 > r5) goto L_0x06e6;
        r4 = 1;
        if (r3 == r4) goto L_0x069c;
        if (r1 != 0) goto L_0x069c;
        if (r1 != 0) goto L_0x06e6;
        if (r48 == 0) goto L_0x06e6;
        r5 = r12.size();
        r5 = r5 - r4;
        r4 = r50;
        if (r4 != r5) goto L_0x06ee;
        goto L_0x069e;
        r4 = r50;
        r5 = new org.telegram.tgnet.TLRPC$TL_message;
        r5.<init>();
        r10 = "";
        r5.message = r10;
        r10 = 0;
        r5.id = r10;
        r11 = new org.telegram.messenger.MessageObject;
        r52 = r1;
        r1 = r7.currentAccount;
        r11.<init>(r1, r5, r10);
        r1 = r11;
        r10 = 6;
        r1.type = r10;
        r10 = 2;
        r1.contentType = r10;
        r10 = 1;
        if (r3 != r10) goto L_0x06c5;
        r11 = r7.messages;
        r11.add(r10, r1);
        r53 = r2;
        goto L_0x06d3;
        r11 = r7.messages;
        r53 = r2;
        r2 = r7.messages;
        r2 = r2.size();
        r2 = r2 - r10;
        r11.add(r2, r1);
        r7.unreadMessageObject = r1;
        r2 = 3;
        if (r3 != r2) goto L_0x06e3;
        r2 = r7.unreadMessageObject;
        r7.scrollToMessage = r2;
        r2 = 0;
        r7.startLoadFromMessageId = r2;
        r2 = -9000; // 0xffffffffffffdcd8 float:NaN double:NaN;
        r7.scrollToMessagePosition = r2;
        r14 = r14 + 1;
        goto L_0x06ee;
        r4 = r50;
        goto L_0x06ee;
        r46 = r1;
        r4 = r5;
        r48 = r10;
        r5 = r4 + 1;
        r13 = r42;
        r4 = r43;
        r2 = r44;
        r11 = r45;
        r1 = r46;
        r10 = r48;
        goto L_0x02c7;
        r46 = r1;
        r44 = r2;
        r43 = r4;
        r48 = r10;
        r45 = r11;
        if (r48 == 0) goto L_0x070d;
        r1 = 0;
        r7.createUnreadMessageAfterId = r1;
        if (r3 != 0) goto L_0x0717;
        if (r14 != 0) goto L_0x0717;
        r1 = r7.loadsCount;
        r2 = 1;
        r1 = r1 - r2;
        r7.loadsCount = r1;
        if (r9 == 0) goto L_0x0766;
        r1 = 0;
        r2 = r9.size();
        if (r1 >= r2) goto L_0x0766;
        r2 = r9.valueAt(r1);
        r2 = (org.telegram.messenger.MessageObject.GroupedMessages) r2;
        r2.calculate();
        r4 = r7.chatAdapter;
        if (r4 == 0) goto L_0x0763;
        if (r8 == 0) goto L_0x0763;
        r4 = r9.keyAt(r1);
        r4 = r8.indexOfKey(r4);
        if (r4 < 0) goto L_0x0763;
        r4 = r2.messages;
        r5 = r2.messages;
        r5 = r5.size();
        r10 = 1;
        r5 = r5 - r10;
        r4 = r4.get(r5);
        r4 = (org.telegram.messenger.MessageObject) r4;
        r5 = r7.messages;
        r5 = r5.indexOf(r4);
        if (r5 < 0) goto L_0x0763;
        r10 = r7.chatAdapter;
        r11 = r7.chatAdapter;
        r11 = r11.messagesStartRow;
        r11 = r11 + r5;
        r13 = r2.messages;
        r13 = r13.size();
        r10.notifyItemRangeChanged(r11, r13);
        r1 = r1 + 1;
        goto L_0x071a;
        r1 = r7.forwardEndReached;
        r1 = r1[r46];
        if (r1 == 0) goto L_0x0779;
        r1 = r46;
        r2 = 1;
        if (r1 == r2) goto L_0x077c;
        r4 = 0;
        r7.first_unread_id = r4;
        r7.last_message_id = r4;
        r7.createUnreadMessageAfterId = r4;
        goto L_0x077c;
        r1 = r46;
        r2 = 1;
        if (r3 != r2) goto L_0x0800;
        r2 = 0;
        r4 = r12.size();
        r5 = r44;
        if (r4 == r5) goto L_0x07b1;
        if (r43 == 0) goto L_0x0793;
        r4 = r7.currentEncryptedChat;
        if (r4 != 0) goto L_0x0793;
        r4 = r7.forwardEndReached;
        r4 = r4[r1];
        if (r4 == 0) goto L_0x07b1;
        r4 = r7.forwardEndReached;
        r10 = 1;
        r4[r1] = r10;
        if (r1 == r10) goto L_0x07ae;
        r4 = 0;
        r7.first_unread_id = r4;
        r7.last_message_id = r4;
        r7.createUnreadMessageAfterId = r4;
        r4 = r7.chatAdapter;
        r10 = r7.chatAdapter;
        r10 = r10.loadingDownRow;
        r4.notifyItemRemoved(r10);
        r2 = r2 + 1;
        r4 = 0;
        r7.startLoadFromMessageId = r4;
        if (r14 <= 0) goto L_0x07f2;
        r4 = r7.chatLayoutManager;
        r4 = r4.findFirstVisibleItemPosition();
        r10 = 0;
        if (r4 != 0) goto L_0x07be;
        r4 = r4 + 1;
        r11 = r7.chatLayoutManager;
        r11 = r11.findViewByPosition(r4);
        if (r11 != 0) goto L_0x07ca;
        r54 = r6;
        r13 = 0;
        goto L_0x07df;
        r13 = r7.chatListView;
        r13 = r13.getMeasuredHeight();
        r16 = r11.getBottom();
        r13 = r13 - r16;
        r54 = r6;
        r6 = r7.chatListView;
        r6 = r6.getPaddingBottom();
        r13 = r13 - r6;
        r6 = r13;
        r10 = r7.chatAdapter;
        r13 = 1;
        r10.notifyItemRangeInserted(r13, r14);
        r10 = -1;
        if (r4 == r10) goto L_0x07f4;
        r10 = r7.chatLayoutManager;
        r13 = r4 + r14;
        r13 = r13 - r2;
        r10.scrollToPositionWithOffset(r13, r6);
        goto L_0x07f4;
        r54 = r6;
        r4 = 0;
        r7.loadingForward = r4;
        r55 = r3;
        r2 = r33;
        r4 = r42;
        goto L_0x0a27;
        r54 = r6;
        r5 = r44;
        r2 = r12.size();
        if (r2 >= r5) goto L_0x0840;
        r2 = 3;
        if (r3 == r2) goto L_0x0840;
        r2 = 4;
        if (r3 == r2) goto L_0x0840;
        if (r43 == 0) goto L_0x082a;
        r2 = r7.currentEncryptedChat;
        if (r2 != 0) goto L_0x081d;
        r2 = r7.isBroadcast;
        if (r2 == 0) goto L_0x081b;
        goto L_0x081d;
        r4 = 1;
        goto L_0x0822;
        r2 = r7.endReached;
        r4 = 1;
        r2[r1] = r4;
        r2 = 2;
        if (r3 == r2) goto L_0x0840;
        r6 = r7.cacheEndReached;
        r6[r1] = r4;
        goto L_0x0840;
        r2 = 2;
        if (r3 != r2) goto L_0x083b;
        r2 = r12.size();
        if (r2 != 0) goto L_0x0840;
        r2 = r7.messages;
        r2 = r2.isEmpty();
        if (r2 == 0) goto L_0x0840;
        r2 = r7.endReached;
        r4 = 1;
        r2[r1] = r4;
        r2 = 0;
        r7.loading = r2;
        r2 = r7.chatListView;
        if (r2 == 0) goto L_0x0a18;
        r2 = r7.first;
        if (r2 != 0) goto L_0x0901;
        r2 = r7.scrollToTopOnResume;
        if (r2 != 0) goto L_0x0901;
        r2 = r7.forceScrollToTop;
        if (r2 == 0) goto L_0x0857;
        r55 = r3;
        goto L_0x0903;
        if (r14 == 0) goto L_0x08db;
        r2 = 0;
        r4 = r7.endReached;
        r4 = r4[r1];
        if (r4 == 0) goto L_0x0883;
        if (r1 != 0) goto L_0x086d;
        r10 = r7.mergeDialogId;
        r16 = 0;
        r4 = (r10 > r16 ? 1 : (r10 == r16 ? 0 : -1));
        if (r4 == 0) goto L_0x086b;
        goto L_0x086d;
        r4 = 1;
        goto L_0x0870;
        r4 = 1;
        if (r1 != r4) goto L_0x0883;
        r2 = 1;
        r6 = r7.chatAdapter;
        r10 = r7.chatAdapter;
        r10 = r10.loadingUpRow;
        r10 = r10 - r4;
        r4 = 2;
        r6.notifyItemRangeChanged(r10, r4);
        r4 = r7.chatAdapter;
        r4.updateRows();
        r4 = r7.chatLayoutManager;
        r4 = r4.findFirstVisibleItemPosition();
        r6 = r7.chatLayoutManager;
        r6 = r6.findViewByPosition(r4);
        if (r6 != 0) goto L_0x0893;
        r13 = 0;
        goto L_0x08a6;
        r10 = r7.chatListView;
        r10 = r10.getMeasuredHeight();
        r11 = r6.getBottom();
        r10 = r10 - r11;
        r11 = r7.chatListView;
        r11 = r11.getPaddingBottom();
        r13 = r10 - r11;
        r10 = r13;
        if (r2 == 0) goto L_0x08ab;
        r11 = 1;
        goto L_0x08ac;
        r11 = 0;
        r11 = r14 - r11;
        if (r11 <= 0) goto L_0x08d0;
        r11 = r7.chatAdapter;
        r11 = r11.messagesEndRow;
        r13 = r7.chatAdapter;
        r55 = r3;
        r3 = r7.chatAdapter;
        r3 = r3.loadingUpRow;
        r13.notifyItemChanged(r3);
        r3 = r7.chatAdapter;
        if (r2 == 0) goto L_0x08c9;
        r13 = 1;
        goto L_0x08ca;
        r13 = 0;
        r13 = r14 - r13;
        r3.notifyItemRangeInserted(r11, r13);
        goto L_0x08d2;
        r55 = r3;
        r3 = -1;
        if (r4 == r3) goto L_0x08da;
        r3 = r7.chatLayoutManager;
        r3.scrollToPositionWithOffset(r4, r10);
        goto L_0x08fb;
        r55 = r3;
        r2 = r7.endReached;
        r2 = r2[r1];
        if (r2 == 0) goto L_0x08fb;
        if (r1 != 0) goto L_0x08ed;
        r2 = r7.mergeDialogId;
        r10 = 0;
        r4 = (r2 > r10 ? 1 : (r2 == r10 ? 0 : -1));
        if (r4 == 0) goto L_0x08f0;
        r2 = 1;
        if (r1 != r2) goto L_0x08fb;
        r2 = r7.chatAdapter;
        r3 = r7.chatAdapter;
        r3 = r3.loadingUpRow;
        r2.notifyItemRemoved(r3);
        r2 = r33;
        r4 = r42;
        goto L_0x09fb;
        r55 = r3;
        r2 = 0;
        r7.forceScrollToTop = r2;
        r2 = r7.chatAdapter;
        r2.notifyDataSetChanged();
        r2 = r7.scrollToMessage;
        if (r2 == 0) goto L_0x09d3;
        r2 = 1;
        r3 = r7.startLoadFromMessageOffset;
        r4 = 2147483647; // 0x7fffffff float:NaN double:1.060997895E-314;
        if (r3 == r4) goto L_0x0924;
        r3 = r7.startLoadFromMessageOffset;
        r3 = -r3;
        r6 = r7.chatListView;
        r6 = r6.getPaddingBottom();
        r3 = r3 - r6;
        r7.startLoadFromMessageOffset = r4;
        goto L_0x0943;
        r3 = r7.scrollToMessagePosition;
        r4 = -9000; // 0xffffffffffffdcd8 float:NaN double:NaN;
        if (r3 != r4) goto L_0x0932;
        r3 = r7.scrollToMessage;
        r3 = r7.getScrollOffsetForMessage(r3);
        r2 = 0;
        goto L_0x0943;
        r3 = r7.scrollToMessagePosition;
        r4 = -10000; // 0xffffffffffffd8f0 float:NaN double:NaN;
        if (r3 != r4) goto L_0x0941;
        r3 = 1093664768; // 0x41300000 float:11.0 double:5.4034219E-315;
        r3 = org.telegram.messenger.AndroidUtilities.dp(r3);
        r3 = -r3;
        r2 = 0;
        goto L_0x0943;
        r3 = r7.scrollToMessagePosition;
        r4 = r7.messages;
        r4 = r4.isEmpty();
        if (r4 != 0) goto L_0x0990;
        r4 = r7.messages;
        r6 = r7.messages;
        r6 = r6.size();
        r10 = 1;
        r6 = r6 - r10;
        r4 = r4.get(r6);
        r6 = r7.scrollToMessage;
        if (r4 == r6) goto L_0x0985;
        r4 = r7.messages;
        r6 = r7.messages;
        r6 = r6.size();
        r10 = 2;
        r6 = r6 - r10;
        r4 = r4.get(r6);
        r6 = r7.scrollToMessage;
        if (r4 != r6) goto L_0x0970;
        goto L_0x0985;
        r4 = r7.chatLayoutManager;
        r6 = r7.chatAdapter;
        r6 = r6.messagesStartRow;
        r10 = r7.messages;
        r11 = r7.scrollToMessage;
        r10 = r10.indexOf(r11);
        r6 = r6 + r10;
        r4.scrollToPositionWithOffset(r6, r3, r2);
        goto L_0x0990;
        r4 = r7.chatLayoutManager;
        r6 = r7.chatAdapter;
        r6 = r6.loadingUpRow;
        r4.scrollToPositionWithOffset(r6, r3, r2);
        r4 = r7.chatListView;
        r4.invalidate();
        r4 = r7.scrollToMessagePosition;
        r6 = -10000; // 0xffffffffffffd8f0 float:NaN double:NaN;
        if (r4 == r6) goto L_0x09a5;
        r4 = r7.scrollToMessagePosition;
        r6 = -9000; // 0xffffffffffffdcd8 float:NaN double:NaN;
        if (r4 != r6) goto L_0x09a2;
        goto L_0x09a5;
        r4 = r42;
        goto L_0x09cb;
        r4 = 1;
        r7.showPagedownButton(r4, r4);
        if (r42 == 0) goto L_0x09c9;
        r6 = r7.pagedownButtonCounter;
        r10 = 0;
        r6.setVisibility(r10);
        r6 = r7.pagedownButtonCounter;
        r11 = "%d";
        r13 = new java.lang.Object[r4];
        r4 = r42;
        r7.newUnreadMessageCount = r4;
        r17 = java.lang.Integer.valueOf(r4);
        r13[r10] = r17;
        r10 = java.lang.String.format(r11, r13);
        r6.setText(r10);
        goto L_0x09cb;
        r4 = r42;
        r6 = -10000; // 0xffffffffffffd8f0 float:NaN double:NaN;
        r7.scrollToMessagePosition = r6;
        r6 = 0;
        r7.scrollToMessage = r6;
        goto L_0x09d8;
        r4 = r42;
        r80.moveScrollToLastMessage();
        r2 = r33;
        if (r2 == 0) goto L_0x09fb;
        r3 = 1;
        r7.showMentiondownButton(r3, r3);
        r6 = r7.mentiondownButtonCounter;
        r10 = 0;
        r6.setVisibility(r10);
        r6 = r7.mentiondownButtonCounter;
        r11 = "%d";
        r13 = new java.lang.Object[r3];
        r7.newMentionsCount = r2;
        r3 = java.lang.Integer.valueOf(r2);
        r13[r10] = r3;
        r3 = java.lang.String.format(r11, r13);
        r6.setText(r3);
        r3 = r7.paused;
        if (r3 == 0) goto L_0x0a08;
        r3 = 1;
        r7.scrollToTopOnResume = r3;
        r6 = r7.scrollToMessage;
        if (r6 == 0) goto L_0x0a08;
        r7.scrollToTopUnReadOnResume = r3;
        r3 = r7.first;
        if (r3 == 0) goto L_0x0a27;
        r3 = r7.chatListView;
        if (r3 == 0) goto L_0x0a27;
        r3 = r7.chatListView;
        r6 = r7.emptyViewContainer;
        r3.setEmptyView(r6);
        goto L_0x0a27;
        r55 = r3;
        r2 = r33;
        r4 = r42;
        r3 = 1;
        r7.scrollToTopOnResume = r3;
        r6 = r7.scrollToMessage;
        if (r6 == 0) goto L_0x0a27;
        r7.scrollToTopUnReadOnResume = r3;
        r3 = r7.first;
        if (r3 == 0) goto L_0x0a36;
        r3 = r7.messages;
        r3 = r3.size();
        if (r3 <= 0) goto L_0x0a36;
        r3 = 0;
        r7.first = r3;
        r3 = r7.messages;
        r3 = r3.isEmpty();
        if (r3 == 0) goto L_0x0a57;
        r3 = r7.currentEncryptedChat;
        if (r3 != 0) goto L_0x0a57;
        r3 = r7.currentUser;
        if (r3 == 0) goto L_0x0a57;
        r3 = r7.currentUser;
        r3 = r3.bot;
        if (r3 == 0) goto L_0x0a57;
        r3 = r7.botUser;
        if (r3 != 0) goto L_0x0a57;
        r3 = "";
        r7.botUser = r3;
        r80.updateBottomOverlay();
        if (r14 != 0) goto L_0x0a7c;
        r3 = r7.currentEncryptedChat;
        if (r3 == 0) goto L_0x0a7c;
        r3 = r7.endReached;
        r6 = 0;
        r3 = r3[r6];
        if (r3 != 0) goto L_0x0a7c;
        r3 = 1;
        r7.first = r3;
        r3 = r7.chatListView;
        if (r3 == 0) goto L_0x0a71;
        r3 = r7.chatListView;
        r6 = 0;
        r3.setEmptyView(r6);
        r3 = r7.emptyViewContainer;
        if (r3 == 0) goto L_0x0a86;
        r3 = r7.emptyViewContainer;
        r6 = 4;
        r3.setVisibility(r6);
        goto L_0x0a86;
        r6 = 4;
        r3 = r7.progressView;
        if (r3 == 0) goto L_0x0a86;
        r3 = r7.progressView;
        r3.setVisibility(r6);
        r3 = 0;
        r7.checkScrollForLoad(r3);
        r8 = r81;
        r9 = r83;
        goto L_0x2bd8;
    L_0x0a91:
        r1 = org.telegram.messenger.NotificationCenter.emojiDidLoaded;
        r8 = r81;
        if (r8 != r1) goto L_0x0ac5;
        r1 = r7.chatListView;
        if (r1 == 0) goto L_0x0aa0;
        r1 = r7.chatListView;
        r1.invalidateViews();
        r1 = r7.replyObjectTextView;
        if (r1 == 0) goto L_0x0aa9;
        r1 = r7.replyObjectTextView;
        r1.invalidate();
        r1 = r7.alertTextView;
        if (r1 == 0) goto L_0x0ab2;
        r1 = r7.alertTextView;
        r1.invalidate();
        r1 = r7.pinnedMessageTextView;
        if (r1 == 0) goto L_0x0abb;
        r1 = r7.pinnedMessageTextView;
        r1.invalidate();
        r1 = r7.mentionListView;
        if (r1 == 0) goto L_0x0a8d;
        r1 = r7.mentionListView;
        r1.invalidateViews();
        goto L_0x0a8d;
        r1 = org.telegram.messenger.NotificationCenter.updateInterfaces;
        if (r8 != r1) goto L_0x0b8a;
        r1 = 0;
        r9 = r83;
        r1 = r9[r1];
        r1 = (java.lang.Integer) r1;
        r1 = r1.intValue();
        r2 = r1 & 1;
        if (r2 != 0) goto L_0x0adc;
        r2 = r1 & 16;
        if (r2 == 0) goto L_0x0b14;
        r2 = r7.currentChat;
        if (r2 == 0) goto L_0x0af7;
        r2 = r7.currentAccount;
        r2 = org.telegram.messenger.MessagesController.getInstance(r2);
        r3 = r7.currentChat;
        r3 = r3.id;
        r3 = java.lang.Integer.valueOf(r3);
        r2 = r2.getChat(r3);
        if (r2 == 0) goto L_0x0af6;
        r7.currentChat = r2;
        goto L_0x0b11;
        r2 = r7.currentUser;
        if (r2 == 0) goto L_0x0b11;
        r2 = r7.currentAccount;
        r2 = org.telegram.messenger.MessagesController.getInstance(r2);
        r3 = r7.currentUser;
        r3 = r3.id;
        r3 = java.lang.Integer.valueOf(r3);
        r2 = r2.getUser(r3);
        if (r2 == 0) goto L_0x0b11;
        r7.currentUser = r2;
        r80.updateTitle();
        r2 = 0;
        r3 = r1 & 32;
        if (r3 != 0) goto L_0x0b1d;
        r3 = r1 & 4;
        if (r3 == 0) goto L_0x0b2b;
        r3 = r7.currentChat;
        if (r3 == 0) goto L_0x0b2a;
        r3 = r7.avatarContainer;
        if (r3 == 0) goto L_0x0b2a;
        r3 = r7.avatarContainer;
        r3.updateOnlineCount();
        r2 = 1;
        r3 = r1 & 2;
        if (r3 != 0) goto L_0x0b37;
        r3 = r1 & 8;
        if (r3 != 0) goto L_0x0b37;
        r3 = r1 & 1;
        if (r3 == 0) goto L_0x0b3d;
        r80.checkAndUpdateAvatar();
        r80.updateVisibleRows();
        r3 = r1 & 64;
        if (r3 == 0) goto L_0x0b42;
        r2 = 1;
        r3 = r1 & 8192;
        if (r3 == 0) goto L_0x0b76;
        r3 = r7.currentChat;
        r3 = org.telegram.messenger.ChatObject.isChannel(r3);
        if (r3 == 0) goto L_0x0b76;
        r3 = r7.currentAccount;
        r3 = org.telegram.messenger.MessagesController.getInstance(r3);
        r4 = r7.currentChat;
        r4 = r4.id;
        r4 = java.lang.Integer.valueOf(r4);
        r3 = r3.getChat(r4);
        if (r3 != 0) goto L_0x0b63;
        return;
        r7.currentChat = r3;
        r2 = 1;
        r80.updateBottomOverlay();
        r4 = r7.chatActivityEnterView;
        if (r4 == 0) goto L_0x0b76;
        r4 = r7.chatActivityEnterView;
        r5 = r7.dialog_id;
        r10 = r7.currentAccount;
        r4.setDialogId(r5, r10);
        r3 = r7.avatarContainer;
        if (r3 == 0) goto L_0x0b81;
        if (r2 == 0) goto L_0x0b81;
        r3 = r7.avatarContainer;
        r3.updateSubtitle();
        r3 = r1 & 128;
        if (r3 == 0) goto L_0x0b88;
        r80.updateContactStatus();
        goto L_0x2bd8;
        r9 = r83;
        r1 = org.telegram.messenger.NotificationCenter.didReceivedNewMessages;
        if (r8 != r1) goto L_0x14ce;
        r1 = 0;
        r2 = r9[r1];
        r2 = (java.lang.Long) r2;
        r1 = r2.longValue();
        r3 = r7.dialog_id;
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 != 0) goto L_0x14cc;
        r3 = r7.currentAccount;
        r3 = org.telegram.messenger.UserConfig.getInstance(r3);
        r3 = r3.getClientUserId();
        r4 = 0;
        r5 = 0;
        r6 = 1;
        r10 = r9[r6];
        r10 = (java.util.ArrayList) r10;
        r11 = r7.currentEncryptedChat;
        if (r11 == 0) goto L_0x0c4c;
        r11 = r10.size();
        if (r11 != r6) goto L_0x0c4c;
        r6 = 0;
        r11 = r10.get(r6);
        r6 = r11;
        r6 = (org.telegram.messenger.MessageObject) r6;
        r11 = r7.currentEncryptedChat;
        if (r11 == 0) goto L_0x0c4c;
        r11 = r6.isOut();
        if (r11 == 0) goto L_0x0c4c;
        r11 = r6.messageOwner;
        r11 = r11.action;
        if (r11 == 0) goto L_0x0c4c;
        r11 = r6.messageOwner;
        r11 = r11.action;
        r11 = r11 instanceof org.telegram.tgnet.TLRPC.TL_messageEncryptedAction;
        if (r11 == 0) goto L_0x0c4c;
        r11 = r6.messageOwner;
        r11 = r11.action;
        r11 = r11.encryptedAction;
        r11 = r11 instanceof org.telegram.tgnet.TLRPC.TL_decryptedMessageActionSetMessageTTL;
        if (r11 == 0) goto L_0x0c4c;
        r11 = r80.getParentActivity();
        if (r11 == 0) goto L_0x0c4c;
        r11 = r7.currentEncryptedChat;
        r11 = r11.layer;
        r11 = org.telegram.messenger.AndroidUtilities.getPeerLayerVersion(r11);
        r12 = 17;
        if (r11 >= r12) goto L_0x0c4c;
        r11 = r7.currentEncryptedChat;
        r11 = r11.ttl;
        if (r11 <= 0) goto L_0x0c4c;
        r11 = r7.currentEncryptedChat;
        r11 = r11.ttl;
        r12 = 60;
        if (r11 > r12) goto L_0x0c4c;
        r11 = new org.telegram.ui.ActionBar.AlertDialog$Builder;
        r12 = r80.getParentActivity();
        r11.<init>(r12);
        r12 = "AppName";
        r13 = 2131492981; // 0x7f0c0075 float:1.860943E38 double:1.0530974563E-314;
        r12 = org.telegram.messenger.LocaleController.getString(r12, r13);
        r11.setTitle(r12);
        r12 = "OK";
        r13 = 2131494028; // 0x7f0c048c float:1.8611553E38 double:1.0530979736E-314;
        r12 = org.telegram.messenger.LocaleController.getString(r12, r13);
        r13 = 0;
        r11.setPositiveButton(r12, r13);
        r12 = "CompatibilityChat";
        r13 = 2131493280; // 0x7f0c01a0 float:1.8610036E38 double:1.053097604E-314;
        r14 = 2;
        r15 = new java.lang.Object[r14];
        r14 = r7.currentUser;
        r14 = r14.first_name;
        r22 = 0;
        r15[r22] = r14;
        r14 = r7.currentUser;
        r14 = r14.first_name;
        r22 = 1;
        r15[r22] = r14;
        r12 = org.telegram.messenger.LocaleController.formatString(r12, r13, r15);
        r11.setMessage(r12);
        r12 = r11.create();
        r7.showDialog(r12);
        r6 = r7.currentChat;
        if (r6 != 0) goto L_0x0c5d;
        r11 = r7.inlineReturn;
        r13 = 0;
        r6 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1));
        if (r6 == 0) goto L_0x0c59;
        goto L_0x0c5d;
        r56 = r1;
        goto L_0x0d75;
        r6 = 0;
        r11 = r10.size();
        if (r6 >= r11) goto L_0x0d73;
        r11 = r10.get(r6);
        r11 = (org.telegram.messenger.MessageObject) r11;
        r12 = r7.currentChat;
        if (r12 == 0) goto L_0x0d1a;
        r12 = r11.messageOwner;
        r12 = r12.action;
        r12 = r12 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatDeleteUser;
        if (r12 == 0) goto L_0x0c7e;
        r12 = r11.messageOwner;
        r12 = r12.action;
        r12 = r12.user_id;
        if (r12 == r3) goto L_0x0c96;
        r12 = r11.messageOwner;
        r12 = r12.action;
        r12 = r12 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatAddUser;
        if (r12 == 0) goto L_0x0cbc;
        r12 = r11.messageOwner;
        r12 = r12.action;
        r12 = r12.users;
        r13 = java.lang.Integer.valueOf(r3);
        r12 = r12.contains(r13);
        if (r12 == 0) goto L_0x0cbc;
        r12 = r7.currentAccount;
        r12 = org.telegram.messenger.MessagesController.getInstance(r12);
        r13 = r7.currentChat;
        r13 = r13.id;
        r13 = java.lang.Integer.valueOf(r13);
        r12 = r12.getChat(r13);
        if (r12 == 0) goto L_0x0cbb;
        r7.currentChat = r12;
        r80.checkActionBarMenu();
        r80.updateBottomOverlay();
        r13 = r7.avatarContainer;
        if (r13 == 0) goto L_0x0cbb;
        r13 = r7.avatarContainer;
        r13.updateSubtitle();
        goto L_0x0d17;
        r12 = r11.messageOwner;
        r12 = r12.reply_to_msg_id;
        if (r12 == 0) goto L_0x0d17;
        r12 = r11.replyMessageObject;
        if (r12 != 0) goto L_0x0d17;
        r12 = r7.messagesDict;
        r13 = 0;
        r12 = r12[r13];
        r13 = r11.messageOwner;
        r13 = r13.reply_to_msg_id;
        r12 = r12.get(r13);
        r12 = (org.telegram.messenger.MessageObject) r12;
        r11.replyMessageObject = r12;
        r12 = r11.messageOwner;
        r12 = r12.action;
        r12 = r12 instanceof org.telegram.tgnet.TLRPC.TL_messageActionPinMessage;
        if (r12 == 0) goto L_0x0ce4;
        r12 = 0;
        r11.generatePinMessageText(r12, r12);
        goto L_0x0cfc;
        r12 = 0;
        r13 = r11.messageOwner;
        r13 = r13.action;
        r13 = r13 instanceof org.telegram.tgnet.TLRPC.TL_messageActionGameScore;
        if (r13 == 0) goto L_0x0cf1;
        r11.generateGameMessageText(r12);
        goto L_0x0cfc;
        r13 = r11.messageOwner;
        r13 = r13.action;
        r13 = r13 instanceof org.telegram.tgnet.TLRPC.TL_messageActionPaymentSent;
        if (r13 == 0) goto L_0x0cfc;
        r11.generatePaymentSentMessageText(r12);
        r12 = r11.isMegagroup();
        if (r12 == 0) goto L_0x0d17;
        r12 = r11.replyMessageObject;
        if (r12 == 0) goto L_0x0d17;
        r12 = r11.replyMessageObject;
        r12 = r12.messageOwner;
        if (r12 == 0) goto L_0x0d17;
        r12 = r11.replyMessageObject;
        r12 = r12.messageOwner;
        r13 = r12.flags;
        r14 = -2147483648; // 0xffffffff80000000 float:-0.0 double:NaN;
        r13 = r13 | r14;
        r12.flags = r13;
        r56 = r1;
        goto L_0x0d6d;
        r12 = r7.inlineReturn;
        r14 = 0;
        r22 = (r12 > r14 ? 1 : (r12 == r14 ? 0 : -1));
        if (r22 == 0) goto L_0x0d6b;
        r12 = r11.messageOwner;
        r12 = r12.reply_markup;
        if (r12 == 0) goto L_0x0d6b;
        r12 = 0;
        r13 = r11.messageOwner;
        r13 = r13.reply_markup;
        r13 = r13.rows;
        r13 = r13.size();
        if (r12 >= r13) goto L_0x0d6b;
        r13 = r11.messageOwner;
        r13 = r13.reply_markup;
        r13 = r13.rows;
        r13 = r13.get(r12);
        r13 = (org.telegram.tgnet.TLRPC.TL_keyboardButtonRow) r13;
        r14 = 0;
        r15 = r13.buttons;
        r15 = r15.size();
        if (r14 >= r15) goto L_0x0d64;
        r15 = r13.buttons;
        r15 = r15.get(r14);
        r15 = (org.telegram.tgnet.TLRPC.KeyboardButton) r15;
        r56 = r1;
        r1 = r15 instanceof org.telegram.tgnet.TLRPC.TL_keyboardButtonSwitchInline;
        if (r1 == 0) goto L_0x0d5f;
        r1 = r15;
        r1 = (org.telegram.tgnet.TLRPC.TL_keyboardButtonSwitchInline) r1;
        r7.processSwitchButton(r1);
        goto L_0x0d66;
        r14 = r14 + 1;
        r1 = r56;
        goto L_0x0d42;
        r56 = r1;
        r12 = r12 + 1;
        r1 = r56;
        goto L_0x0d29;
        r56 = r1;
        r6 = r6 + 1;
        r1 = r56;
        goto L_0x0c5e;
        r56 = r1;
        r1 = 0;
        r2 = r7.forwardEndReached;
        r6 = 0;
        r2 = r2[r6];
        if (r2 != 0) goto L_0x0f3d;
        r2 = -2147483648; // 0xffffffff80000000 float:-0.0 double:NaN;
        r6 = -2147483648; // 0xffffffff80000000 float:-0.0 double:NaN;
        r11 = r7.currentEncryptedChat;
        if (r11 == 0) goto L_0x0d88;
        r6 = 2147483647; // 0x7fffffff float:NaN double:1.060997895E-314;
        r11 = r1;
        r1 = 0;
        r12 = r10.size();
        if (r1 >= r12) goto L_0x0ee6;
        r12 = r10.get(r1);
        r12 = (org.telegram.messenger.MessageObject) r12;
        r13 = r7.currentUser;
        if (r13 == 0) goto L_0x0daf;
        r13 = r7.currentUser;
        r13 = r13.bot;
        if (r13 == 0) goto L_0x0da6;
        r13 = r12.isOut();
        if (r13 != 0) goto L_0x0dac;
        r13 = r7.currentUser;
        r13 = r13.id;
        if (r13 != r3) goto L_0x0daf;
        r12.setIsRead();
        r13 = r7.avatarContainer;
        if (r13 == 0) goto L_0x0dde;
        r13 = r7.currentEncryptedChat;
        if (r13 == 0) goto L_0x0dde;
        r13 = r12.messageOwner;
        r13 = r13.action;
        if (r13 == 0) goto L_0x0dde;
        r13 = r12.messageOwner;
        r13 = r13.action;
        r13 = r13 instanceof org.telegram.tgnet.TLRPC.TL_messageEncryptedAction;
        if (r13 == 0) goto L_0x0dde;
        r13 = r12.messageOwner;
        r13 = r13.action;
        r13 = r13.encryptedAction;
        r13 = r13 instanceof org.telegram.tgnet.TLRPC.TL_decryptedMessageActionSetMessageTTL;
        if (r13 == 0) goto L_0x0dde;
        r13 = r7.avatarContainer;
        r14 = r12.messageOwner;
        r14 = r14.action;
        r14 = r14.encryptedAction;
        r14 = (org.telegram.tgnet.TLRPC.TL_decryptedMessageActionSetMessageTTL) r14;
        r14 = r14.ttl_seconds;
        r13.setTime(r14);
        r13 = r12.messageOwner;
        r13 = r13.action;
        r13 = r13 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatMigrateTo;
        if (r13 == 0) goto L_0x0e29;
        r13 = new android.os.Bundle;
        r13.<init>();
        r14 = "chat_id";
        r15 = r12.messageOwner;
        r15 = r15.action;
        r15 = r15.channel_id;
        r13.putInt(r14, r15);
        r14 = r7.parentLayout;
        r14 = r14.fragmentsStack;
        r14 = r14.size();
        if (r14 <= 0) goto L_0x0e17;
        r14 = r7.parentLayout;
        r14 = r14.fragmentsStack;
        r15 = r7.parentLayout;
        r15 = r15.fragmentsStack;
        r15 = r15.size();
        r16 = 1;
        r15 = r15 + -1;
        r14 = r14.get(r15);
        r14 = (org.telegram.ui.ActionBar.BaseFragment) r14;
        goto L_0x0e18;
        r14 = 0;
        r15 = r12.messageOwner;
        r15 = r15.action;
        r15 = r15.channel_id;
        r58 = r4;
        r4 = new org.telegram.ui.ChatActivity$84;
        r4.<init>(r14, r13, r15);
        org.telegram.messenger.AndroidUtilities.runOnUIThread(r4);
        return;
        r58 = r4;
        r4 = r7.currentChat;
        if (r4 == 0) goto L_0x0e47;
        r4 = r7.currentChat;
        r4 = r4.megagroup;
        if (r4 == 0) goto L_0x0e47;
        r4 = r12.messageOwner;
        r4 = r4.action;
        r4 = r4 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatAddUser;
        if (r4 != 0) goto L_0x0e45;
        r4 = r12.messageOwner;
        r4 = r4.action;
        r4 = r4 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatDeleteUser;
        if (r4 == 0) goto L_0x0e47;
        r4 = 1;
        r11 = r4;
        if (r1 != 0) goto L_0x0e56;
        r4 = r12.messageOwner;
        r4 = r4.id;
        if (r4 >= 0) goto L_0x0e56;
        r4 = r12.type;
        r13 = 5;
        if (r4 != r13) goto L_0x0e56;
        r7.needAnimateToMessage = r12;
        r4 = r12.isOut();
        if (r4 == 0) goto L_0x0e67;
        r4 = r12.isSending();
        if (r4 == 0) goto L_0x0e67;
        r4 = 0;
        r7.scrollToLastMessage(r4);
        return;
        r4 = 0;
        r13 = r12.type;
        if (r13 < 0) goto L_0x0ee0;
        r13 = r7.messagesDict;
        r13 = r13[r4];
        r4 = r12.getId();
        r4 = r13.indexOfKey(r4);
        if (r4 < 0) goto L_0x0e7b;
        goto L_0x0ee0;
        r12.checkLayout();
        r4 = r12.messageOwner;
        r4 = r4.date;
        r2 = java.lang.Math.max(r2, r4);
        r4 = r12.getId();
        if (r4 <= 0) goto L_0x0ea1;
        r4 = r12.getId();
        r6 = java.lang.Math.max(r4, r6);
        r4 = r7.last_message_id;
        r13 = r12.getId();
        r4 = java.lang.Math.max(r4, r13);
        r7.last_message_id = r4;
        goto L_0x0eb9;
        r4 = r7.currentEncryptedChat;
        if (r4 == 0) goto L_0x0eb9;
        r4 = r12.getId();
        r6 = java.lang.Math.min(r4, r6);
        r4 = r7.last_message_id;
        r13 = r12.getId();
        r4 = java.lang.Math.min(r4, r13);
        r7.last_message_id = r4;
        r4 = r12.messageOwner;
        r4 = r4.mentioned;
        if (r4 == 0) goto L_0x0ecc;
        r4 = r12.isContentUnread();
        if (r4 == 0) goto L_0x0ecc;
        r4 = r7.newMentionsCount;
        r13 = 1;
        r4 = r4 + r13;
        r7.newMentionsCount = r4;
        goto L_0x0ecd;
        r13 = 1;
        r4 = r7.newUnreadMessageCount;
        r4 = r4 + r13;
        r7.newUnreadMessageCount = r4;
        r4 = r12.type;
        r13 = 10;
        if (r4 == r13) goto L_0x0ede;
        r4 = r12.type;
        r13 = 11;
        if (r4 != r13) goto L_0x0ee0;
        r4 = 1;
        goto L_0x0ee2;
        r4 = r58;
        r1 = r1 + 1;
        goto L_0x0d8a;
        r58 = r4;
        r1 = r7.newUnreadMessageCount;
        if (r1 == 0) goto L_0x0f0c;
        r1 = r7.pagedownButtonCounter;
        if (r1 == 0) goto L_0x0f0c;
        r1 = r7.pagedownButtonCounter;
        r4 = 0;
        r1.setVisibility(r4);
        r1 = r7.pagedownButtonCounter;
        r12 = "%d";
        r13 = 1;
        r14 = new java.lang.Object[r13];
        r13 = r7.newUnreadMessageCount;
        r13 = java.lang.Integer.valueOf(r13);
        r14[r4] = r13;
        r4 = java.lang.String.format(r12, r14);
        r1.setText(r4);
        r1 = r7.newMentionsCount;
        if (r1 == 0) goto L_0x0f33;
        r1 = r7.mentiondownButtonCounter;
        if (r1 == 0) goto L_0x0f33;
        r1 = r7.mentiondownButtonCounter;
        r4 = 0;
        r1.setVisibility(r4);
        r1 = r7.mentiondownButtonCounter;
        r12 = "%d";
        r13 = 1;
        r14 = new java.lang.Object[r13];
        r15 = r7.newMentionsCount;
        r15 = java.lang.Integer.valueOf(r15);
        r14[r4] = r15;
        r4 = java.lang.String.format(r12, r14);
        r1.setText(r4);
        r7.showMentiondownButton(r13, r13);
        r80.updateVisibleRows();
        r59 = r3;
        r62 = r10;
        goto L_0x1499;
        r2 = 0;
        r6 = 1;
        r11 = 0;
        r12 = org.telegram.messenger.BuildVars.LOGS_ENABLED;
        if (r12 == 0) goto L_0x0f66;
        r12 = new java.lang.StringBuilder;
        r12.<init>();
        r13 = "received new messages ";
        r12.append(r13);
        r13 = r10.size();
        r12.append(r13);
        r13 = " in dialog ";
        r12.append(r13);
        r13 = r7.dialog_id;
        r12.append(r13);
        r12 = r12.toString();
        org.telegram.messenger.FileLog.d(r12);
        r12 = r1;
        r1 = 0;
        r13 = r10.size();
        if (r1 >= r13) goto L_0x139f;
        r13 = -1;
        r14 = r10.get(r1);
        r14 = (org.telegram.messenger.MessageObject) r14;
        r15 = r7.currentUser;
        if (r15 == 0) goto L_0x0f8e;
        r15 = r7.currentUser;
        r15 = r15.bot;
        if (r15 == 0) goto L_0x0f85;
        r15 = r14.isOut();
        if (r15 != 0) goto L_0x0f8b;
        r15 = r7.currentUser;
        r15 = r15.id;
        if (r15 != r3) goto L_0x0f8e;
        r14.setIsRead();
        r15 = r7.avatarContainer;
        if (r15 == 0) goto L_0x0fc0;
        r15 = r7.currentEncryptedChat;
        if (r15 == 0) goto L_0x0fc0;
        r15 = r14.messageOwner;
        r15 = r15.action;
        if (r15 == 0) goto L_0x0fc0;
        r15 = r14.messageOwner;
        r15 = r15.action;
        r15 = r15 instanceof org.telegram.tgnet.TLRPC.TL_messageEncryptedAction;
        if (r15 == 0) goto L_0x0fc0;
        r15 = r14.messageOwner;
        r15 = r15.action;
        r15 = r15.encryptedAction;
        r15 = r15 instanceof org.telegram.tgnet.TLRPC.TL_decryptedMessageActionSetMessageTTL;
        if (r15 == 0) goto L_0x0fc0;
        r15 = r7.avatarContainer;
        r59 = r3;
        r3 = r14.messageOwner;
        r3 = r3.action;
        r3 = r3.encryptedAction;
        r3 = (org.telegram.tgnet.TLRPC.TL_decryptedMessageActionSetMessageTTL) r3;
        r3 = r3.ttl_seconds;
        r15.setTime(r3);
        goto L_0x0fc2;
        r59 = r3;
        r3 = r14.type;
        if (r3 < 0) goto L_0x1389;
        r3 = r7.messagesDict;
        r15 = 0;
        r3 = r3[r15];
        r15 = r14.getId();
        r3 = r3.indexOfKey(r15);
        if (r3 < 0) goto L_0x0fe0;
        r62 = r10;
        r60 = r12;
        r9 = -10000; // 0xffffffffffffd8f0 float:NaN double:NaN;
        r10 = 10;
        goto L_0x1391;
        if (r1 != 0) goto L_0x0ff2;
        r3 = r14.messageOwner;
        r3 = r3.id;
        if (r3 >= 0) goto L_0x0ff2;
        r3 = r14.type;
        r15 = 5;
        if (r3 != r15) goto L_0x0ff2;
        r3 = r7.animatingMessageObjects;
        r3.add(r14);
        r3 = r14.hasValidGroupId();
        if (r3 == 0) goto L_0x1037;
        r3 = r7.groupedMessagesMap;
        r60 = r12;
        r61 = r13;
        r12 = r14.getGroupId();
        r3 = r3.get(r12);
        r3 = (org.telegram.messenger.MessageObject.GroupedMessages) r3;
        if (r3 != 0) goto L_0x1021;
        r12 = new org.telegram.messenger.MessageObject$GroupedMessages;
        r12.<init>();
        r3 = r12;
        r12 = r14.getGroupId();
        r3.groupId = r12;
        r12 = r7.groupedMessagesMap;
        r62 = r10;
        r9 = r3.groupId;
        r12.put(r9, r3);
        r13 = r3;
        goto L_0x1024;
        r62 = r10;
        r13 = r3;
        if (r2 != 0) goto L_0x102c;
        r3 = new android.util.LongSparseArray;
        r3.<init>();
        r2 = r3;
        r9 = r13.groupId;
        r2.put(r9, r13);
        r3 = r13.messages;
        r3.add(r14);
        goto L_0x103e;
        r62 = r10;
        r60 = r12;
        r61 = r13;
        r13 = 0;
        r3 = r13;
        if (r3 == 0) goto L_0x1067;
        r9 = r3.messages;
        r9 = r9.size();
        r10 = 1;
        if (r9 <= r10) goto L_0x105c;
        r10 = r3.messages;
        r12 = r3.messages;
        r12 = r12.size();
        r13 = 2;
        r12 = r12 - r13;
        r10 = r10.get(r12);
        r13 = r10;
        r13 = (org.telegram.messenger.MessageObject) r13;
        goto L_0x105d;
        r13 = 0;
        r10 = r13;
        if (r10 == 0) goto L_0x1067;
        r12 = r7.messages;
        r13 = r12.indexOf(r10);
        goto L_0x1069;
        r13 = r61;
        r9 = -1;
        if (r13 != r9) goto L_0x112c;
        r9 = r14.messageOwner;
        r9 = r9.id;
        if (r9 < 0) goto L_0x1128;
        r9 = r7.messages;
        r9 = r9.isEmpty();
        if (r9 == 0) goto L_0x107e;
        r63 = r3;
        goto L_0x112a;
        r9 = r7.messages;
        r9 = r9.size();
        r10 = 0;
        if (r10 >= r9) goto L_0x1112;
        r12 = r7.messages;
        r12 = r12.get(r10);
        r12 = (org.telegram.messenger.MessageObject) r12;
        r15 = r12.type;
        if (r15 < 0) goto L_0x1104;
        r15 = r12.messageOwner;
        r15 = r15.date;
        if (r15 <= 0) goto L_0x1104;
        r15 = r12.messageOwner;
        r15 = r15.id;
        if (r15 <= 0) goto L_0x10b2;
        r15 = r14.messageOwner;
        r15 = r15.id;
        if (r15 <= 0) goto L_0x10b2;
        r15 = r12.messageOwner;
        r15 = r15.id;
        r63 = r3;
        r3 = r14.messageOwner;
        r3 = r3.id;
        if (r15 < r3) goto L_0x10be;
        goto L_0x10b4;
        r63 = r3;
        r3 = r12.messageOwner;
        r3 = r3.date;
        r15 = r14.messageOwner;
        r15 = r15.date;
        if (r3 >= r15) goto L_0x1101;
        r21 = r12.getGroupId();
        r17 = 0;
        r3 = (r21 > r17 ? 1 : (r21 == r17 ? 0 : -1));
        if (r3 == 0) goto L_0x10e2;
        r3 = r7.groupedMessagesMap;
        r64 = r9;
        r8 = r12.getGroupId();
        r3 = r3.get(r8);
        r3 = (org.telegram.messenger.MessageObject.GroupedMessages) r3;
        if (r3 == 0) goto L_0x10e5;
        r8 = r3.messages;
        r8 = r8.size();
        if (r8 != 0) goto L_0x10e5;
        r3 = 0;
        goto L_0x10e5;
        r64 = r9;
        r3 = 0;
        if (r3 != 0) goto L_0x10ea;
        r8 = r10;
        r13 = r8;
        goto L_0x1116;
        r8 = r7.messages;
        r9 = r3.messages;
        r15 = r3.messages;
        r15 = r15.size();
        r21 = 1;
        r15 = r15 + -1;
        r9 = r9.get(r15);
        r8 = r8.indexOf(r9);
        goto L_0x10e8;
        r64 = r9;
        goto L_0x1108;
        r63 = r3;
        r64 = r9;
        r10 = r10 + 1;
        r3 = r63;
        r9 = r64;
        r8 = r81;
        goto L_0x1085;
        r63 = r3;
        r64 = r9;
        r3 = -1;
        if (r13 == r3) goto L_0x1121;
        r3 = r7.messages;
        r3 = r3.size();
        if (r13 <= r3) goto L_0x112e;
        r3 = r7.messages;
        r13 = r3.size();
        goto L_0x112e;
        r63 = r3;
        r13 = 0;
        goto L_0x112e;
        r63 = r3;
        r3 = r7.currentEncryptedChat;
        if (r3 == 0) goto L_0x1170;
        r3 = r14.messageOwner;
        r3 = r3.media;
        r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaWebPage;
        if (r3 == 0) goto L_0x1170;
        r3 = r14.messageOwner;
        r3 = r3.media;
        r3 = r3.webpage;
        r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_webPageUrlPending;
        if (r3 == 0) goto L_0x1170;
        if (r11 != 0) goto L_0x114c;
        r3 = new java.util.HashMap;
        r3.<init>();
        r11 = r3;
        r3 = r14.messageOwner;
        r3 = r3.media;
        r3 = r3.webpage;
        r3 = r3.url;
        r3 = r11.get(r3);
        r3 = (java.util.ArrayList) r3;
        if (r3 != 0) goto L_0x116d;
        r8 = new java.util.ArrayList;
        r8.<init>();
        r3 = r8;
        r8 = r14.messageOwner;
        r8 = r8.media;
        r8 = r8.webpage;
        r8 = r8.url;
        r11.put(r8, r3);
        r3.add(r14);
        r14.checkLayout();
        r3 = r14.messageOwner;
        r3 = r3.action;
        r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatMigrateTo;
        if (r3 == 0) goto L_0x11d7;
        r3 = new android.os.Bundle;
        r3.<init>();
        r8 = "chat_id";
        r9 = r14.messageOwner;
        r9 = r9.action;
        r9 = r9.channel_id;
        r3.putInt(r8, r9);
        r8 = r7.parentLayout;
        r8 = r8.fragmentsStack;
        r8 = r8.size();
        if (r8 <= 0) goto L_0x11ac;
        r8 = r7.parentLayout;
        r8 = r8.fragmentsStack;
        r9 = r7.parentLayout;
        r9 = r9.fragmentsStack;
        r9 = r9.size();
        r10 = 1;
        r9 = r9 - r10;
        r8 = r8.get(r9);
        r8 = (org.telegram.ui.ActionBar.BaseFragment) r8;
        r19 = r8;
        goto L_0x11ae;
        r19 = 0;
        r8 = r19;
        r9 = r14.messageOwner;
        r9 = r9.action;
        r9 = r9.channel_id;
        r10 = new org.telegram.ui.ChatActivity$85;
        r10.<init>(r8, r3, r9);
        org.telegram.messenger.AndroidUtilities.runOnUIThread(r10);
        if (r2 == 0) goto L_0x11d6;
        r27 = 0;
        r10 = r27;
        r12 = r2.size();
        if (r10 >= r12) goto L_0x11d6;
        r12 = r2.valueAt(r10);
        r12 = (org.telegram.messenger.MessageObject.GroupedMessages) r12;
        r12.calculate();
        r27 = r10 + 1;
        goto L_0x11c2;
        return;
        r3 = r7.currentChat;
        if (r3 == 0) goto L_0x11f3;
        r3 = r7.currentChat;
        r3 = r3.megagroup;
        if (r3 == 0) goto L_0x11f3;
        r3 = r14.messageOwner;
        r3 = r3.action;
        r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatAddUser;
        if (r3 != 0) goto L_0x11f1;
        r3 = r14.messageOwner;
        r3 = r3.action;
        r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatDeleteUser;
        if (r3 == 0) goto L_0x11f3;
        r12 = 1;
        goto L_0x11f5;
        r12 = r60;
        r3 = r7.minDate;
        r8 = 0;
        r3 = r3[r8];
        if (r3 == 0) goto L_0x1206;
        r3 = r14.messageOwner;
        r3 = r3.date;
        r9 = r7.minDate;
        r9 = r9[r8];
        if (r3 >= r9) goto L_0x120e;
        r3 = r7.minDate;
        r9 = r14.messageOwner;
        r9 = r9.date;
        r3[r8] = r9;
        r3 = r14.isOut();
        if (r3 == 0) goto L_0x1219;
        r3 = 1;
        r7.removeUnreadPlane(r3);
        r5 = 1;
        r3 = r14.getId();
        if (r3 <= 0) goto L_0x1241;
        r3 = r7.maxMessageId;
        r8 = r14.getId();
        r9 = r7.maxMessageId;
        r10 = 0;
        r9 = r9[r10];
        r8 = java.lang.Math.min(r8, r9);
        r3[r10] = r8;
        r3 = r7.minMessageId;
        r8 = r14.getId();
        r9 = r7.minMessageId;
        r9 = r9[r10];
        r8 = java.lang.Math.max(r8, r9);
        r3[r10] = r8;
        goto L_0x1266;
        r10 = 0;
        r3 = r7.currentEncryptedChat;
        if (r3 == 0) goto L_0x1266;
        r3 = r7.maxMessageId;
        r8 = r14.getId();
        r9 = r7.maxMessageId;
        r9 = r9[r10];
        r8 = java.lang.Math.max(r8, r9);
        r3[r10] = r8;
        r3 = r7.minMessageId;
        r8 = r14.getId();
        r9 = r7.minMessageId;
        r9 = r9[r10];
        r8 = java.lang.Math.min(r8, r9);
        r3[r10] = r8;
        r3 = r7.maxDate;
        r8 = r7.maxDate;
        r8 = r8[r10];
        r9 = r14.messageOwner;
        r9 = r9.date;
        r8 = java.lang.Math.max(r8, r9);
        r3[r10] = r8;
        r3 = r7.messagesDict;
        r3 = r3[r10];
        r8 = r14.getId();
        r3.put(r8, r14);
        r3 = r7.messagesByDays;
        r8 = r14.dateKey;
        r3 = r3.get(r8);
        r3 = (java.util.ArrayList) r3;
        r8 = r7.messages;
        r8 = r8.size();
        if (r13 <= r8) goto L_0x1299;
        r8 = r7.messages;
        r13 = r8.size();
        if (r3 != 0) goto L_0x12e0;
        r8 = new java.util.ArrayList;
        r8.<init>();
        r3 = r8;
        r8 = r7.messagesByDays;
        r9 = r14.dateKey;
        r8.put(r9, r3);
        r8 = new org.telegram.tgnet.TLRPC$TL_message;
        r8.<init>();
        r9 = r14.messageOwner;
        r9 = r9.date;
        r9 = (long) r9;
        r9 = org.telegram.messenger.LocaleController.formatDateChat(r9);
        r8.message = r9;
        r9 = 0;
        r8.id = r9;
        r10 = r14.messageOwner;
        r10 = r10.date;
        r8.date = r10;
        r10 = new org.telegram.messenger.MessageObject;
        r15 = r7.currentAccount;
        r10.<init>(r15, r8, r9);
        r9 = r10;
        r10 = 10;
        r9.type = r10;
        r10 = 1;
        r9.contentType = r10;
        r9.isDateObject = r10;
        r10 = r7.messages;
        r10.add(r13, r9);
        r10 = r7.chatAdapter;
        if (r10 == 0) goto L_0x12e0;
        r10 = r7.chatAdapter;
        r10.notifyItemInserted(r13);
        r8 = r14.isOut();
        if (r8 != 0) goto L_0x1342;
        r8 = r7.paused;
        if (r8 == 0) goto L_0x133a;
        if (r13 != 0) goto L_0x133a;
        r8 = r7.scrollToTopUnReadOnResume;
        if (r8 != 0) goto L_0x1300;
        r8 = r7.unreadMessageObject;
        if (r8 == 0) goto L_0x1300;
        r8 = r7.unreadMessageObject;
        r7.removeMessageObject(r8);
        if (r13 <= 0) goto L_0x12fd;
        r13 = r13 + -1;
        r8 = 0;
        r7.unreadMessageObject = r8;
        r8 = r7.unreadMessageObject;
        if (r8 != 0) goto L_0x133a;
        r8 = new org.telegram.tgnet.TLRPC$TL_message;
        r8.<init>();
        r9 = "";
        r8.message = r9;
        r9 = 0;
        r8.id = r9;
        r10 = new org.telegram.messenger.MessageObject;
        r15 = r7.currentAccount;
        r10.<init>(r15, r8, r9);
        r15 = 6;
        r10.type = r15;
        r15 = 2;
        r10.contentType = r15;
        r15 = r7.messages;
        r15.add(r9, r10);
        r15 = r7.chatAdapter;
        if (r15 == 0) goto L_0x132b;
        r15 = r7.chatAdapter;
        r15.notifyItemInserted(r9);
        r7.unreadMessageObject = r10;
        r9 = r7.unreadMessageObject;
        r7.scrollToMessage = r9;
        r9 = -10000; // 0xffffffffffffd8f0 float:NaN double:NaN;
        r7.scrollToMessagePosition = r9;
        r6 = 0;
        r15 = 1;
        r7.scrollToTopUnReadOnResume = r15;
        goto L_0x133c;
        r9 = -10000; // 0xffffffffffffd8f0 float:NaN double:NaN;
        r8 = r7.unreadMessageObject;
        if (r8 == 0) goto L_0x1344;
        r6 = 1;
        goto L_0x1344;
        r9 = -10000; // 0xffffffffffffd8f0 float:NaN double:NaN;
        r8 = 0;
        r3.add(r8, r14);
        r8 = r7.messages;
        r8.add(r13, r14);
        r8 = r7.chatAdapter;
        if (r8 == 0) goto L_0x135b;
        r8 = r7.chatAdapter;
        r8.notifyItemChanged(r13);
        r8 = r7.chatAdapter;
        r8.notifyItemInserted(r13);
        r8 = r14.isOut();
        if (r8 != 0) goto L_0x1374;
        r8 = r14.messageOwner;
        r8 = r8.mentioned;
        if (r8 == 0) goto L_0x1374;
        r8 = r14.isContentUnread();
        if (r8 == 0) goto L_0x1374;
        r8 = r7.newMentionsCount;
        r10 = 1;
        r8 = r8 + r10;
        r7.newMentionsCount = r8;
        goto L_0x1375;
        r10 = 1;
        r8 = r7.newUnreadMessageCount;
        r8 = r8 + r10;
        r7.newUnreadMessageCount = r8;
        r8 = r14.type;
        r10 = 10;
        if (r8 == r10) goto L_0x1386;
        r8 = r14.type;
        r15 = 11;
        if (r8 != r15) goto L_0x1393;
        r3 = 1;
        r4 = r3;
        goto L_0x1393;
        r62 = r10;
        r60 = r12;
        r9 = -10000; // 0xffffffffffffd8f0 float:NaN double:NaN;
        r10 = 10;
        r12 = r60;
        r1 = r1 + 1;
        r3 = r59;
        r10 = r62;
        r8 = r81;
        r9 = r83;
        goto L_0x0f68;
        r59 = r3;
        r62 = r10;
        r60 = r12;
        if (r11 == 0) goto L_0x13b2;
        r1 = r7.currentAccount;
        r1 = org.telegram.messenger.MessagesController.getInstance(r1);
        r8 = r7.dialog_id;
        r1.reloadWebPages(r8, r11);
        if (r2 == 0) goto L_0x13f6;
        r1 = 0;
        r3 = r2.size();
        if (r1 >= r3) goto L_0x13f6;
        r3 = r2.valueAt(r1);
        r3 = (org.telegram.messenger.MessageObject.GroupedMessages) r3;
        r8 = r3.posArray;
        r8 = r8.size();
        r3.calculate();
        r9 = r3.posArray;
        r9 = r9.size();
        r10 = r9 - r8;
        if (r10 <= 0) goto L_0x13f3;
        r10 = r7.chatAdapter;
        if (r10 == 0) goto L_0x13f3;
        r10 = r7.messages;
        r12 = r3.messages;
        r13 = r3.messages;
        r13 = r13.size();
        r14 = 1;
        r13 = r13 - r14;
        r12 = r12.get(r13);
        r10 = r10.indexOf(r12);
        if (r10 < 0) goto L_0x13f3;
        r12 = r7.chatAdapter;
        r12.notifyItemRangeChanged(r10, r9);
        r1 = r1 + 1;
        goto L_0x13b5;
        r1 = r7.progressView;
        if (r1 == 0) goto L_0x1400;
        r1 = r7.progressView;
        r3 = 4;
        r1.setVisibility(r3);
        r1 = r7.chatAdapter;
        if (r1 == 0) goto L_0x140e;
        if (r6 == 0) goto L_0x1411;
        r1 = r7.chatAdapter;
        r3 = r7.unreadMessageObject;
        r1.updateRowWithMessageObject(r3);
        goto L_0x1411;
        r1 = 1;
        r7.scrollToTopOnResume = r1;
        r1 = r7.chatListView;
        if (r1 == 0) goto L_0x1492;
        r1 = r7.chatAdapter;
        if (r1 == 0) goto L_0x1492;
        r1 = r7.chatLayoutManager;
        r1 = r1.findFirstVisibleItemPosition();
        r3 = -1;
        if (r1 != r3) goto L_0x1423;
        r1 = 0;
        if (r1 == 0) goto L_0x1453;
        if (r5 == 0) goto L_0x1428;
        goto L_0x1453;
        r3 = r7.newUnreadMessageCount;
        if (r3 == 0) goto L_0x144d;
        r3 = r7.pagedownButtonCounter;
        if (r3 == 0) goto L_0x144d;
        r3 = r7.pagedownButtonCounter;
        r8 = 0;
        r3.setVisibility(r8);
        r3 = r7.pagedownButtonCounter;
        r9 = "%d";
        r10 = 1;
        r12 = new java.lang.Object[r10];
        r13 = r7.newUnreadMessageCount;
        r13 = java.lang.Integer.valueOf(r13);
        r12[r8] = r13;
        r9 = java.lang.String.format(r9, r12);
        r3.setText(r9);
        goto L_0x144f;
        r8 = 0;
        r10 = 1;
        r7.showPagedownButton(r10, r10);
        goto L_0x1468;
        r8 = 0;
        r7.newUnreadMessageCount = r8;
        r3 = r7.firstLoading;
        if (r3 != 0) goto L_0x1468;
        r3 = r7.paused;
        if (r3 == 0) goto L_0x1462;
        r3 = 1;
        r7.scrollToTopOnResume = r3;
        goto L_0x1468;
        r3 = 1;
        r7.forceScrollToTop = r3;
        r80.moveScrollToLastMessage();
        r3 = r7.newMentionsCount;
        if (r3 == 0) goto L_0x1490;
        r3 = r7.mentiondownButtonCounter;
        if (r3 == 0) goto L_0x1490;
        r3 = r7.mentiondownButtonCounter;
        r8 = 0;
        r3.setVisibility(r8);
        r3 = r7.mentiondownButtonCounter;
        r9 = "%d";
        r10 = 1;
        r12 = new java.lang.Object[r10];
        r13 = r7.newMentionsCount;
        r13 = java.lang.Integer.valueOf(r13);
        r12[r8] = r13;
        r8 = java.lang.String.format(r9, r12);
        r3.setText(r8);
        r7.showMentiondownButton(r10, r10);
        goto L_0x1491;
        r10 = 1;
        goto L_0x1495;
        r10 = 1;
        r7.scrollToTopOnResume = r10;
        r58 = r4;
        r11 = r60;
        r1 = r7.messages;
        r1 = r1.isEmpty();
        if (r1 != 0) goto L_0x14b3;
        r1 = r7.botUser;
        if (r1 == 0) goto L_0x14b3;
        r1 = r7.botUser;
        r1 = r1.length();
        if (r1 != 0) goto L_0x14b3;
        r1 = 0;
        r7.botUser = r1;
        r80.updateBottomOverlay();
        if (r58 == 0) goto L_0x14bb;
        r80.updateTitle();
        r80.checkAndUpdateAvatar();
        if (r11 == 0) goto L_0x14cc;
        r1 = r7.currentAccount;
        r1 = org.telegram.messenger.MessagesController.getInstance(r1);
        r2 = r7.currentChat;
        r2 = r2.id;
        r3 = 0;
        r4 = 1;
        r1.loadFullChat(r2, r3, r4);
        goto L_0x0a8b;
        r1 = org.telegram.messenger.NotificationCenter.closeChats;
        r8 = r81;
        if (r8 != r1) goto L_0x14f4;
        r9 = r83;
        if (r9 == 0) goto L_0x14ef;
        r1 = r9.length;
        if (r1 <= 0) goto L_0x14ef;
        r1 = 0;
        r1 = r9[r1];
        r1 = (java.lang.Long) r1;
        r1 = r1.longValue();
        r3 = r7.dialog_id;
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 != 0) goto L_0x14ed;
        r80.finishFragment();
        goto L_0x2bd8;
        r80.removeSelfFromStack();
        goto L_0x2bd8;
        r9 = r83;
        r1 = org.telegram.messenger.NotificationCenter.messagesRead;
        if (r8 != r1) goto L_0x1606;
        r1 = 0;
        r2 = r9[r1];
        r1 = r2;
        r1 = (org.telegram.messenger.support.SparseLongArray) r1;
        r2 = 1;
        r3 = r9[r2];
        r2 = r3;
        r2 = (org.telegram.messenger.support.SparseLongArray) r2;
        r3 = 0;
        if (r1 == 0) goto L_0x1569;
        r4 = 0;
        r5 = r1.size();
        if (r4 >= r5) goto L_0x1569;
        r6 = r1.keyAt(r4);
        r10 = r1.get(r6);
        r12 = (long) r6;
        r14 = r7.dialog_id;
        r16 = (r12 > r14 ? 1 : (r12 == r14 ? 0 : -1));
        if (r16 == 0) goto L_0x1523;
        r4 = r4 + 1;
        goto L_0x150e;
        r12 = 0;
        r13 = r7.messages;
        r13 = r13.size();
        if (r12 >= r13) goto L_0x1562;
        r14 = r7.messages;
        r14 = r14.get(r12);
        r14 = (org.telegram.messenger.MessageObject) r14;
        r15 = r14.isOut();
        if (r15 != 0) goto L_0x155b;
        r15 = r14.getId();
        if (r15 <= 0) goto L_0x155b;
        r15 = r14.getId();
        r65 = r1;
        r1 = (int) r10;
        if (r15 > r1) goto L_0x155d;
        r1 = r14.isUnread();
        if (r1 != 0) goto L_0x1550;
        goto L_0x1564;
        r14.setIsRead();
        r3 = 1;
        r1 = r7.newUnreadMessageCount;
        r15 = 1;
        r1 = r1 - r15;
        r7.newUnreadMessageCount = r1;
        goto L_0x155d;
        r65 = r1;
        r12 = r12 + 1;
        r1 = r65;
        goto L_0x152a;
        r65 = r1;
        r1 = 0;
        r7.removeUnreadPlane(r1);
        goto L_0x156b;
        r65 = r1;
        if (r3 == 0) goto L_0x15b0;
        r1 = r7.newUnreadMessageCount;
        if (r1 >= 0) goto L_0x1574;
        r1 = 0;
        r7.newUnreadMessageCount = r1;
        r1 = r7.pagedownButtonCounter;
        if (r1 == 0) goto L_0x15b0;
        r1 = r7.pagedownButtonCounter;
        r4 = "%d";
        r5 = 1;
        r5 = new java.lang.Object[r5];
        r6 = r7.newUnreadMessageCount;
        r6 = java.lang.Integer.valueOf(r6);
        r10 = 0;
        r5[r10] = r6;
        r4 = java.lang.String.format(r4, r5);
        r1.setText(r4);
        r1 = r7.newUnreadMessageCount;
        if (r1 > 0) goto L_0x15a2;
        r1 = r7.pagedownButtonCounter;
        r1 = r1.getVisibility();
        r4 = 4;
        if (r1 == r4) goto L_0x15b0;
        r1 = r7.pagedownButtonCounter;
        r1.setVisibility(r4);
        goto L_0x15b0;
        r1 = r7.pagedownButtonCounter;
        r1 = r1.getVisibility();
        if (r1 == 0) goto L_0x15b0;
        r1 = r7.pagedownButtonCounter;
        r4 = 0;
        r1.setVisibility(r4);
        if (r2 == 0) goto L_0x15ff;
        r1 = 0;
        r4 = r2.size();
        if (r1 >= r4) goto L_0x15ff;
        r5 = r2.keyAt(r1);
        r10 = r2.get(r5);
        r6 = (int) r10;
        r10 = (long) r5;
        r12 = r7.dialog_id;
        r14 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1));
        if (r14 == 0) goto L_0x15cd;
        r1 = r1 + 1;
        goto L_0x15b7;
        r10 = 0;
        r11 = r7.messages;
        r11 = r11.size();
        if (r10 >= r11) goto L_0x15fe;
        r12 = r7.messages;
        r12 = r12.get(r10);
        r12 = (org.telegram.messenger.MessageObject) r12;
        r13 = r12.isOut();
        if (r13 == 0) goto L_0x15fb;
        r13 = r12.getId();
        if (r13 <= 0) goto L_0x15fb;
        r13 = r12.getId();
        if (r13 > r6) goto L_0x15fb;
        r13 = r12.isUnread();
        if (r13 != 0) goto L_0x15f7;
        goto L_0x15fe;
        r12.setIsRead();
        r3 = 1;
        r10 = r10 + 1;
        goto L_0x15d4;
        if (r3 == 0) goto L_0x1604;
        r80.updateVisibleRows();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.historyCleared;
        if (r8 != r1) goto L_0x178a;
        r1 = 0;
        r2 = r9[r1];
        r2 = (java.lang.Long) r2;
        r1 = r2.longValue();
        r3 = r7.dialog_id;
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 == 0) goto L_0x161a;
        return;
        r3 = 1;
        r4 = r9[r3];
        r4 = (java.lang.Integer) r4;
        r3 = r4.intValue();
        r4 = 0;
        r5 = r4;
        r4 = 0;
        r6 = r7.messages;
        r6 = r6.size();
        if (r4 >= r6) goto L_0x16a2;
        r6 = r7.messages;
        r6 = r6.get(r4);
        r6 = (org.telegram.messenger.MessageObject) r6;
        r10 = r6.getId();
        if (r10 <= 0) goto L_0x169f;
        if (r10 <= r3) goto L_0x163f;
        goto L_0x169f;
        r11 = r7.info;
        if (r11 == 0) goto L_0x1662;
        r11 = r7.info;
        r11 = r11.pinned_msg_id;
        if (r11 != r10) goto L_0x1662;
        r11 = 0;
        r7.pinnedMessageObject = r11;
        r11 = r7.info;
        r12 = 0;
        r11.pinned_msg_id = r12;
        r11 = r7.currentAccount;
        r11 = org.telegram.messenger.MessagesStorage.getInstance(r11);
        r13 = r7.info;
        r13 = r13.id;
        r11.updateChannelPinnedMessage(r13, r12);
        r11 = 1;
        r7.updatePinnedMessageView(r11);
        r11 = r7.messages;
        r11.remove(r4);
        r4 = r4 + -1;
        r11 = r7.messagesDict;
        r12 = 0;
        r11 = r11[r12];
        r11.remove(r10);
        r11 = r7.messagesByDays;
        r12 = r6.dateKey;
        r11 = r11.get(r12);
        r11 = (java.util.ArrayList) r11;
        if (r11 == 0) goto L_0x169e;
        r11.remove(r6);
        r12 = r11.isEmpty();
        if (r12 == 0) goto L_0x169e;
        r12 = r7.messagesByDays;
        r13 = r6.dateKey;
        r12.remove(r13);
        if (r4 < 0) goto L_0x169e;
        r12 = r7.messages;
        r12 = r12.size();
        if (r4 >= r12) goto L_0x169e;
        r12 = r7.messages;
        r12.remove(r4);
        r4 = r4 + -1;
        r5 = 1;
        r6 = 1;
        r4 = r4 + r6;
        goto L_0x1626;
        r4 = r7.messages;
        r4 = r4.isEmpty();
        if (r4 == 0) goto L_0x1779;
        r4 = r7.endReached;
        r6 = 0;
        r4 = r4[r6];
        if (r4 != 0) goto L_0x174f;
        r4 = r7.loading;
        if (r4 != 0) goto L_0x174f;
        r4 = r7.progressView;
        if (r4 == 0) goto L_0x16bf;
        r4 = r7.progressView;
        r6 = 4;
        r4.setVisibility(r6);
        r4 = r7.chatListView;
        if (r4 == 0) goto L_0x16c9;
        r4 = r7.chatListView;
        r6 = 0;
        r4.setEmptyView(r6);
        r4 = r7.currentEncryptedChat;
        if (r4 != 0) goto L_0x16e5;
        r4 = r7.maxMessageId;
        r6 = r7.maxMessageId;
        r10 = 1;
        r11 = 2147483647; // 0x7fffffff float:NaN double:1.060997895E-314;
        r6[r10] = r11;
        r6 = 0;
        r4[r6] = r11;
        r4 = r7.minMessageId;
        r11 = r7.minMessageId;
        r12 = -2147483648; // 0xffffffff80000000 float:-0.0 double:NaN;
        r11[r10] = r12;
        r4[r6] = r12;
        goto L_0x16fc;
        r6 = 0;
        r10 = 1;
        r12 = -2147483648; // 0xffffffff80000000 float:-0.0 double:NaN;
        r4 = r7.maxMessageId;
        r11 = r7.maxMessageId;
        r11[r10] = r12;
        r4[r6] = r12;
        r4 = r7.minMessageId;
        r11 = r7.minMessageId;
        r13 = 2147483647; // 0x7fffffff float:NaN double:1.060997895E-314;
        r11[r10] = r13;
        r4[r6] = r13;
        r4 = r7.maxDate;
        r11 = r7.maxDate;
        r11[r10] = r12;
        r4[r6] = r12;
        r4 = r7.minDate;
        r11 = r7.minDate;
        r11[r10] = r6;
        r4[r6] = r6;
        r4 = r7.waitingForLoad;
        r6 = r7.lastLoadIndex;
        r6 = java.lang.Integer.valueOf(r6);
        r4.add(r6);
        r4 = r7.currentAccount;
        r10 = org.telegram.messenger.MessagesController.getInstance(r4);
        r11 = r7.dialog_id;
        r13 = 30;
        r4 = r7.cacheEndReached;
        r6 = 0;
        r4 = r4[r6];
        r16 = 1;
        r4 = r4 ^ 1;
        r15 = r7.minDate;
        r17 = r15[r6];
        r6 = r7.classGuid;
        r19 = 0;
        r20 = 0;
        r15 = r7.currentChat;
        r21 = org.telegram.messenger.ChatObject.isChannel(r15);
        r15 = r7.lastLoadIndex;
        r14 = r15 + 1;
        r7.lastLoadIndex = r14;
        r14 = 0;
        r22 = r15;
        r15 = 0;
        r16 = r4;
        r18 = r6;
        r10.loadMessages(r11, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22);
        r4 = 1;
        r7.loading = r4;
        goto L_0x1779;
        r4 = r7.botButtons;
        if (r4 == 0) goto L_0x1760;
        r4 = 0;
        r7.botButtons = r4;
        r6 = r7.chatActivityEnterView;
        if (r6 == 0) goto L_0x1760;
        r6 = r7.chatActivityEnterView;
        r10 = 0;
        r6.setButtons(r4, r10);
        r4 = r7.currentEncryptedChat;
        if (r4 != 0) goto L_0x1779;
        r4 = r7.currentUser;
        if (r4 == 0) goto L_0x1779;
        r4 = r7.currentUser;
        r4 = r4.bot;
        if (r4 == 0) goto L_0x1779;
        r4 = r7.botUser;
        if (r4 != 0) goto L_0x1779;
        r4 = "";
        r7.botUser = r4;
        r80.updateBottomOverlay();
        if (r5 == 0) goto L_0x1788;
        r4 = r7.chatAdapter;
        if (r4 == 0) goto L_0x1788;
        r4 = 1;
        r7.removeUnreadPlane(r4);
        r4 = r7.chatAdapter;
        r4.notifyDataSetChanged();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.messagesDeleted;
        if (r8 != r1) goto L_0x1a77;
        r1 = 0;
        r2 = r9[r1];
        r1 = r2;
        r1 = (java.util.ArrayList) r1;
        r2 = 1;
        r3 = r9[r2];
        r3 = (java.lang.Integer) r3;
        r2 = r3.intValue();
        r3 = 0;
        r4 = r7.currentChat;
        r4 = org.telegram.messenger.ChatObject.isChannel(r4);
        if (r4 == 0) goto L_0x17bb;
        if (r2 != 0) goto L_0x17b2;
        r4 = r7.mergeDialogId;
        r10 = 0;
        r6 = (r4 > r10 ? 1 : (r4 == r10 ? 0 : -1));
        if (r6 == 0) goto L_0x17b2;
        r3 = 1;
        goto L_0x17be;
        r4 = r7.currentChat;
        r4 = r4.id;
        if (r2 != r4) goto L_0x17ba;
        r3 = 0;
        goto L_0x17be;
        return;
        if (r2 == 0) goto L_0x17be;
        return;
        r4 = 0;
        r5 = 0;
        r6 = r1.size();
        r10 = 0;
        r11 = 0;
        r12 = r4;
        r4 = 0;
        if (r4 >= r6) goto L_0x18b6;
        r13 = r1.get(r4);
        r13 = (java.lang.Integer) r13;
        r14 = r7.messagesDict;
        r14 = r14[r3];
        r15 = r13.intValue();
        r14 = r14.get(r15);
        r14 = (org.telegram.messenger.MessageObject) r14;
        if (r3 != 0) goto L_0x1806;
        r15 = r7.info;
        if (r15 == 0) goto L_0x1806;
        r15 = r7.info;
        r15 = r15.pinned_msg_id;
        r66 = r1;
        r1 = r13.intValue();
        if (r15 != r1) goto L_0x1808;
        r1 = 0;
        r7.pinnedMessageObject = r1;
        r1 = r7.info;
        r15 = 0;
        r1.pinned_msg_id = r15;
        r1 = r7.currentAccount;
        r1 = org.telegram.messenger.MessagesStorage.getInstance(r1);
        r1.updateChannelPinnedMessage(r2, r15);
        r1 = 1;
        r7.updatePinnedMessageView(r1);
        goto L_0x1808;
        r66 = r1;
        if (r14 == 0) goto L_0x18a8;
        r1 = r7.messages;
        r1 = r1.indexOf(r14);
        r15 = -1;
        if (r1 == r15) goto L_0x18a8;
        r15 = r7.selectedMessagesIds;
        r15 = r15[r3];
        r67 = r2;
        r2 = r13.intValue();
        r2 = r15.indexOfKey(r2);
        if (r2 < 0) goto L_0x1830;
        r10 = 1;
        r2 = r6 + -1;
        if (r4 != r2) goto L_0x182a;
        r2 = 1;
        goto L_0x182b;
        r2 = 0;
        r11 = r2;
        r15 = 0;
        r7.addToSelectedMessages(r14, r15, r2);
        r2 = r7.messages;
        r2 = r2.remove(r1);
        r2 = (org.telegram.messenger.MessageObject) r2;
        r15 = r2.getGroupId();
        r17 = 0;
        r20 = (r15 > r17 ? 1 : (r15 == r17 ? 0 : -1));
        if (r20 == 0) goto L_0x1867;
        r15 = r7.groupedMessagesMap;
        r68 = r10;
        r69 = r11;
        r10 = r2.getGroupId();
        r10 = r15.get(r10);
        r10 = (org.telegram.messenger.MessageObject.GroupedMessages) r10;
        if (r10 == 0) goto L_0x186b;
        if (r5 != 0) goto L_0x185c;
        r11 = new android.util.LongSparseArray;
        r11.<init>();
        r5 = r11;
        r8 = r10.groupId;
        r5.put(r8, r10);
        r8 = r10.messages;
        r8.remove(r14);
        goto L_0x186b;
        r68 = r10;
        r69 = r11;
        r8 = r7.messagesDict;
        r8 = r8[r3];
        r9 = r13.intValue();
        r8.remove(r9);
        r8 = r7.messagesByDays;
        r9 = r14.dateKey;
        r8 = r8.get(r9);
        r8 = (java.util.ArrayList) r8;
        if (r8 == 0) goto L_0x18a1;
        r8.remove(r14);
        r9 = r8.isEmpty();
        if (r9 == 0) goto L_0x18a1;
        r9 = r7.messagesByDays;
        r10 = r14.dateKey;
        r9.remove(r10);
        if (r1 < 0) goto L_0x18a1;
        r9 = r7.messages;
        r9 = r9.size();
        if (r1 >= r9) goto L_0x18a1;
        r9 = r7.messages;
        r9.remove(r1);
        r1 = 1;
        r12 = r1;
        r10 = r68;
        r11 = r69;
        goto L_0x18aa;
        r67 = r2;
        r4 = r4 + 1;
        r1 = r66;
        r2 = r67;
        r8 = r81;
        r9 = r83;
        goto L_0x17c8;
        r66 = r1;
        r67 = r2;
        if (r10 == 0) goto L_0x18c4;
        if (r11 != 0) goto L_0x18c4;
        r1 = 0;
        r2 = 1;
        r4 = 0;
        r7.addToSelectedMessages(r4, r1, r2);
        if (r5 == 0) goto L_0x1917;
        r1 = 0;
        r2 = r5.size();
        if (r1 >= r2) goto L_0x1917;
        r2 = r5.valueAt(r1);
        r2 = (org.telegram.messenger.MessageObject.GroupedMessages) r2;
        r4 = r2.messages;
        r4 = r4.isEmpty();
        if (r4 == 0) goto L_0x18e3;
        r4 = r7.groupedMessagesMap;
        r8 = r2.groupId;
        r4.remove(r8);
        goto L_0x1914;
        r2.calculate();
        r4 = r2.messages;
        r8 = r2.messages;
        r8 = r8.size();
        r9 = 1;
        r8 = r8 - r9;
        r4 = r4.get(r8);
        r4 = (org.telegram.messenger.MessageObject) r4;
        r8 = r7.messages;
        r8 = r8.indexOf(r4);
        if (r8 < 0) goto L_0x1914;
        r9 = r7.chatAdapter;
        if (r9 == 0) goto L_0x1914;
        r9 = r7.chatAdapter;
        r13 = r7.chatAdapter;
        r13 = r13.messagesStartRow;
        r13 = r13 + r8;
        r14 = r2.messages;
        r14 = r14.size();
        r9.notifyItemRangeChanged(r13, r14);
        r1 = r1 + 1;
        goto L_0x18c7;
        r1 = r7.messages;
        r1 = r1.isEmpty();
        if (r1 == 0) goto L_0x19ef;
        r1 = r7.endReached;
        r2 = 0;
        r1 = r1[r2];
        if (r1 != 0) goto L_0x19c5;
        r1 = r7.loading;
        if (r1 != 0) goto L_0x19c5;
        r1 = r7.progressView;
        if (r1 == 0) goto L_0x1934;
        r1 = r7.progressView;
        r2 = 4;
        r1.setVisibility(r2);
        r1 = r7.chatListView;
        if (r1 == 0) goto L_0x193e;
        r1 = r7.chatListView;
        r2 = 0;
        r1.setEmptyView(r2);
        r1 = r7.currentEncryptedChat;
        if (r1 != 0) goto L_0x195a;
        r1 = r7.maxMessageId;
        r2 = r7.maxMessageId;
        r4 = 1;
        r8 = 2147483647; // 0x7fffffff float:NaN double:1.060997895E-314;
        r2[r4] = r8;
        r2 = 0;
        r1[r2] = r8;
        r1 = r7.minMessageId;
        r8 = r7.minMessageId;
        r9 = -2147483648; // 0xffffffff80000000 float:-0.0 double:NaN;
        r8[r4] = r9;
        r1[r2] = r9;
        goto L_0x1971;
        r2 = 0;
        r4 = 1;
        r9 = -2147483648; // 0xffffffff80000000 float:-0.0 double:NaN;
        r1 = r7.maxMessageId;
        r8 = r7.maxMessageId;
        r8[r4] = r9;
        r1[r2] = r9;
        r1 = r7.minMessageId;
        r8 = r7.minMessageId;
        r13 = 2147483647; // 0x7fffffff float:NaN double:1.060997895E-314;
        r8[r4] = r13;
        r1[r2] = r13;
        r1 = r7.maxDate;
        r8 = r7.maxDate;
        r8[r4] = r9;
        r1[r2] = r9;
        r1 = r7.minDate;
        r8 = r7.minDate;
        r8[r4] = r2;
        r1[r2] = r2;
        r1 = r7.waitingForLoad;
        r2 = r7.lastLoadIndex;
        r2 = java.lang.Integer.valueOf(r2);
        r1.add(r2);
        r1 = r7.currentAccount;
        r28 = org.telegram.messenger.MessagesController.getInstance(r1);
        r1 = r7.dialog_id;
        r31 = 30;
        r32 = 0;
        r33 = 0;
        r4 = r7.cacheEndReached;
        r8 = 0;
        r4 = r4[r8];
        r9 = 1;
        r34 = r4 ^ 1;
        r4 = r7.minDate;
        r35 = r4[r8];
        r4 = r7.classGuid;
        r37 = 0;
        r38 = 0;
        r8 = r7.currentChat;
        r39 = org.telegram.messenger.ChatObject.isChannel(r8);
        r8 = r7.lastLoadIndex;
        r9 = r8 + 1;
        r7.lastLoadIndex = r9;
        r29 = r1;
        r36 = r4;
        r40 = r8;
        r28.loadMessages(r29, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40);
        r1 = 1;
        r7.loading = r1;
        goto L_0x19ef;
        r1 = r7.botButtons;
        if (r1 == 0) goto L_0x19d6;
        r1 = 0;
        r7.botButtons = r1;
        r2 = r7.chatActivityEnterView;
        if (r2 == 0) goto L_0x19d6;
        r2 = r7.chatActivityEnterView;
        r4 = 0;
        r2.setButtons(r1, r4);
        r1 = r7.currentEncryptedChat;
        if (r1 != 0) goto L_0x19ef;
        r1 = r7.currentUser;
        if (r1 == 0) goto L_0x19ef;
        r1 = r7.currentUser;
        r1 = r1.bot;
        if (r1 == 0) goto L_0x19ef;
        r1 = r7.botUser;
        if (r1 != 0) goto L_0x19ef;
        r1 = "";
        r7.botUser = r1;
        r80.updateBottomOverlay();
        r1 = r7.chatAdapter;
        if (r1 == 0) goto L_0x1a75;
        if (r12 == 0) goto L_0x1a5c;
        r1 = 0;
        r7.removeUnreadPlane(r1);
        r1 = r7.chatListView;
        r1 = r1.getChildCount();
        r2 = -1;
        r4 = 0;
        r27 = 0;
        r8 = r27;
        if (r8 >= r1) goto L_0x1a40;
        r9 = r7.chatListView;
        r9 = r9.getChildAt(r8);
        r13 = 0;
        r14 = r9 instanceof org.telegram.ui.Cells.ChatMessageCell;
        if (r14 == 0) goto L_0x1a1a;
        r14 = r9;
        r14 = (org.telegram.ui.Cells.ChatMessageCell) r14;
        r13 = r14.getMessageObject();
        goto L_0x1a25;
        r14 = r9 instanceof org.telegram.ui.Cells.ChatActionCell;
        if (r14 == 0) goto L_0x1a25;
        r14 = r9;
        r14 = (org.telegram.ui.Cells.ChatActionCell) r14;
        r13 = r14.getMessageObject();
        if (r13 == 0) goto L_0x1a3d;
        r14 = r7.messages;
        r14 = r14.indexOf(r13);
        if (r14 >= 0) goto L_0x1a30;
        goto L_0x1a3d;
        r15 = r7.chatAdapter;
        r15 = r15.messagesStartRow;
        r2 = r15 + r14;
        r4 = r9.getBottom();
        goto L_0x1a40;
        r27 = r8 + 1;
        goto L_0x1a03;
        r8 = r7.chatAdapter;
        r8.notifyDataSetChanged();
        r8 = -1;
        if (r2 == r8) goto L_0x1a5b;
        r8 = r7.chatLayoutManager;
        r9 = r7.chatListView;
        r9 = r9.getMeasuredHeight();
        r9 = r9 - r4;
        r13 = r7.chatListView;
        r13 = r13.getPaddingBottom();
        r9 = r9 - r13;
        r8.scrollToPositionWithOffset(r2, r9);
        goto L_0x1a75;
        r1 = 0;
        r7.first_unread_id = r1;
        r7.last_message_id = r1;
        r7.createUnreadMessageAfterId = r1;
        r1 = r7.unreadMessageObject;
        r7.removeMessageObject(r1);
        r1 = 0;
        r7.unreadMessageObject = r1;
        r1 = r7.pagedownButtonCounter;
        if (r1 == 0) goto L_0x1a75;
        r1 = r7.pagedownButtonCounter;
        r2 = 4;
        r1.setVisibility(r2);
        goto L_0x0a8b;
        r1 = org.telegram.messenger.NotificationCenter.messageReceivedByServer;
        r8 = r81;
        if (r8 != r1) goto L_0x1c0d;
        r1 = 0;
        r9 = r83;
        r2 = r9[r1];
        r2 = (java.lang.Integer) r2;
        r3 = r7.messagesDict;
        r3 = r3[r1];
        r1 = r2.intValue();
        r1 = r3.get(r1);
        r1 = (org.telegram.messenger.MessageObject) r1;
        if (r1 == 0) goto L_0x1c0b;
        r3 = 1;
        r4 = r9[r3];
        r3 = r4;
        r3 = (java.lang.Integer) r3;
        r4 = r3.equals(r2);
        if (r4 != 0) goto L_0x1b08;
        r4 = r7.messagesDict;
        r5 = 0;
        r4 = r4[r5];
        r6 = r3.intValue();
        r4 = r4.indexOfKey(r6);
        if (r4 < 0) goto L_0x1b08;
        r4 = r7.messagesDict;
        r4 = r4[r5];
        r6 = r2.intValue();
        r4 = r4.get(r6);
        r4 = (org.telegram.messenger.MessageObject) r4;
        r6 = r7.messagesDict;
        r5 = r6[r5];
        r6 = r2.intValue();
        r5.remove(r6);
        if (r4 == 0) goto L_0x1b07;
        r5 = r7.messages;
        r5 = r5.indexOf(r4);
        r6 = r7.messages;
        r6.remove(r5);
        r6 = r7.messagesByDays;
        r10 = r4.dateKey;
        r6 = r6.get(r10);
        r6 = (java.util.ArrayList) r6;
        r6.remove(r1);
        r10 = r6.isEmpty();
        if (r10 == 0) goto L_0x1afe;
        r10 = r7.messagesByDays;
        r11 = r1.dateKey;
        r10.remove(r11);
        if (r5 < 0) goto L_0x1afe;
        r10 = r7.messages;
        r10 = r10.size();
        if (r5 >= r10) goto L_0x1afe;
        r10 = r7.messages;
        r10.remove(r5);
        r10 = r7.chatAdapter;
        if (r10 == 0) goto L_0x1b07;
        r10 = r7.chatAdapter;
        r10.notifyDataSetChanged();
        return;
        r4 = 2;
        r4 = r9[r4];
        r4 = (org.telegram.tgnet.TLRPC.Message) r4;
        r5 = 0;
        r6 = 0;
        if (r4 == 0) goto L_0x1ba7;
        r10 = r1.isForwarded();	 Catch:{ Exception -> 0x1b69 }
        if (r10 == 0) goto L_0x1b2f;	 Catch:{ Exception -> 0x1b69 }
        r10 = r1.messageOwner;	 Catch:{ Exception -> 0x1b69 }
        r10 = r10.reply_markup;	 Catch:{ Exception -> 0x1b69 }
        if (r10 != 0) goto L_0x1b21;	 Catch:{ Exception -> 0x1b69 }
        r10 = r4.reply_markup;	 Catch:{ Exception -> 0x1b69 }
        if (r10 != 0) goto L_0x1b2d;	 Catch:{ Exception -> 0x1b69 }
        r10 = r1.messageOwner;	 Catch:{ Exception -> 0x1b69 }
        r10 = r10.message;	 Catch:{ Exception -> 0x1b69 }
        r11 = r4.message;	 Catch:{ Exception -> 0x1b69 }
        r10 = r10.equals(r11);	 Catch:{ Exception -> 0x1b69 }
        if (r10 != 0) goto L_0x1b2f;	 Catch:{ Exception -> 0x1b69 }
        r10 = 1;	 Catch:{ Exception -> 0x1b69 }
        goto L_0x1b30;	 Catch:{ Exception -> 0x1b69 }
        r10 = 0;	 Catch:{ Exception -> 0x1b69 }
        r6 = r10;	 Catch:{ Exception -> 0x1b69 }
        if (r6 != 0) goto L_0x1b66;	 Catch:{ Exception -> 0x1b69 }
        r10 = r1.messageOwner;	 Catch:{ Exception -> 0x1b69 }
        r10 = r10.params;	 Catch:{ Exception -> 0x1b69 }
        if (r10 == 0) goto L_0x1b45;	 Catch:{ Exception -> 0x1b69 }
        r10 = r1.messageOwner;	 Catch:{ Exception -> 0x1b69 }
        r10 = r10.params;	 Catch:{ Exception -> 0x1b69 }
        r11 = "query_id";	 Catch:{ Exception -> 0x1b69 }
        r10 = r10.containsKey(r11);	 Catch:{ Exception -> 0x1b69 }
        if (r10 != 0) goto L_0x1b66;	 Catch:{ Exception -> 0x1b69 }
        r10 = r4.media;	 Catch:{ Exception -> 0x1b69 }
        if (r10 == 0) goto L_0x1b64;	 Catch:{ Exception -> 0x1b69 }
        r10 = r1.messageOwner;	 Catch:{ Exception -> 0x1b69 }
        r10 = r10.media;	 Catch:{ Exception -> 0x1b69 }
        if (r10 == 0) goto L_0x1b64;	 Catch:{ Exception -> 0x1b69 }
        r10 = r4.media;	 Catch:{ Exception -> 0x1b69 }
        r10 = r10.getClass();	 Catch:{ Exception -> 0x1b69 }
        r11 = r1.messageOwner;	 Catch:{ Exception -> 0x1b69 }
        r11 = r11.media;	 Catch:{ Exception -> 0x1b69 }
        r11 = r11.getClass();	 Catch:{ Exception -> 0x1b69 }
        r10 = r10.equals(r11);	 Catch:{ Exception -> 0x1b69 }
        if (r10 != 0) goto L_0x1b64;
        goto L_0x1b66;
        r10 = 0;
        goto L_0x1b67;
        r10 = 1;
        r5 = r10;
        goto L_0x1b70;
    L_0x1b69:
        r0 = move-exception;
        r10 = r6;
        r6 = r0;
        org.telegram.messenger.FileLog.e(r6);
        r6 = r10;
        r10 = r1.getGroupId();
        r12 = 0;
        r14 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1));
        if (r14 == 0) goto L_0x1b95;
        r10 = r4.grouped_id;
        r14 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1));
        if (r14 == 0) goto L_0x1b95;
        r10 = r7.groupedMessagesMap;
        r11 = r1.getGroupId();
        r10 = r10.get(r11);
        r10 = (org.telegram.messenger.MessageObject.GroupedMessages) r10;
        if (r10 == 0) goto L_0x1b95;
        r11 = r7.groupedMessagesMap;
        r12 = r4.grouped_id;
        r11.put(r12, r10);
        r1.messageOwner = r4;
        r10 = 1;
        r1.generateThumbs(r10);
        r1.setType();
        r10 = r4.media;
        r10 = r10 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaGame;
        if (r10 == 0) goto L_0x1ba7;
        r1.applyNewText();
        if (r6 == 0) goto L_0x1bac;
        r1.measureInlineBotButtons();
        r10 = r7.messagesDict;
        r11 = 0;
        r10 = r10[r11];
        r12 = r2.intValue();
        r10.remove(r12);
        r10 = r7.messagesDict;
        r10 = r10[r11];
        r12 = r3.intValue();
        r10.put(r12, r1);
        r10 = r1.messageOwner;
        r12 = r3.intValue();
        r10.id = r12;
        r10 = r1.messageOwner;
        r10.send_state = r11;
        r1.forceUpdate = r5;
        r10 = new java.util.ArrayList;
        r10.<init>();
        r10.add(r1);
        r11 = r7.currentEncryptedChat;
        if (r11 != 0) goto L_0x1be8;
        r11 = r7.currentAccount;
        r11 = org.telegram.messenger.DataQuery.getInstance(r11);
        r12 = r7.dialog_id;
        r11.loadReplyMessagesForMessages(r10, r12);
        r11 = r7.chatAdapter;
        if (r11 == 0) goto L_0x1bf1;
        r11 = r7.chatAdapter;
        r11.updateRowWithMessageObject(r1);
        r11 = r7.chatLayoutManager;
        if (r11 == 0) goto L_0x1c02;
        if (r5 == 0) goto L_0x1c02;
        r11 = r7.chatLayoutManager;
        r11 = r11.findFirstVisibleItemPosition();
        if (r11 != 0) goto L_0x1c02;
        r80.moveScrollToLastMessage();
        r11 = r7.currentAccount;
        r11 = org.telegram.messenger.NotificationsController.getInstance(r11);
        r11.playOutChatSound();
        goto L_0x2bd8;
        r9 = r83;
        r1 = org.telegram.messenger.NotificationCenter.messageReceivedByAck;
        if (r8 != r1) goto L_0x1c37;
        r1 = 0;
        r2 = r9[r1];
        r2 = (java.lang.Integer) r2;
        r3 = r7.messagesDict;
        r3 = r3[r1];
        r4 = r2.intValue();
        r3 = r3.get(r4);
        r3 = (org.telegram.messenger.MessageObject) r3;
        if (r3 == 0) goto L_0x1c35;
        r4 = r3.messageOwner;
        r4.send_state = r1;
        r1 = r7.chatAdapter;
        if (r1 == 0) goto L_0x1c35;
        r1 = r7.chatAdapter;
        r1.updateRowWithMessageObject(r3);
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.messageSendError;
        if (r8 != r1) goto L_0x1c5a;
        r1 = 0;
        r2 = r9[r1];
        r2 = (java.lang.Integer) r2;
        r3 = r7.messagesDict;
        r1 = r3[r1];
        r3 = r2.intValue();
        r1 = r1.get(r3);
        r1 = (org.telegram.messenger.MessageObject) r1;
        if (r1 == 0) goto L_0x1c58;
        r3 = r1.messageOwner;
        r4 = 2;
        r3.send_state = r4;
        r80.updateVisibleRows();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.chatInfoDidLoaded;
        if (r8 != r1) goto L_0x1e68;
        r1 = 0;
        r2 = r9[r1];
        r1 = r2;
        r1 = (org.telegram.tgnet.TLRPC.ChatFull) r1;
        r2 = r7.currentChat;
        if (r2 == 0) goto L_0x1e66;
        r2 = r1.id;
        r3 = r7.currentChat;
        r3 = r3.id;
        if (r2 != r3) goto L_0x1e66;
        r2 = r1 instanceof org.telegram.tgnet.TLRPC.TL_channelFull;
        if (r2 == 0) goto L_0x1cd4;
        r2 = r7.currentChat;
        r2 = r2.megagroup;
        if (r2 == 0) goto L_0x1cc6;
        r2 = 0;
        r3 = r1.participants;
        if (r3 == 0) goto L_0x1c9f;
        r3 = r2;
        r2 = 0;
        r4 = r1.participants;
        r4 = r4.participants;
        r4 = r4.size();
        if (r2 >= r4) goto L_0x1c9e;
        r4 = r1.participants;
        r4 = r4.participants;
        r4 = r4.get(r2);
        r4 = (org.telegram.tgnet.TLRPC.ChatParticipant) r4;
        r4 = r4.date;
        r3 = java.lang.Math.max(r4, r3);
        r2 = r2 + 1;
        goto L_0x1c81;
        r2 = r3;
        if (r2 == 0) goto L_0x1cb5;
        r3 = java.lang.System.currentTimeMillis();
        r5 = 1000; // 0x3e8 float:1.401E-42 double:4.94E-321;
        r3 = r3 / r5;
        r5 = (long) r2;
        r10 = r3 - r5;
        r3 = java.lang.Math.abs(r10);
        r5 = 3600; // 0xe10 float:5.045E-42 double:1.7786E-320;
        r10 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1));
        if (r10 <= 0) goto L_0x1cc6;
        r3 = r7.currentAccount;
        r3 = org.telegram.messenger.MessagesController.getInstance(r3);
        r4 = r7.currentChat;
        r4 = r4.id;
        r4 = java.lang.Integer.valueOf(r4);
        r3.loadChannelParticipants(r4);
        r2 = r1.participants;
        if (r2 != 0) goto L_0x1cd4;
        r2 = r7.info;
        if (r2 == 0) goto L_0x1cd4;
        r2 = r7.info;
        r2 = r2.participants;
        r1.participants = r2;
        r7.info = r1;
        r2 = r7.chatActivityEnterView;
        if (r2 == 0) goto L_0x1ce1;
        r2 = r7.chatActivityEnterView;
        r3 = r7.info;
        r2.setChatInfo(r3);
        r2 = r7.mentionsAdapter;
        if (r2 == 0) goto L_0x1cec;
        r2 = r7.mentionsAdapter;
        r3 = r7.info;
        r2.setChatInfo(r3);
        r2 = 3;
        r3 = r9[r2];
        r3 = r3 instanceof org.telegram.messenger.MessageObject;
        if (r3 == 0) goto L_0x1cfe;
        r2 = r9[r2];
        r2 = (org.telegram.messenger.MessageObject) r2;
        r7.pinnedMessageObject = r2;
        r2 = 0;
        r7.updatePinnedMessageView(r2);
        goto L_0x1d02;
        r2 = 1;
        r7.updatePinnedMessageView(r2);
        r2 = r7.avatarContainer;
        if (r2 == 0) goto L_0x1d10;
        r2 = r7.avatarContainer;
        r2.updateOnlineCount();
        r2 = r7.avatarContainer;
        r2.updateSubtitle();
        r2 = r7.isBroadcast;
        if (r2 == 0) goto L_0x1d1f;
        r2 = r7.currentAccount;
        r2 = org.telegram.messenger.SendMessagesHelper.getInstance(r2);
        r3 = r7.info;
        r2.setCurrentChatInfo(r3);
        r2 = r7.info;
        r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_chatFull;
        if (r2 == 0) goto L_0x1d86;
        r2 = 0;
        r7.hasBotsCommands = r2;
        r3 = r7.botInfo;
        r3.clear();
        r7.botsCount = r2;
        org.telegram.ui.Components.URLSpanBotCommand.enabled = r2;
        r27 = 0;
        r2 = r27;
        r3 = r7.info;
        r3 = r3.participants;
        r3 = r3.participants;
        r3 = r3.size();
        if (r2 >= r3) goto L_0x1d7b;
        r3 = r7.info;
        r3 = r3.participants;
        r3 = r3.participants;
        r3 = r3.get(r2);
        r3 = (org.telegram.tgnet.TLRPC.ChatParticipant) r3;
        r4 = r7.currentAccount;
        r4 = org.telegram.messenger.MessagesController.getInstance(r4);
        r5 = r3.user_id;
        r5 = java.lang.Integer.valueOf(r5);
        r4 = r4.getUser(r5);
        if (r4 == 0) goto L_0x1d78;
        r5 = r4.bot;
        if (r5 == 0) goto L_0x1d78;
        r5 = 1;
        org.telegram.ui.Components.URLSpanBotCommand.enabled = r5;
        r6 = r7.botsCount;
        r6 = r6 + r5;
        r7.botsCount = r6;
        r6 = r7.currentAccount;
        r6 = org.telegram.messenger.DataQuery.getInstance(r6);
        r10 = r4.id;
        r11 = r7.classGuid;
        r6.loadBotInfo(r10, r5, r11);
        r27 = r2 + 1;
        goto L_0x1d33;
        r2 = r7.chatListView;
        if (r2 == 0) goto L_0x1e1e;
        r2 = r7.chatListView;
        r2.invalidateViews();
        goto L_0x1e1e;
        r2 = r7.info;
        r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_channelFull;
        if (r2 == 0) goto L_0x1e1e;
        r2 = 0;
        r7.hasBotsCommands = r2;
        r3 = r7.botInfo;
        r3.clear();
        r7.botsCount = r2;
        r2 = r7.info;
        r2 = r2.bot_info;
        r2 = r2.isEmpty();
        if (r2 != 0) goto L_0x1dac;
        r2 = r7.currentChat;
        if (r2 == 0) goto L_0x1dac;
        r2 = r7.currentChat;
        r2 = r2.megagroup;
        if (r2 == 0) goto L_0x1dac;
        r2 = 1;
        goto L_0x1dad;
        r2 = 0;
        org.telegram.ui.Components.URLSpanBotCommand.enabled = r2;
        r2 = r7.info;
        r2 = r2.bot_info;
        r2 = r2.size();
        r7.botsCount = r2;
        r27 = 0;
        r2 = r27;
        r3 = r7.info;
        r3 = r3.bot_info;
        r3 = r3.size();
        if (r2 >= r3) goto L_0x1df8;
        r3 = r7.info;
        r3 = r3.bot_info;
        r3 = r3.get(r2);
        r3 = (org.telegram.tgnet.TLRPC.BotInfo) r3;
        r4 = r3.commands;
        r4 = r4.isEmpty();
        if (r4 != 0) goto L_0x1dee;
        r4 = r7.currentChat;
        r4 = org.telegram.messenger.ChatObject.isChannel(r4);
        if (r4 == 0) goto L_0x1deb;
        r4 = r7.currentChat;
        if (r4 == 0) goto L_0x1dee;
        r4 = r7.currentChat;
        r4 = r4.megagroup;
        if (r4 == 0) goto L_0x1dee;
        r4 = 1;
        r7.hasBotsCommands = r4;
        r4 = r7.botInfo;
        r5 = r3.user_id;
        r4.put(r5, r3);
        r27 = r2 + 1;
        goto L_0x1dbb;
        r2 = r7.chatListView;
        if (r2 == 0) goto L_0x1e01;
        r2 = r7.chatListView;
        r2.invalidateViews();
        r2 = r7.mentionsAdapter;
        if (r2 == 0) goto L_0x1e1e;
        r2 = r7.currentChat;
        r2 = org.telegram.messenger.ChatObject.isChannel(r2);
        if (r2 == 0) goto L_0x1e17;
        r2 = r7.currentChat;
        if (r2 == 0) goto L_0x1e1e;
        r2 = r7.currentChat;
        r2 = r2.megagroup;
        if (r2 == 0) goto L_0x1e1e;
        r2 = r7.mentionsAdapter;
        r3 = r7.botInfo;
        r2.setBotInfo(r3);
        r2 = r7.chatActivityEnterView;
        if (r2 == 0) goto L_0x1e2b;
        r2 = r7.chatActivityEnterView;
        r3 = r7.botsCount;
        r4 = r7.hasBotsCommands;
        r2.setBotsCount(r3, r4);
        r2 = r7.mentionsAdapter;
        if (r2 == 0) goto L_0x1e36;
        r2 = r7.mentionsAdapter;
        r3 = r7.botsCount;
        r2.setBotsCount(r3);
        r2 = r7.currentChat;
        r2 = org.telegram.messenger.ChatObject.isChannel(r2);
        if (r2 == 0) goto L_0x1e66;
        r2 = r7.mergeDialogId;
        r4 = 0;
        r6 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1));
        if (r6 != 0) goto L_0x1e66;
        r2 = r7.info;
        r2 = r2.migrated_from_chat_id;
        if (r2 == 0) goto L_0x1e66;
        r2 = r7.info;
        r2 = r2.migrated_from_chat_id;
        r2 = -r2;
        r2 = (long) r2;
        r7.mergeDialogId = r2;
        r2 = r7.maxMessageId;
        r3 = r7.info;
        r3 = r3.migrated_from_max_id;
        r4 = 1;
        r2[r4] = r3;
        r2 = r7.chatAdapter;
        if (r2 == 0) goto L_0x1e66;
        r2 = r7.chatAdapter;
        r2.notifyDataSetChanged();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.chatInfoCantLoad;
        if (r8 != r1) goto L_0x1f06;
        r1 = 0;
        r2 = r9[r1];
        r2 = (java.lang.Integer) r2;
        r1 = r2.intValue();
        r2 = r7.currentChat;
        if (r2 == 0) goto L_0x1f04;
        r2 = r7.currentChat;
        r2 = r2.id;
        if (r2 != r1) goto L_0x1f04;
        r2 = 1;
        r3 = r9[r2];
        r3 = (java.lang.Integer) r3;
        r2 = r3.intValue();
        r3 = r80.getParentActivity();
        if (r3 == 0) goto L_0x1f03;
        r3 = r7.closeChatDialog;
        if (r3 == 0) goto L_0x1e93;
        goto L_0x1f03;
        r3 = new org.telegram.ui.ActionBar.AlertDialog$Builder;
        r4 = r80.getParentActivity();
        r3.<init>(r4);
        r4 = "AppName";
        r5 = 2131492981; // 0x7f0c0075 float:1.860943E38 double:1.0530974563E-314;
        r4 = org.telegram.messenger.LocaleController.getString(r4, r5);
        r3.setTitle(r4);
        if (r2 != 0) goto L_0x1eb7;
        r4 = "ChannelCantOpenPrivate";
        r5 = 2131493160; // 0x7f0c0128 float:1.8609792E38 double:1.0530975447E-314;
        r4 = org.telegram.messenger.LocaleController.getString(r4, r5);
        r3.setMessage(r4);
        goto L_0x1ed6;
        r4 = 1;
        if (r2 != r4) goto L_0x1ec7;
        r4 = "ChannelCantOpenNa";
        r5 = 2131493159; // 0x7f0c0127 float:1.860979E38 double:1.053097544E-314;
        r4 = org.telegram.messenger.LocaleController.getString(r4, r5);
        r3.setMessage(r4);
        goto L_0x1ed6;
        r4 = 2;
        if (r2 != r4) goto L_0x1ed6;
        r4 = "ChannelCantOpenBanned";
        r5 = 2131493158; // 0x7f0c0126 float:1.8609788E38 double:1.0530975437E-314;
        r4 = org.telegram.messenger.LocaleController.getString(r4, r5);
        r3.setMessage(r4);
        r4 = "OK";
        r5 = 2131494028; // 0x7f0c048c float:1.8611553E38 double:1.0530979736E-314;
        r4 = org.telegram.messenger.LocaleController.getString(r4, r5);
        r5 = 0;
        r3.setPositiveButton(r4, r5);
        r4 = r3.create();
        r7.closeChatDialog = r4;
        r7.showDialog(r4);
        r4 = 0;
        r7.loading = r4;
        r4 = r7.progressView;
        if (r4 == 0) goto L_0x1ef9;
        r4 = r7.progressView;
        r5 = 4;
        r4.setVisibility(r5);
        r4 = r7.chatAdapter;
        if (r4 == 0) goto L_0x1f04;
        r4 = r7.chatAdapter;
        r4.notifyDataSetChanged();
        goto L_0x1f04;
        return;
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.contactsDidLoaded;
        if (r8 != r1) goto L_0x1f1f;
        r80.updateContactStatus();
        r1 = r7.currentEncryptedChat;
        if (r1 == 0) goto L_0x1f14;
        r80.updateSpamView();
        r1 = r7.avatarContainer;
        if (r1 == 0) goto L_0x2bd8;
        r1 = r7.avatarContainer;
        r1.updateSubtitle();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.encryptedChatUpdated;
        if (r8 != r1) goto L_0x1f9c;
        r1 = 0;
        r2 = r9[r1];
        r1 = r2;
        r1 = (org.telegram.tgnet.TLRPC.EncryptedChat) r1;
        r2 = r7.currentEncryptedChat;
        if (r2 == 0) goto L_0x1f9a;
        r2 = r1.id;
        r3 = r7.currentEncryptedChat;
        r3 = r3.id;
        if (r2 != r3) goto L_0x1f9a;
        r7.currentEncryptedChat = r1;
        r80.updateContactStatus();
        r80.updateSecretStatus();
        r80.initStickers();
        r2 = r7.chatActivityEnterView;
        if (r2 == 0) goto L_0x1f76;
        r2 = r7.chatActivityEnterView;
        r3 = r7.currentEncryptedChat;
        if (r3 == 0) goto L_0x1f59;
        r3 = r7.currentEncryptedChat;
        r3 = r3.layer;
        r3 = org.telegram.messenger.AndroidUtilities.getPeerLayerVersion(r3);
        r4 = 23;
        if (r3 < r4) goto L_0x1f57;
        goto L_0x1f59;
        r3 = 0;
        goto L_0x1f5a;
        r3 = 1;
        r4 = r7.currentEncryptedChat;
        if (r4 == 0) goto L_0x1f6d;
        r4 = r7.currentEncryptedChat;
        r4 = r4.layer;
        r4 = org.telegram.messenger.AndroidUtilities.getPeerLayerVersion(r4);
        r5 = 46;
        if (r4 < r5) goto L_0x1f6b;
        goto L_0x1f6d;
        r4 = 0;
        goto L_0x1f6e;
        r4 = 1;
        r2.setAllowStickersAndGifs(r3, r4);
        r2 = r7.chatActivityEnterView;
        r2.checkRoundVideo();
        r2 = r7.mentionsAdapter;
        if (r2 == 0) goto L_0x1f9a;
        r2 = r7.mentionsAdapter;
        r3 = r7.chatActivityEnterView;
        r3 = r3.isEditingMessage();
        if (r3 != 0) goto L_0x1f96;
        r3 = r7.currentEncryptedChat;
        if (r3 == 0) goto L_0x1f94;
        r3 = r7.currentEncryptedChat;
        r3 = r3.layer;
        r3 = org.telegram.messenger.AndroidUtilities.getPeerLayerVersion(r3);
        r4 = 46;
        if (r3 < r4) goto L_0x1f96;
        r3 = 1;
        goto L_0x1f97;
        r3 = 0;
        r2.setNeedBotContext(r3);
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.messagesReadEncrypted;
        if (r8 != r1) goto L_0x1ff3;
        r1 = 0;
        r1 = r9[r1];
        r1 = (java.lang.Integer) r1;
        r1 = r1.intValue();
        r2 = r7.currentEncryptedChat;
        if (r2 == 0) goto L_0x1ff1;
        r2 = r7.currentEncryptedChat;
        r2 = r2.id;
        if (r2 != r1) goto L_0x1ff1;
        r2 = 1;
        r3 = r9[r2];
        r3 = (java.lang.Integer) r3;
        r2 = r3.intValue();
        r3 = r7.messages;
        r3 = r3.iterator();
        r4 = r3.hasNext();
        if (r4 == 0) goto L_0x1fee;
        r4 = r3.next();
        r4 = (org.telegram.messenger.MessageObject) r4;
        r5 = r4.isOut();
        if (r5 != 0) goto L_0x1fd5;
        goto L_0x1fc2;
        r5 = r4.isOut();
        if (r5 == 0) goto L_0x1fe2;
        r5 = r4.isUnread();
        if (r5 != 0) goto L_0x1fe2;
        goto L_0x1fee;
        r5 = r4.messageOwner;
        r5 = r5.date;
        r6 = 1;
        r5 = r5 - r6;
        if (r5 > r2) goto L_0x1fed;
        r4.setIsRead();
        goto L_0x1fc2;
        r80.updateVisibleRows();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.removeAllMessagesFromDialog;
        if (r8 != r1) goto L_0x213f;
        r1 = 0;
        r2 = r9[r1];
        r2 = (java.lang.Long) r2;
        r1 = r2.longValue();
        r3 = r7.dialog_id;
        r5 = (r3 > r1 ? 1 : (r3 == r1 ? 0 : -1));
        if (r5 != 0) goto L_0x213d;
        r3 = r7.messages;
        r3.clear();
        r3 = r7.waitingForLoad;
        r3.clear();
        r3 = r7.messagesByDays;
        r3.clear();
        r3 = r7.groupedMessagesMap;
        r3.clear();
        r3 = 1;
        if (r3 < 0) goto L_0x2064;
        r4 = r7.messagesDict;
        r4 = r4[r3];
        r4.clear();
        r4 = r7.currentEncryptedChat;
        if (r4 != 0) goto L_0x2036;
        r4 = r7.maxMessageId;
        r5 = 2147483647; // 0x7fffffff float:NaN double:1.060997895E-314;
        r4[r3] = r5;
        r4 = r7.minMessageId;
        r6 = -2147483648; // 0xffffffff80000000 float:-0.0 double:NaN;
        r4[r3] = r6;
        goto L_0x2043;
        r5 = 2147483647; // 0x7fffffff float:NaN double:1.060997895E-314;
        r6 = -2147483648; // 0xffffffff80000000 float:-0.0 double:NaN;
        r4 = r7.maxMessageId;
        r4[r3] = r6;
        r4 = r7.minMessageId;
        r4[r3] = r5;
        r4 = r7.maxDate;
        r4[r3] = r6;
        r4 = r7.minDate;
        r10 = 0;
        r4[r3] = r10;
        r4 = r7.selectedMessagesIds;
        r4 = r4[r3];
        r4.clear();
        r4 = r7.selectedMessagesCanCopyIds;
        r4 = r4[r3];
        r4.clear();
        r4 = r7.selectedMessagesCanStarIds;
        r4 = r4[r3];
        r4.clear();
        r3 = r3 + -1;
        goto L_0x201b;
        r3 = 0;
        r7.cantDeleteMessagesCount = r3;
        r7.canEditMessagesCount = r3;
        r3 = r7.actionBar;
        r3.hideActionMode();
        r3 = 1;
        r7.updatePinnedMessageView(r3);
        r3 = r7.botButtons;
        if (r3 == 0) goto L_0x2083;
        r3 = 0;
        r7.botButtons = r3;
        r4 = r7.chatActivityEnterView;
        if (r4 == 0) goto L_0x2083;
        r4 = r7.chatActivityEnterView;
        r5 = 0;
        r4.setButtons(r3, r5);
        r3 = 1;
        r4 = r9[r3];
        r4 = (java.lang.Boolean) r4;
        r3 = r4.booleanValue();
        if (r3 == 0) goto L_0x210a;
        r3 = r7.chatAdapter;
        if (r3 == 0) goto L_0x20a9;
        r3 = r7.progressView;
        r4 = r7.chatAdapter;
        r4 = r4.botInfoRow;
        r5 = -1;
        if (r4 != r5) goto L_0x209f;
        r4 = 0;
        goto L_0x20a0;
        r4 = 4;
        r3.setVisibility(r4);
        r3 = r7.chatListView;
        r4 = 0;
        r3.setEmptyView(r4);
        r3 = 0;
        r4 = 2;
        if (r3 >= r4) goto L_0x20be;
        r5 = r7.endReached;
        r6 = 0;
        r5[r3] = r6;
        r5 = r7.cacheEndReached;
        r5[r3] = r6;
        r5 = r7.forwardEndReached;
        r6 = 1;
        r5[r3] = r6;
        r3 = r3 + 1;
        goto L_0x20aa;
        r6 = 1;
        r7.first = r6;
        r7.firstLoading = r6;
        r7.loading = r6;
        r3 = 0;
        r7.startLoadFromMessageId = r3;
        r7.needSelectFromMessageId = r3;
        r3 = r7.waitingForLoad;
        r4 = r7.lastLoadIndex;
        r4 = java.lang.Integer.valueOf(r4);
        r3.add(r4);
        r3 = r7.currentAccount;
        r10 = org.telegram.messenger.MessagesController.getInstance(r3);
        r11 = r7.dialog_id;
        r3 = org.telegram.messenger.AndroidUtilities.isTablet();
        if (r3 == 0) goto L_0x20e7;
        r3 = 30;
        r13 = r3;
        goto L_0x20ea;
        r3 = 20;
        goto L_0x20e5;
        r14 = 0;
        r15 = 0;
        r16 = 1;
        r17 = 0;
        r3 = r7.classGuid;
        r19 = 2;
        r20 = 0;
        r4 = r7.currentChat;
        r21 = org.telegram.messenger.ChatObject.isChannel(r4);
        r4 = r7.lastLoadIndex;
        r5 = r4 + 1;
        r7.lastLoadIndex = r5;
        r18 = r3;
        r22 = r4;
        r10.loadMessages(r11, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22);
        goto L_0x211b;
        r3 = r7.progressView;
        if (r3 == 0) goto L_0x211b;
        r3 = r7.progressView;
        r4 = 4;
        r3.setVisibility(r4);
        r3 = r7.chatListView;
        r4 = r7.emptyViewContainer;
        r3.setEmptyView(r4);
        r3 = r7.chatAdapter;
        if (r3 == 0) goto L_0x2124;
        r3 = r7.chatAdapter;
        r3.notifyDataSetChanged();
        r3 = r7.currentEncryptedChat;
        if (r3 != 0) goto L_0x213d;
        r3 = r7.currentUser;
        if (r3 == 0) goto L_0x213d;
        r3 = r7.currentUser;
        r3 = r3.bot;
        if (r3 == 0) goto L_0x213d;
        r3 = r7.botUser;
        if (r3 != 0) goto L_0x213d;
        r3 = "";
        r7.botUser = r3;
        r80.updateBottomOverlay();
        goto L_0x2bd8;
        r4 = 2;
        r1 = org.telegram.messenger.NotificationCenter.screenshotTook;
        if (r8 != r1) goto L_0x2149;
        r80.updateInformationForScreenshotDetector();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.blockedUsersDidLoaded;
        if (r8 != r1) goto L_0x2172;
        r1 = r7.currentUser;
        if (r1 == 0) goto L_0x2bd8;
        r1 = r7.userBlocked;
        r2 = r7.currentAccount;
        r2 = org.telegram.messenger.MessagesController.getInstance(r2);
        r2 = r2.blockedUsers;
        r3 = r7.currentUser;
        r3 = r3.id;
        r3 = java.lang.Integer.valueOf(r3);
        r2 = r2.contains(r3);
        r7.userBlocked = r2;
        r2 = r7.userBlocked;
        if (r1 == r2) goto L_0x2170;
        r80.updateBottomOverlay();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.FileNewChunkAvailable;
        if (r8 != r1) goto L_0x21b4;
        r1 = 0;
        r2 = r9[r1];
        r1 = r2;
        r1 = (org.telegram.messenger.MessageObject) r1;
        r2 = 3;
        r2 = r9[r2];
        r2 = (java.lang.Long) r2;
        r2 = r2.longValue();
        r4 = 0;
        r6 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1));
        if (r6 == 0) goto L_0x21b2;
        r4 = r7.dialog_id;
        r10 = r1.getDialogId();
        r6 = (r4 > r10 ? 1 : (r4 == r10 ? 0 : -1));
        if (r6 != 0) goto L_0x21b2;
        r4 = r7.messagesDict;
        r5 = 0;
        r4 = r4[r5];
        r5 = r1.getId();
        r4 = r4.get(r5);
        r4 = (org.telegram.messenger.MessageObject) r4;
        if (r4 == 0) goto L_0x21b2;
        r5 = r4.messageOwner;
        r5 = r5.media;
        r5 = r5.document;
        r6 = (int) r2;
        r5.size = r6;
        r80.updateVisibleRows();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.didCreatedNewDeleteTask;
        r2 = 32;
        if (r8 != r1) goto L_0x221f;
        r1 = 0;
        r3 = r9[r1];
        r1 = r3;
        r1 = (android.util.SparseArray) r1;
        r3 = 0;
        r4 = r3;
        r3 = 0;
        r5 = r1.size();
        if (r3 >= r5) goto L_0x2218;
        r5 = r1.keyAt(r3);
        r6 = r1.get(r5);
        r6 = (java.util.ArrayList) r6;
        r10 = r4;
        r4 = 0;
        r11 = r6.size();
        if (r4 >= r11) goto L_0x2214;
        r11 = r6.get(r4);
        r11 = (java.lang.Long) r11;
        r11 = r11.longValue();
        if (r4 != 0) goto L_0x21fe;
        r13 = r11 >> r2;
        r13 = (int) r13;
        if (r13 >= 0) goto L_0x21ed;
        r13 = 0;
        r14 = r7.currentChat;
        r14 = org.telegram.messenger.ChatObject.isChannel(r14);
        if (r14 == 0) goto L_0x21fa;
        r14 = r7.currentChat;
        r14 = r14.id;
        goto L_0x21fb;
        r14 = 0;
        if (r13 == r14) goto L_0x21fe;
        return;
        r13 = r7.messagesDict;
        r14 = 0;
        r13 = r13[r14];
        r14 = (int) r11;
        r13 = r13.get(r14);
        r13 = (org.telegram.messenger.MessageObject) r13;
        if (r13 == 0) goto L_0x2211;
        r14 = r13.messageOwner;
        r14.destroyTime = r5;
        r10 = 1;
        r4 = r4 + 1;
        goto L_0x21d5;
        r3 = r3 + 1;
        r4 = r10;
        goto L_0x21c3;
        if (r4 == 0) goto L_0x221d;
        r80.updateVisibleRows();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.messagePlayingDidStarted;
        if (r8 != r1) goto L_0x22d5;
        r1 = 0;
        r2 = r9[r1];
        r1 = r2;
        r1 = (org.telegram.messenger.MessageObject) r1;
        r2 = r1.eventId;
        r4 = 0;
        r6 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1));
        if (r6 == 0) goto L_0x2232;
        return;
        r7.sendSecretMessageRead(r1);
        r2 = r1.isRoundVideo();
        if (r2 == 0) goto L_0x224e;
        r2 = org.telegram.messenger.MediaController.getInstance();
        r3 = 1;
        r4 = r7.createTextureView(r3);
        r5 = r7.aspectRatioFrameLayout;
        r6 = r7.roundVideoContainer;
        r2.setTextureView(r4, r5, r6, r3);
        r80.updateTextureViewPosition();
        r2 = r7.chatListView;
        if (r2 == 0) goto L_0x22d3;
        r2 = r7.chatListView;
        r2 = r2.getChildCount();
        r3 = 0;
        if (r3 >= r2) goto L_0x22a4;
        r4 = r7.chatListView;
        r4 = r4.getChildAt(r3);
        r5 = r4 instanceof org.telegram.ui.Cells.ChatMessageCell;
        if (r5 == 0) goto L_0x22a1;
        r5 = r4;
        r5 = (org.telegram.ui.Cells.ChatMessageCell) r5;
        r6 = r5.getMessageObject();
        if (r6 == 0) goto L_0x22a1;
        r10 = r6.isVoice();
        if (r10 != 0) goto L_0x229d;
        r10 = r6.isMusic();
        if (r10 == 0) goto L_0x227b;
        goto L_0x229d;
        r10 = r6.isRoundVideo();
        if (r10 == 0) goto L_0x22a1;
        r10 = 0;
        r5.checkRoundVideoPlayback(r10);
        r10 = org.telegram.messenger.MediaController.getInstance();
        r10 = r10.isPlayingMessage(r6);
        if (r10 != 0) goto L_0x22a1;
        r10 = r6.audioProgress;
        r11 = 0;
        r10 = (r10 > r11 ? 1 : (r10 == r11 ? 0 : -1));
        if (r10 == 0) goto L_0x22a1;
        r6.resetPlayingProgress();
        r5.invalidate();
        goto L_0x22a1;
        r10 = 0;
        r5.updateButtonState(r10);
        r3 = r3 + 1;
        goto L_0x2259;
        r3 = r7.mentionListView;
        r2 = r3.getChildCount();
        r3 = 0;
        if (r3 >= r2) goto L_0x22d3;
        r4 = r7.mentionListView;
        r4 = r4.getChildAt(r3);
        r5 = r4 instanceof org.telegram.ui.Cells.ContextLinkCell;
        if (r5 == 0) goto L_0x22d0;
        r5 = r4;
        r5 = (org.telegram.ui.Cells.ContextLinkCell) r5;
        r6 = r5.getMessageObject();
        if (r6 == 0) goto L_0x22d0;
        r10 = r6.isVoice();
        if (r10 != 0) goto L_0x22cc;
        r10 = r6.isMusic();
        if (r10 == 0) goto L_0x22d0;
        r10 = 0;
        r5.updateButtonState(r10);
        r3 = r3 + 1;
        goto L_0x22ab;
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.messagePlayingDidReset;
        if (r8 == r1) goto L_0x2b53;
        r1 = org.telegram.messenger.NotificationCenter.messagePlayingPlayStateChanged;
        if (r8 != r1) goto L_0x22df;
        goto L_0x2b53;
        r1 = org.telegram.messenger.NotificationCenter.messagePlayingProgressDidChanged;
        if (r8 != r1) goto L_0x233e;
        r1 = 0;
        r2 = r9[r1];
        r1 = r2;
        r1 = (java.lang.Integer) r1;
        r2 = r7.chatListView;
        if (r2 == 0) goto L_0x233c;
        r2 = r7.chatListView;
        r2 = r2.getChildCount();
        r27 = 0;
        r3 = r27;
        if (r3 >= r2) goto L_0x233c;
        r4 = r7.chatListView;
        r4 = r4.getChildAt(r3);
        r5 = r4 instanceof org.telegram.ui.Cells.ChatMessageCell;
        if (r5 == 0) goto L_0x2339;
        r5 = r4;
        r5 = (org.telegram.ui.Cells.ChatMessageCell) r5;
        r6 = r5.getMessageObject();
        if (r6 == 0) goto L_0x2339;
        r10 = r6.getId();
        r11 = r1.intValue();
        if (r10 != r11) goto L_0x2339;
        r10 = org.telegram.messenger.MediaController.getInstance();
        r10 = r10.getPlayingMessageObject();
        if (r10 == 0) goto L_0x233c;
        r11 = r10.audioProgress;
        r6.audioProgress = r11;
        r11 = r10.audioProgressSec;
        r6.audioProgressSec = r11;
        r11 = r10.audioPlayerDuration;
        r6.audioPlayerDuration = r11;
        r5.updatePlayingMessageProgress();
        r11 = r7.drawLaterRoundProgressCell;
        if (r11 != r5) goto L_0x233c;
        r11 = r7.fragmentView;
        r11.invalidate();
        goto L_0x233c;
        r27 = r3 + 1;
        goto L_0x22f5;
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.updateMessageMedia;
        if (r8 != r1) goto L_0x2468;
        r1 = 0;
        r2 = r9[r1];
        r2 = (org.telegram.tgnet.TLRPC.Message) r2;
        r3 = r7.messagesDict;
        r3 = r3[r1];
        r1 = r2.id;
        r1 = r3.get(r1);
        r1 = (org.telegram.messenger.MessageObject) r1;
        if (r1 == 0) goto L_0x2466;
        r3 = r1.messageOwner;
        r4 = r2.media;
        r3.media = r4;
        r3 = r1.messageOwner;
        r4 = r2.attachPath;
        r3.attachPath = r4;
        r3 = 0;
        r1.generateThumbs(r3);
        r3 = r1.getGroupId();
        r5 = 0;
        r10 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1));
        if (r10 == 0) goto L_0x2444;
        r3 = r1.photoThumbs;
        if (r3 == 0) goto L_0x237b;
        r3 = r1.photoThumbs;
        r3 = r3.isEmpty();
        if (r3 == 0) goto L_0x2444;
        r3 = r7.groupedMessagesMap;
        r4 = r1.getGroupId();
        r3 = r3.get(r4);
        r3 = (org.telegram.messenger.MessageObject.GroupedMessages) r3;
        if (r3 == 0) goto L_0x2444;
        r4 = r3.messages;
        r4 = r4.indexOf(r1);
        if (r4 < 0) goto L_0x2444;
        r5 = r3.messages;
        r5 = r5.size();
        r6 = 0;
        if (r4 <= 0) goto L_0x2401;
        r10 = r3.messages;
        r10 = r10.size();
        r11 = 1;
        r10 = r10 - r11;
        if (r4 >= r10) goto L_0x2401;
        r10 = new org.telegram.messenger.MessageObject$GroupedMessages;
        r10.<init>();
        r11 = org.telegram.messenger.Utilities.random;
        r11 = r11.nextLong();
        r10.groupId = r11;
        r11 = r10.messages;
        r12 = r3.messages;
        r13 = r4 + 1;
        r14 = r3.messages;
        r14 = r14.size();
        r12 = r12.subList(r13, r14);
        r11.addAll(r12);
        r27 = 0;
        r11 = r27;
        r12 = r10.messages;
        r12 = r12.size();
        if (r11 >= r12) goto L_0x23e6;
        r12 = r10.messages;
        r12 = r12.get(r11);
        r12 = (org.telegram.messenger.MessageObject) r12;
        r13 = r10.groupId;
        r12.localGroupId = r13;
        r12 = r3.messages;
        r13 = r4 + 1;
        r12.remove(r13);
        r27 = r11 + 1;
        goto L_0x23c6;
        r11 = r7.groupedMessagesMap;
        r12 = r10.groupId;
        r11.put(r12, r10);
        r11 = r10.messages;
        r12 = r10.messages;
        r12 = r12.size();
        r13 = 1;
        r12 = r12 - r13;
        r11 = r11.get(r12);
        r6 = r11;
        r6 = (org.telegram.messenger.MessageObject) r6;
        r10.calculate();
        r10 = r3.messages;
        r10.remove(r4);
        r10 = r3.messages;
        r10 = r10.isEmpty();
        if (r10 == 0) goto L_0x2416;
        r10 = r7.groupedMessagesMap;
        r11 = r3.groupId;
        r10.remove(r11);
        goto L_0x2444;
        if (r6 != 0) goto L_0x2429;
        r10 = r3.messages;
        r11 = r3.messages;
        r11 = r11.size();
        r12 = 1;
        r11 = r11 - r12;
        r10 = r10.get(r11);
        r6 = r10;
        r6 = (org.telegram.messenger.MessageObject) r6;
        r3.calculate();
        r10 = r7.messages;
        r10 = r10.indexOf(r6);
        if (r10 < 0) goto L_0x2444;
        r11 = r7.chatAdapter;
        if (r11 == 0) goto L_0x2444;
        r11 = r7.chatAdapter;
        r12 = r7.chatAdapter;
        r12 = r12.messagesStartRow;
        r12 = r12 + r10;
        r11.notifyItemRangeChanged(r12, r5);
        r3 = r2.media;
        r3 = r3.ttl_seconds;
        if (r3 == 0) goto L_0x2463;
        r3 = r2.media;
        r3 = r3.photo;
        r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_photoEmpty;
        if (r3 != 0) goto L_0x245a;
        r3 = r2.media;
        r3 = r3.document;
        r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_documentEmpty;
        if (r3 == 0) goto L_0x2463;
        r1.setType();
        r3 = r7.chatAdapter;
        r3.updateRowWithMessageObject(r1);
        goto L_0x2466;
        r80.updateVisibleRows();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.replaceMessagesObjects;
        if (r8 != r1) goto L_0x2726;
        r1 = 0;
        r2 = r9[r1];
        r2 = (java.lang.Long) r2;
        r1 = r2.longValue();
        r3 = r7.dialog_id;
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 == 0) goto L_0x2482;
        r3 = r7.mergeDialogId;
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 == 0) goto L_0x2482;
        return;
        r3 = r7.dialog_id;
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 != 0) goto L_0x248a;
        r3 = 0;
        goto L_0x248b;
        r3 = 1;
        r4 = 0;
        r5 = 0;
        r6 = 1;
        r10 = r9[r6];
        r6 = r10;
        r6 = (java.util.ArrayList) r6;
        r10 = 0;
        r11 = r5;
        r5 = r4;
        r4 = 0;
        r12 = r6.size();
        if (r4 >= r12) goto L_0x26c6;
        r12 = r6.get(r4);
        r12 = (org.telegram.messenger.MessageObject) r12;
        r13 = r7.messagesDict;
        r13 = r13[r3];
        r14 = r12.getId();
        r13 = r13.get(r14);
        r13 = (org.telegram.messenger.MessageObject) r13;
        r14 = r7.pinnedMessageObject;
        if (r14 == 0) goto L_0x24c7;
        r14 = r7.pinnedMessageObject;
        r14 = r14.getId();
        r15 = r12.getId();
        if (r14 != r15) goto L_0x24c7;
        r7.pinnedMessageObject = r12;
        r14 = 1;
        r7.updatePinnedMessageView(r14);
        if (r13 == 0) goto L_0x26ac;
        r14 = r12.type;
        if (r14 < 0) goto L_0x2515;
        if (r11 != 0) goto L_0x24d8;
        r14 = r12.messageOwner;
        r14 = r14.media;
        r14 = r14 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaWebPage;
        if (r14 == 0) goto L_0x24d8;
        r11 = 1;
        r14 = r13.replyMessageObject;
        if (r14 == 0) goto L_0x24f9;
        r14 = r13.replyMessageObject;
        r12.replyMessageObject = r14;
        r14 = r12.messageOwner;
        r14 = r14.action;
        r14 = r14 instanceof org.telegram.tgnet.TLRPC.TL_messageActionGameScore;
        if (r14 == 0) goto L_0x24ed;
        r14 = 0;
        r12.generateGameMessageText(r14);
        goto L_0x24f9;
        r14 = 0;
        r15 = r12.messageOwner;
        r15 = r15.action;
        r15 = r15 instanceof org.telegram.tgnet.TLRPC.TL_messageActionPaymentSent;
        if (r15 == 0) goto L_0x24f9;
        r12.generatePaymentSentMessageText(r14);
        r14 = r12.messageOwner;
        r15 = r13.messageOwner;
        r15 = r15.attachPath;
        r14.attachPath = r15;
        r14 = r13.attachPathExists;
        r12.attachPathExists = r14;
        r14 = r13.mediaExists;
        r12.mediaExists = r14;
        r14 = r7.messagesDict;
        r14 = r14[r3];
        r15 = r13.getId();
        r14.put(r15, r12);
        goto L_0x2520;
        r14 = r7.messagesDict;
        r14 = r14[r3];
        r15 = r13.getId();
        r14.remove(r15);
        r14 = r7.messages;
        r14 = r14.indexOf(r13);
        if (r14 < 0) goto L_0x26ac;
        r15 = r7.messagesByDays;
        r70 = r1;
        r1 = r13.dateKey;
        r1 = r15.get(r1);
        r1 = (java.util.ArrayList) r1;
        r2 = -1;
        if (r1 == 0) goto L_0x253b;
        r2 = r1.indexOf(r13);
        r15 = r13.getGroupId();
        r17 = 0;
        r20 = (r15 > r17 ? 1 : (r15 == r17 ? 0 : -1));
        if (r20 == 0) goto L_0x263a;
        r15 = r7.groupedMessagesMap;
        r73 = r5;
        r72 = r6;
        r5 = r13.getGroupId();
        r5 = r15.get(r5);
        r5 = (org.telegram.messenger.MessageObject.GroupedMessages) r5;
        if (r5 == 0) goto L_0x2631;
        r6 = r5.messages;
        r6 = r6.indexOf(r13);
        if (r6 < 0) goto L_0x2631;
        r15 = r13.getGroupId();
        r20 = r12.getGroupId();
        r22 = (r15 > r20 ? 1 : (r15 == r20 ? 0 : -1));
        if (r22 == 0) goto L_0x2574;
        r15 = r7.groupedMessagesMap;
        r8 = r12.getGroupId();
        r15.put(r8, r5);
        r8 = r12.photoThumbs;
        if (r8 == 0) goto L_0x25ae;
        r8 = r12.photoThumbs;
        r8 = r8.isEmpty();
        if (r8 == 0) goto L_0x2581;
        goto L_0x25ae;
        r8 = r5.messages;
        r8.set(r6, r12);
        r8 = r5.positions;
        r8 = r8.remove(r13);
        r8 = (org.telegram.messenger.MessageObject.GroupedMessagePosition) r8;
        if (r8 == 0) goto L_0x2595;
        r9 = r5.positions;
        r9.put(r12, r8);
        if (r10 != 0) goto L_0x259d;
        r9 = new android.util.LongSparseArray;
        r9.<init>();
        r10 = r9;
        r74 = r8;
        r8 = r5.groupId;
        r10.put(r8, r5);
        r77 = r1;
        r78 = r2;
        r75 = r3;
        r76 = r4;
        goto L_0x2646;
        if (r10 != 0) goto L_0x25b6;
        r8 = new android.util.LongSparseArray;
        r8.<init>();
        r10 = r8;
        r8 = r5.groupId;
        r10.put(r8, r5);
        if (r6 <= 0) goto L_0x2623;
        r8 = r5.messages;
        r8 = r8.size();
        r9 = 1;
        r8 = r8 - r9;
        if (r6 >= r8) goto L_0x2623;
        r8 = new org.telegram.messenger.MessageObject$GroupedMessages;
        r8.<init>();
        r9 = org.telegram.messenger.Utilities.random;
        r75 = r3;
        r76 = r4;
        r3 = r9.nextLong();
        r8.groupId = r3;
        r3 = r8.messages;
        r4 = r5.messages;
        r9 = r6 + 1;
        r15 = r5.messages;
        r15 = r15.size();
        r4 = r4.subList(r9, r15);
        r3.addAll(r4);
        r3 = 0;
        r4 = r8.messages;
        r4 = r4.size();
        if (r3 >= r4) goto L_0x2612;
        r4 = r8.messages;
        r4 = r4.get(r3);
        r4 = (org.telegram.messenger.MessageObject) r4;
        r77 = r1;
        r78 = r2;
        r1 = r8.groupId;
        r4.localGroupId = r1;
        r1 = r5.messages;
        r2 = r6 + 1;
        r1.remove(r2);
        r3 = r3 + 1;
        r1 = r77;
        r2 = r78;
        goto L_0x25ec;
        r77 = r1;
        r78 = r2;
        r1 = r8.groupId;
        r10.put(r1, r8);
        r1 = r7.groupedMessagesMap;
        r2 = r8.groupId;
        r1.put(r2, r8);
        goto L_0x262b;
        r77 = r1;
        r78 = r2;
        r75 = r3;
        r76 = r4;
        r1 = r5.messages;
        r1.remove(r6);
        goto L_0x2646;
        r77 = r1;
        r78 = r2;
        r75 = r3;
        r76 = r4;
        goto L_0x2646;
        r77 = r1;
        r78 = r2;
        r75 = r3;
        r76 = r4;
        r73 = r5;
        r72 = r6;
        r1 = r12.type;
        if (r1 < 0) goto L_0x266e;
        r1 = r7.messages;
        r1.set(r14, r12);
        r1 = r7.chatAdapter;
        if (r1 == 0) goto L_0x265f;
        r1 = r7.chatAdapter;
        r2 = r7.chatAdapter;
        r2 = r2.messagesStartRow;
        r2 = r2 + r14;
        r1.updateRowAtPosition(r2);
        if (r78 < 0) goto L_0x2669;
        r1 = r77;
        r2 = r78;
        r1.set(r2, r12);
        goto L_0x266d;
        r1 = r77;
        r2 = r78;
        goto L_0x26a9;
        r1 = r77;
        r2 = r78;
        r3 = r7.messages;
        r3.remove(r14);
        r3 = r7.chatAdapter;
        if (r3 == 0) goto L_0x2687;
        r3 = r7.chatAdapter;
        r4 = r7.chatAdapter;
        r4 = r4.messagesStartRow;
        r4 = r4 + r14;
        r3.notifyItemRemoved(r4);
        if (r2 < 0) goto L_0x26a9;
        r1.remove(r2);
        r3 = r1.isEmpty();
        if (r3 == 0) goto L_0x26a9;
        r3 = r7.messagesByDays;
        r4 = r13.dateKey;
        r3.remove(r4);
        r3 = r7.messages;
        r3.remove(r14);
        r3 = r7.chatAdapter;
        r4 = r7.chatAdapter;
        r4 = r4.messagesStartRow;
        r3.notifyItemRemoved(r4);
        r1 = 1;
        r5 = r1;
        goto L_0x26b8;
        r70 = r1;
        r75 = r3;
        r76 = r4;
        r73 = r5;
        r72 = r6;
        r17 = 0;
        r4 = r76 + 1;
        r1 = r70;
        r6 = r72;
        r3 = r75;
        r8 = r81;
        r9 = r83;
        goto L_0x2497;
        r70 = r1;
        r75 = r3;
        r73 = r5;
        r72 = r6;
        if (r10 == 0) goto L_0x2724;
        r27 = 0;
        r1 = r27;
        r2 = r10.size();
        if (r1 >= r2) goto L_0x2724;
        r2 = r10.valueAt(r1);
        r2 = (org.telegram.messenger.MessageObject.GroupedMessages) r2;
        r3 = r2.messages;
        r3 = r3.isEmpty();
        if (r3 == 0) goto L_0x26f0;
        r3 = r7.groupedMessagesMap;
        r4 = r2.groupId;
        r3.remove(r4);
        goto L_0x2721;
        r2.calculate();
        r3 = r2.messages;
        r4 = r2.messages;
        r4 = r4.size();
        r5 = 1;
        r4 = r4 - r5;
        r3 = r3.get(r4);
        r3 = (org.telegram.messenger.MessageObject) r3;
        r4 = r7.messages;
        r4 = r4.indexOf(r3);
        if (r4 < 0) goto L_0x2721;
        r5 = r7.chatAdapter;
        if (r5 == 0) goto L_0x2721;
        r5 = r7.chatAdapter;
        r6 = r7.chatAdapter;
        r6 = r6.messagesStartRow;
        r6 = r6 + r4;
        r8 = r2.messages;
        r8 = r8.size();
        r5.notifyItemRangeChanged(r6, r8);
        r27 = r1 + 1;
        goto L_0x26d2;
        goto L_0x0a8b;
        r1 = org.telegram.messenger.NotificationCenter.notificationsSettingsUpdated;
        r8 = r81;
        if (r8 != r1) goto L_0x273c;
        r80.updateTitleIcons();
        r1 = r7.currentChat;
        r1 = org.telegram.messenger.ChatObject.isChannel(r1);
        if (r1 == 0) goto L_0x0a8d;
        r80.updateBottomOverlay();
        goto L_0x0a8d;
        r1 = org.telegram.messenger.NotificationCenter.didLoadedReplyMessages;
        if (r8 != r1) goto L_0x2756;
        r1 = 0;
        r9 = r83;
        r1 = r9[r1];
        r1 = (java.lang.Long) r1;
        r1 = r1.longValue();
        r3 = r7.dialog_id;
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 != 0) goto L_0x2754;
        r80.updateVisibleRows();
        goto L_0x2bd8;
        r9 = r83;
        r1 = org.telegram.messenger.NotificationCenter.didLoadedPinnedMessage;
        if (r8 != r1) goto L_0x2785;
        r1 = 0;
        r2 = r9[r1];
        r1 = r2;
        r1 = (org.telegram.messenger.MessageObject) r1;
        r2 = r1.getDialogId();
        r4 = r7.dialog_id;
        r6 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1));
        if (r6 != 0) goto L_0x2783;
        r2 = r7.info;
        if (r2 == 0) goto L_0x2783;
        r2 = r7.info;
        r2 = r2.pinned_msg_id;
        r3 = r1.getId();
        if (r2 != r3) goto L_0x2783;
        r7.pinnedMessageObject = r1;
        r2 = 0;
        r7.loadingPinnedMessage = r2;
        r2 = 1;
        r7.updatePinnedMessageView(r2);
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.didReceivedWebpages;
        if (r8 != r1) goto L_0x27e8;
        r1 = 0;
        r2 = r9[r1];
        r1 = r2;
        r1 = (java.util.ArrayList) r1;
        r2 = 0;
        r3 = r2;
        r2 = 0;
        r4 = r1.size();
        if (r2 >= r4) goto L_0x27e1;
        r4 = r1.get(r2);
        r4 = (org.telegram.tgnet.TLRPC.Message) r4;
        r5 = org.telegram.messenger.MessageObject.getDialogId(r4);
        r10 = r7.dialog_id;
        r12 = (r5 > r10 ? 1 : (r5 == r10 ? 0 : -1));
        if (r12 == 0) goto L_0x27af;
        r10 = r7.mergeDialogId;
        r12 = (r5 > r10 ? 1 : (r5 == r10 ? 0 : -1));
        if (r12 == 0) goto L_0x27af;
        goto L_0x27de;
        r10 = r7.messagesDict;
        r11 = r7.dialog_id;
        r13 = (r5 > r11 ? 1 : (r5 == r11 ? 0 : -1));
        if (r13 != 0) goto L_0x27b9;
        r11 = 0;
        goto L_0x27ba;
        r11 = 1;
        r10 = r10[r11];
        r11 = r4.id;
        r10 = r10.get(r11);
        r10 = (org.telegram.messenger.MessageObject) r10;
        if (r10 == 0) goto L_0x27de;
        r11 = r10.messageOwner;
        r12 = new org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
        r12.<init>();
        r11.media = r12;
        r11 = r10.messageOwner;
        r11 = r11.media;
        r12 = r4.media;
        r12 = r12.webpage;
        r11.webpage = r12;
        r11 = 1;
        r10.generateThumbs(r11);
        r3 = 1;
        r2 = r2 + 1;
        goto L_0x2792;
        if (r3 == 0) goto L_0x27e6;
        r80.updateVisibleRows();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.didReceivedWebpagesInUpdates;
        if (r8 != r1) goto L_0x2824;
        r1 = r7.foundWebPage;
        if (r1 == 0) goto L_0x2bd8;
        r1 = 0;
        r2 = r9[r1];
        r10 = r2;
        r10 = (android.util.LongSparseArray) r10;
        r1 = 0;
        r11 = r1;
        r1 = r10.size();
        if (r11 >= r1) goto L_0x2822;
        r1 = r10.valueAt(r11);
        r12 = r1;
        r12 = (org.telegram.tgnet.TLRPC.WebPage) r12;
        r1 = r12.id;
        r3 = r7.foundWebPage;
        r3 = r3.id;
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 != 0) goto L_0x281f;
        r1 = r12 instanceof org.telegram.tgnet.TLRPC.TL_webPageEmpty;
        if (r1 != 0) goto L_0x2815;
        r2 = 1;
        goto L_0x2816;
        r2 = 0;
        r3 = 0;
        r4 = 0;
        r6 = 0;
        r1 = r7;
        r5 = r12;
        r1.showReplyPanel(r2, r3, r4, r5, r6);
        goto L_0x2822;
        r1 = r11 + 1;
        goto L_0x27f7;
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.messagesReadContent;
        if (r8 != r1) goto L_0x28a8;
        r1 = 0;
        r3 = r9[r1];
        r1 = r3;
        r1 = (java.util.ArrayList) r1;
        r3 = 0;
        r4 = r7.currentChat;
        r4 = org.telegram.messenger.ChatObject.isChannel(r4);
        if (r4 == 0) goto L_0x283c;
        r4 = r7.currentChat;
        r13 = r4.id;
        goto L_0x283d;
        r13 = 0;
        r4 = r13;
        r5 = r3;
        r3 = 0;
        r6 = r1.size();
        if (r3 >= r6) goto L_0x28a1;
        r6 = r1.get(r3);
        r6 = (java.lang.Long) r6;
        r10 = r6.longValue();
        r12 = r10 >> r2;
        r6 = (int) r12;
        if (r6 >= 0) goto L_0x2856;
        r6 = 0;
        if (r6 == r4) goto L_0x2859;
        goto L_0x289c;
        r12 = r7.messagesDict;
        r13 = 0;
        r12 = r12[r13];
        r13 = (int) r10;
        r12 = r12.get(r13);
        r12 = (org.telegram.messenger.MessageObject) r12;
        if (r12 == 0) goto L_0x289c;
        r12.setContentIsRead();
        r5 = 1;
        r13 = r12.messageOwner;
        r13 = r13.mentioned;
        if (r13 == 0) goto L_0x289c;
        r13 = r7.newMentionsCount;
        r14 = 1;
        r13 = r13 - r14;
        r7.newMentionsCount = r13;
        r13 = r7.newMentionsCount;
        if (r13 > 0) goto L_0x2884;
        r13 = 0;
        r7.newMentionsCount = r13;
        r7.hasAllMentionsLocal = r14;
        r7.showMentiondownButton(r13, r14);
        goto L_0x289c;
        r13 = 0;
        r15 = r7.mentiondownButtonCounter;
        r2 = "%d";
        r13 = new java.lang.Object[r14];
        r14 = r7.newMentionsCount;
        r14 = java.lang.Integer.valueOf(r14);
        r16 = 0;
        r13[r16] = r14;
        r2 = java.lang.String.format(r2, r13);
        r15.setText(r2);
        r3 = r3 + 1;
        r2 = 32;
        goto L_0x2840;
        if (r5 == 0) goto L_0x28a6;
        r80.updateVisibleRows();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.botInfoDidLoaded;
        if (r8 != r1) goto L_0x291a;
        r1 = 1;
        r2 = r9[r1];
        r2 = (java.lang.Integer) r2;
        r1 = r2.intValue();
        r2 = r7.classGuid;
        if (r2 != r1) goto L_0x2918;
        r2 = 0;
        r2 = r9[r2];
        r2 = (org.telegram.tgnet.TLRPC.BotInfo) r2;
        r3 = r7.currentEncryptedChat;
        if (r3 != 0) goto L_0x2915;
        r3 = r2.commands;
        r3 = r3.isEmpty();
        if (r3 != 0) goto L_0x28d5;
        r3 = r7.currentChat;
        r3 = org.telegram.messenger.ChatObject.isChannel(r3);
        if (r3 != 0) goto L_0x28d5;
        r3 = 1;
        r7.hasBotsCommands = r3;
        r3 = r7.botInfo;
        r4 = r2.user_id;
        r3.put(r4, r2);
        r3 = r7.chatAdapter;
        if (r3 == 0) goto L_0x28eb;
        r3 = r7.chatAdapter;
        r4 = r7.chatAdapter;
        r4 = r4.botInfoRow;
        r3.notifyItemChanged(r4);
        r3 = r7.mentionsAdapter;
        if (r3 == 0) goto L_0x2908;
        r3 = r7.currentChat;
        r3 = org.telegram.messenger.ChatObject.isChannel(r3);
        if (r3 == 0) goto L_0x2901;
        r3 = r7.currentChat;
        if (r3 == 0) goto L_0x2908;
        r3 = r7.currentChat;
        r3 = r3.megagroup;
        if (r3 == 0) goto L_0x2908;
        r3 = r7.mentionsAdapter;
        r4 = r7.botInfo;
        r3.setBotInfo(r4);
        r3 = r7.chatActivityEnterView;
        if (r3 == 0) goto L_0x2915;
        r3 = r7.chatActivityEnterView;
        r4 = r7.botsCount;
        r5 = r7.hasBotsCommands;
        r3.setBotsCount(r4, r5);
        r80.updateBotButtons();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.botKeyboardDidLoaded;
        if (r8 != r1) goto L_0x296c;
        r1 = r7.dialog_id;
        r3 = 1;
        r3 = r9[r3];
        r3 = (java.lang.Long) r3;
        r3 = r3.longValue();
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 != 0) goto L_0x2bd8;
        r1 = 0;
        r2 = r9[r1];
        r10 = r2;
        r10 = (org.telegram.tgnet.TLRPC.Message) r10;
        if (r10 == 0) goto L_0x2946;
        r2 = r7.userBlocked;
        if (r2 != 0) goto L_0x2946;
        r2 = new org.telegram.messenger.MessageObject;
        r3 = r7.currentAccount;
        r2.<init>(r3, r10, r1);
        r7.botButtons = r2;
        r80.checkBotKeyboard();
        goto L_0x296a;
        r1 = 0;
        r7.botButtons = r1;
        r1 = r7.chatActivityEnterView;
        if (r1 == 0) goto L_0x296a;
        r1 = r7.replyingMessageObject;
        if (r1 == 0) goto L_0x2963;
        r1 = r7.botReplyButtons;
        r2 = r7.replyingMessageObject;
        if (r1 != r2) goto L_0x2963;
        r1 = 0;
        r7.botReplyButtons = r1;
        r2 = 0;
        r3 = 0;
        r4 = 0;
        r5 = 0;
        r6 = 0;
        r1 = r7;
        r1.showReplyPanel(r2, r3, r4, r5, r6);
        r1 = r7.chatActivityEnterView;
        r2 = r7.botButtons;
        r1.setButtons(r2);
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.chatSearchResultsAvailable;
        if (r8 != r1) goto L_0x29d3;
        r1 = r7.classGuid;
        r2 = 0;
        r3 = r9[r2];
        r3 = (java.lang.Integer) r3;
        r2 = r3.intValue();
        if (r1 != r2) goto L_0x2bd8;
        r1 = 1;
        r2 = r9[r1];
        r2 = (java.lang.Integer) r2;
        r10 = r2.intValue();
        r1 = 3;
        r1 = r9[r1];
        r1 = (java.lang.Long) r1;
        r11 = r1.longValue();
        if (r10 == 0) goto L_0x29a9;
        r3 = 0;
        r5 = 1;
        r1 = r7.dialog_id;
        r6 = (r11 > r1 ? 1 : (r11 == r1 ? 0 : -1));
        if (r6 != 0) goto L_0x299c;
        r25 = 0;
        goto L_0x299e;
        r25 = 1;
        r6 = 0;
        r1 = r7;
        r2 = r10;
        r13 = r4;
        r4 = r5;
        r5 = r25;
        r1.scrollToMessageId(r2, r3, r4, r5, r6);
        goto L_0x29aa;
        r13 = r4;
        r1 = r9[r13];
        r1 = (java.lang.Integer) r1;
        r1 = r1.intValue();
        r2 = 4;
        r2 = r9[r2];
        r2 = (java.lang.Integer) r2;
        r2 = r2.intValue();
        r3 = 5;
        r3 = r9[r3];
        r3 = (java.lang.Integer) r3;
        r3 = r3.intValue();
        r7.updateSearchButtons(r1, r2, r3);
        r1 = r7.searchItem;
        if (r1 == 0) goto L_0x29d1;
        r1 = r7.searchItem;
        r2 = 0;
        r1.setShowSearchProgress(r2);
        goto L_0x2bd8;
        r2 = 0;
        r1 = org.telegram.messenger.NotificationCenter.chatSearchResultsLoading;
        if (r8 != r1) goto L_0x29f0;
        r1 = r7.classGuid;
        r2 = r9[r2];
        r2 = (java.lang.Integer) r2;
        r2 = r2.intValue();
        if (r1 != r2) goto L_0x2bd8;
        r1 = r7.searchItem;
        if (r1 == 0) goto L_0x2bd8;
        r1 = r7.searchItem;
        r2 = 1;
        r1.setShowSearchProgress(r2);
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.didUpdatedMessagesViews;
        if (r8 != r1) goto L_0x2a38;
        r1 = 0;
        r2 = r9[r1];
        r1 = r2;
        r1 = (android.util.SparseArray) r1;
        r2 = r7.dialog_id;
        r2 = (int) r2;
        r2 = r1.get(r2);
        r2 = (android.util.SparseIntArray) r2;
        if (r2 == 0) goto L_0x2a36;
        r3 = 0;
        r4 = r3;
        r3 = 0;
        r5 = r2.size();
        if (r3 >= r5) goto L_0x2a31;
        r5 = r2.keyAt(r3);
        r6 = r7.messagesDict;
        r10 = 0;
        r6 = r6[r10];
        r6 = r6.get(r5);
        r6 = (org.telegram.messenger.MessageObject) r6;
        if (r6 == 0) goto L_0x2a2e;
        r10 = r2.get(r5);
        r11 = r6.messageOwner;
        r11 = r11.views;
        if (r10 <= r11) goto L_0x2a2e;
        r11 = r6.messageOwner;
        r11.views = r10;
        r4 = 1;
        r3 = r3 + 1;
        goto L_0x2a08;
        if (r4 == 0) goto L_0x2a36;
        r80.updateVisibleRows();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.peerSettingsDidLoaded;
        if (r8 != r1) goto L_0x2a50;
        r1 = 0;
        r1 = r9[r1];
        r1 = (java.lang.Long) r1;
        r1 = r1.longValue();
        r3 = r7.dialog_id;
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 != 0) goto L_0x2a4e;
        r80.updateSpamView();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.newDraftReceived;
        if (r8 != r1) goto L_0x2a69;
        r1 = 0;
        r1 = r9[r1];
        r1 = (java.lang.Long) r1;
        r1 = r1.longValue();
        r3 = r7.dialog_id;
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 != 0) goto L_0x2a67;
        r3 = 1;
        r7.applyDraftMaybe(r3);
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.userInfoDidLoaded;
        if (r8 != r1) goto L_0x2a9e;
        r1 = 0;
        r1 = r9[r1];
        r1 = (java.lang.Integer) r1;
        r2 = r7.currentUser;
        if (r2 == 0) goto L_0x2a9c;
        r2 = r7.currentUser;
        r2 = r2.id;
        r3 = r1.intValue();
        if (r2 != r3) goto L_0x2a9c;
        r2 = 1;
        r2 = r9[r2];
        r2 = (org.telegram.tgnet.TLRPC.TL_userFull) r2;
        r3 = r7.headerItem;
        if (r3 == 0) goto L_0x2a9c;
        r3 = r2.phone_calls_available;
        if (r3 == 0) goto L_0x2a95;
        r3 = r7.headerItem;
        r4 = 32;
        r3.showSubItem(r4);
        goto L_0x2a9c;
        r4 = 32;
        r3 = r7.headerItem;
        r3.hideSubItem(r4);
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.didSetNewWallpapper;
        if (r8 != r1) goto L_0x2ae1;
        r1 = r7.fragmentView;
        if (r1 == 0) goto L_0x2bd8;
        r1 = r7.fragmentView;
        r1 = (org.telegram.ui.Components.SizeNotifierFrameLayout) r1;
        r2 = org.telegram.ui.ActionBar.Theme.getCachedWallpaper();
        r1.setBackgroundImage(r2);
        r1 = r7.progressView2;
        r1 = r1.getBackground();
        r2 = org.telegram.ui.ActionBar.Theme.colorFilter;
        r1.setColorFilter(r2);
        r1 = r7.emptyView;
        if (r1 == 0) goto L_0x2acb;
        r1 = r7.emptyView;
        r1 = r1.getBackground();
        r2 = org.telegram.ui.ActionBar.Theme.colorFilter;
        r1.setColorFilter(r2);
        r1 = r7.bigEmptyView;
        if (r1 == 0) goto L_0x2ada;
        r1 = r7.bigEmptyView;
        r1 = r1.getBackground();
        r2 = org.telegram.ui.ActionBar.Theme.colorFilter;
        r1.setColorFilter(r2);
        r1 = r7.chatListView;
        r1.invalidateViews();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.channelRightsUpdated;
        if (r8 != r1) goto L_0x2b09;
        r1 = 0;
        r1 = r9[r1];
        r1 = (org.telegram.tgnet.TLRPC.Chat) r1;
        r2 = r7.currentChat;
        if (r2 == 0) goto L_0x2b07;
        r2 = r1.id;
        r3 = r7.currentChat;
        r3 = r3.id;
        if (r2 != r3) goto L_0x2b07;
        r2 = r7.chatActivityEnterView;
        if (r2 == 0) goto L_0x2b07;
        r7.currentChat = r1;
        r2 = r7.chatActivityEnterView;
        r2.checkChannelRights();
        r80.checkRaiseSensors();
        r80.updateSecretStatus();
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.updateMentionsCount;
        if (r8 != r1) goto L_0x2bd8;
        r1 = r7.dialog_id;
        r3 = 0;
        r4 = r9[r3];
        r4 = (java.lang.Long) r4;
        r3 = r4.longValue();
        r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1));
        if (r5 != 0) goto L_0x2bd8;
        r1 = 1;
        r2 = r9[r1];
        r2 = (java.lang.Integer) r2;
        r1 = r2.intValue();
        r2 = r7.newMentionsCount;
        if (r2 <= r1) goto L_0x2bd8;
        r7.newMentionsCount = r1;
        r2 = r7.newMentionsCount;
        if (r2 > 0) goto L_0x2b3a;
        r2 = 0;
        r7.newMentionsCount = r2;
        r3 = 1;
        r7.hasAllMentionsLocal = r3;
        r7.showMentiondownButton(r2, r3);
        goto L_0x2bd8;
        r2 = 0;
        r3 = 1;
        r4 = r7.mentiondownButtonCounter;
        r5 = "%d";
        r3 = new java.lang.Object[r3];
        r6 = r7.newMentionsCount;
        r6 = java.lang.Integer.valueOf(r6);
        r3[r2] = r6;
        r2 = java.lang.String.format(r5, r3);
        r4.setText(r2);
        goto L_0x2bd8;
        r1 = org.telegram.messenger.NotificationCenter.messagePlayingDidReset;
        if (r8 != r1) goto L_0x2b5a;
        r80.destroyTextureView();
        r1 = r7.chatListView;
        if (r1 == 0) goto L_0x2bd8;
        r1 = r7.chatListView;
        r1 = r1.getChildCount();
        r2 = 0;
        if (r2 >= r1) goto L_0x2ba6;
        r3 = r7.chatListView;
        r3 = r3.getChildAt(r2);
        r4 = r3 instanceof org.telegram.ui.Cells.ChatMessageCell;
        if (r4 == 0) goto L_0x2ba2;
        r4 = r3;
        r4 = (org.telegram.ui.Cells.ChatMessageCell) r4;
        r5 = r4.getMessageObject();
        if (r5 == 0) goto L_0x2ba2;
        r6 = r5.isVoice();
        if (r6 != 0) goto L_0x2b9c;
        r6 = r5.isMusic();
        if (r6 == 0) goto L_0x2b87;
        goto L_0x2b9c;
        r6 = r5.isRoundVideo();
        if (r6 == 0) goto L_0x2ba2;
        r6 = org.telegram.messenger.MediaController.getInstance();
        r6 = r6.isPlayingMessage(r5);
        if (r6 != 0) goto L_0x2ba2;
        r6 = 1;
        r4.checkRoundVideoPlayback(r6);
        goto L_0x2ba3;
        r6 = 1;
        r10 = 0;
        r4.updateButtonState(r10);
        goto L_0x2ba3;
        r6 = 1;
        r2 = r2 + 1;
        goto L_0x2b65;
        r2 = r7.mentionListView;
        r1 = r2.getChildCount();
        r2 = 0;
        if (r2 >= r1) goto L_0x2bd7;
        r3 = r7.mentionListView;
        r3 = r3.getChildAt(r2);
        r4 = r3 instanceof org.telegram.ui.Cells.ContextLinkCell;
        if (r4 == 0) goto L_0x2bd3;
        r4 = r3;
        r4 = (org.telegram.ui.Cells.ContextLinkCell) r4;
        r5 = r4.getMessageObject();
        if (r5 == 0) goto L_0x2bd3;
        r6 = r5.isVoice();
        if (r6 != 0) goto L_0x2bce;
        r6 = r5.isMusic();
        if (r6 == 0) goto L_0x2bd3;
        r6 = 0;
        r4.updateButtonState(r6);
        goto L_0x2bd4;
        r6 = 0;
        r2 = r2 + 1;
        goto L_0x2bad;
        return;
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.didReceivedNotification(int, int, java.lang.Object[]):void");
    }

    public void didSelectDialogs(org.telegram.ui.DialogsActivity r1, java.util.ArrayList<java.lang.Long> r2, java.lang.CharSequence r3, boolean r4) {
        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: org.telegram.ui.ChatActivity.didSelectDialogs(org.telegram.ui.DialogsActivity, java.util.ArrayList, java.lang.CharSequence, boolean):void
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:59)
	at jadx.core.ProcessClass.process(ProcessClass.java:42)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
        /*
        r0 = this;
        r6 = r20;
        r7 = r22;
        r0 = r6.forwardingMessage;
        r1 = 0;
        r8 = 1;
        if (r0 != 0) goto L_0x001f;
    L_0x000a:
        r0 = r6.selectedMessagesIds;
        r0 = r0[r1];
        r0 = r0.size();
        if (r0 != 0) goto L_0x001f;
    L_0x0014:
        r0 = r6.selectedMessagesIds;
        r0 = r0[r8];
        r0 = r0.size();
        if (r0 != 0) goto L_0x001f;
    L_0x001e:
        return;
    L_0x001f:
        r0 = new java.util.ArrayList;
        r0.<init>();
        r5 = r0;
        r0 = r6.forwardingMessage;
        if (r0 == 0) goto L_0x0041;
    L_0x0029:
        r0 = r6.forwardingMessageGroup;
        if (r0 == 0) goto L_0x0035;
    L_0x002d:
        r0 = r6.forwardingMessageGroup;
        r0 = r0.messages;
        r5.addAll(r0);
        goto L_0x003a;
    L_0x0035:
        r0 = r6.forwardingMessage;
        r5.add(r0);
    L_0x003a:
        r0 = 0;
        r6.forwardingMessage = r0;
        r6.forwardingMessageGroup = r0;
        goto L_0x00b6;
    L_0x0041:
        r0 = r8;
    L_0x0042:
        if (r0 < 0) goto L_0x00aa;
    L_0x0044:
        r2 = new java.util.ArrayList;
        r2.<init>();
        r3 = r1;
    L_0x004a:
        r4 = r6.selectedMessagesIds;
        r4 = r4[r0];
        r4 = r4.size();
        if (r3 >= r4) goto L_0x0066;
    L_0x0054:
        r4 = r6.selectedMessagesIds;
        r4 = r4[r0];
        r4 = r4.keyAt(r3);
        r4 = java.lang.Integer.valueOf(r4);
        r2.add(r4);
        r3 = r3 + 1;
        goto L_0x004a;
    L_0x0066:
        java.util.Collections.sort(r2);
        r3 = r1;
    L_0x006a:
        r4 = r2.size();
        if (r3 >= r4) goto L_0x0092;
    L_0x0070:
        r4 = r2.get(r3);
        r4 = (java.lang.Integer) r4;
        r9 = r6.selectedMessagesIds;
        r9 = r9[r0];
        r10 = r4.intValue();
        r9 = r9.get(r10);
        r9 = (org.telegram.messenger.MessageObject) r9;
        if (r9 == 0) goto L_0x008f;
    L_0x0086:
        r10 = r4.intValue();
        if (r10 <= 0) goto L_0x008f;
    L_0x008c:
        r5.add(r9);
    L_0x008f:
        r3 = r3 + 1;
        goto L_0x006a;
    L_0x0092:
        r3 = r6.selectedMessagesCanCopyIds;
        r3 = r3[r0];
        r3.clear();
        r3 = r6.selectedMessagesCanStarIds;
        r3 = r3[r0];
        r3.clear();
        r3 = r6.selectedMessagesIds;
        r3 = r3[r0];
        r3.clear();
        r0 = r0 + -1;
        goto L_0x0042;
    L_0x00aa:
        r6.cantDeleteMessagesCount = r1;
        r6.canEditMessagesCount = r1;
        r0 = r6.actionBar;
        r0.hideActionMode();
        r6.updatePinnedMessageView(r8);
    L_0x00b6:
        r0 = r22.size();
        if (r0 > r8) goto L_0x0177;
    L_0x00bc:
        r0 = r7.get(r1);
        r0 = (java.lang.Long) r0;
        r2 = r0.longValue();
        r0 = r6.currentAccount;
        r0 = org.telegram.messenger.UserConfig.getInstance(r0);
        r0 = r0.getClientUserId();
        r9 = (long) r0;
        r0 = (r2 > r9 ? 1 : (r2 == r9 ? 0 : -1));
        if (r0 == 0) goto L_0x0177;
    L_0x00d5:
        if (r23 == 0) goto L_0x00da;
    L_0x00d7:
        r9 = r5;
        goto L_0x0178;
    L_0x00da:
        r0 = r7.get(r1);
        r0 = (java.lang.Long) r0;
        r3 = r0.longValue();
        r0 = r6.dialog_id;
        r2 = (r3 > r0 ? 1 : (r3 == r0 ? 0 : -1));
        if (r2 == 0) goto L_0x0152;
    L_0x00ea:
        r0 = (int) r3;
        r1 = 32;
        r1 = r3 >> r1;
        r1 = (int) r1;
        r2 = new android.os.Bundle;
        r2.<init>();
        r9 = "scrollToTopOnResume";
        r10 = r6.scrollToTopOnResume;
        r2.putBoolean(r9, r10);
        if (r0 == 0) goto L_0x010f;
    L_0x00fe:
        if (r0 <= 0) goto L_0x0106;
    L_0x0100:
        r9 = "user_id";
        r2.putInt(r9, r0);
        goto L_0x0114;
    L_0x0106:
        if (r0 >= 0) goto L_0x0114;
    L_0x0108:
        r9 = "chat_id";
        r10 = -r0;
        r2.putInt(r9, r10);
        goto L_0x0114;
    L_0x010f:
        r9 = "enc_id";
        r2.putInt(r9, r1);
    L_0x0114:
        if (r0 == 0) goto L_0x0125;
    L_0x0116:
        r9 = r6.currentAccount;
        r9 = org.telegram.messenger.MessagesController.getInstance(r9);
        r14 = r21;
        r9 = r9.checkCanOpenChat(r2, r14);
        if (r9 != 0) goto L_0x0127;
    L_0x0124:
        return;
    L_0x0125:
        r14 = r21;
    L_0x0127:
        r9 = new org.telegram.ui.ChatActivity;
        r9.<init>(r2);
        r13 = r9;
        r8 = r6.presentFragment(r13, r8);
        if (r8 == 0) goto L_0x014a;
    L_0x0133:
        r10 = 1;
        r11 = 0;
        r8 = 0;
        r15 = 0;
        r9 = r13;
        r12 = r5;
        r16 = r13;
        r13 = r8;
        r14 = r15;
        r9.showReplyPanel(r10, r11, r12, r13, r14);
        r8 = org.telegram.messenger.AndroidUtilities.isTablet();
        if (r8 != 0) goto L_0x014f;
    L_0x0146:
        r20.removeSelfFromStack();
        goto L_0x014f;
    L_0x014a:
        r16 = r13;
        r21.finishFragment();
        r9 = r5;
        goto L_0x01b2;
    L_0x0152:
        r21.finishFragment();
        r20.moveScrollToLastMessage();
        r1 = 1;
        r2 = 0;
        r9 = 0;
        r10 = 0;
        r0 = r6;
        r11 = r3;
        r3 = r5;
        r4 = r9;
        r9 = r5;
        r5 = r10;
        r0.showReplyPanel(r1, r2, r3, r4, r5);
        r0 = org.telegram.messenger.AndroidUtilities.isTablet();
        if (r0 == 0) goto L_0x0173;
        r0 = r6.actionBar;
        r0.hideActionMode();
        r6.updatePinnedMessageView(r8);
        r20.updateVisibleRows();
        goto L_0x01b2;
    L_0x0177:
        r9 = r5;
    L_0x0178:
        r0 = r1;
        r1 = r22.size();
        if (r0 >= r1) goto L_0x01af;
        r1 = r7.get(r0);
        r1 = (java.lang.Long) r1;
        r1 = r1.longValue();
        if (r23 == 0) goto L_0x01a3;
        r3 = r6.currentAccount;
        r10 = org.telegram.messenger.SendMessagesHelper.getInstance(r3);
        r11 = r23.toString();
        r14 = 0;
        r15 = 0;
        r16 = 1;
        r17 = 0;
        r18 = 0;
        r19 = 0;
        r12 = r1;
        r10.sendMessage(r11, r12, r14, r15, r16, r17, r18, r19);
        r3 = r6.currentAccount;
        r3 = org.telegram.messenger.SendMessagesHelper.getInstance(r3);
        r3.sendMessage(r9, r1);
        r1 = r0 + 1;
        goto L_0x0178;
        r21.finishFragment();
        return;
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.didSelectDialogs(org.telegram.ui.DialogsActivity, java.util.ArrayList, java.lang.CharSequence, boolean):void");
    }

    public ChatActivity(Bundle args) {
        super(args);
    }

    public boolean onFragmentCreate() {
        final CountDownLatch countDownLatch;
        int messageId;
        int i;
        final int chatId = this.arguments.getInt("chat_id", 0);
        final int userId = this.arguments.getInt("user_id", 0);
        final int encId = this.arguments.getInt("enc_id", 0);
        this.inlineReturn = this.arguments.getLong("inline_return", 0);
        String inlineQuery = this.arguments.getString("inline_query");
        this.startLoadFromMessageId = this.arguments.getInt("message_id", 0);
        int migrated_to = this.arguments.getInt("migrated_to", 0);
        this.scrollToTopOnResume = this.arguments.getBoolean("scrollToTopOnResume", false);
        if (chatId != 0) {
            r1.currentChat = MessagesController.getInstance(r1.currentAccount).getChat(Integer.valueOf(chatId));
            if (r1.currentChat == null) {
                countDownLatch = new CountDownLatch(1);
                final MessagesStorage messagesStorage = MessagesStorage.getInstance(r1.currentAccount);
                messagesStorage.getStorageQueue().postRunnable(new Runnable() {
                    public void run() {
                        ChatActivity.this.currentChat = messagesStorage.getChat(chatId);
                        countDownLatch.countDown();
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Throwable e) {
                    FileLog.e(e);
                }
                if (r1.currentChat == null) {
                    return false;
                }
                MessagesController.getInstance(r1.currentAccount).putChat(r1.currentChat, true);
            }
            if (chatId > 0) {
                r1.dialog_id = (long) (-chatId);
            } else {
                r1.isBroadcast = true;
                r1.dialog_id = AndroidUtilities.makeBroadcastId(chatId);
            }
            if (ChatObject.isChannel(r1.currentChat)) {
                MessagesController.getInstance(r1.currentAccount).startShortPoll(chatId, false);
            }
        } else if (userId != 0) {
            r1.currentUser = MessagesController.getInstance(r1.currentAccount).getUser(Integer.valueOf(userId));
            if (r1.currentUser == null) {
                messagesStorage = MessagesStorage.getInstance(r1.currentAccount);
                countDownLatch = new CountDownLatch(1);
                messagesStorage.getStorageQueue().postRunnable(new Runnable() {
                    public void run() {
                        ChatActivity.this.currentUser = messagesStorage.getUser(userId);
                        countDownLatch.countDown();
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Throwable e2) {
                    FileLog.e(e2);
                }
                if (r1.currentUser == null) {
                    return false;
                }
                MessagesController.getInstance(r1.currentAccount).putUser(r1.currentUser, true);
            }
            r1.dialog_id = (long) userId;
            r1.botUser = r1.arguments.getString("botUser");
            if (inlineQuery != null) {
                MessagesController.getInstance(r1.currentAccount).sendBotStart(r1.currentUser, inlineQuery);
            }
        } else if (encId == 0) {
            return false;
        } else {
            r1.currentEncryptedChat = MessagesController.getInstance(r1.currentAccount).getEncryptedChat(Integer.valueOf(encId));
            messagesStorage = MessagesStorage.getInstance(r1.currentAccount);
            if (r1.currentEncryptedChat == null) {
                countDownLatch = new CountDownLatch(1);
                messagesStorage.getStorageQueue().postRunnable(new Runnable() {
                    public void run() {
                        ChatActivity.this.currentEncryptedChat = messagesStorage.getEncryptedChat(encId);
                        countDownLatch.countDown();
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Throwable e22) {
                    FileLog.e(e22);
                }
                if (r1.currentEncryptedChat == null) {
                    return false;
                }
                MessagesController.getInstance(r1.currentAccount).putEncryptedChat(r1.currentEncryptedChat, true);
            }
            r1.currentUser = MessagesController.getInstance(r1.currentAccount).getUser(Integer.valueOf(r1.currentEncryptedChat.user_id));
            if (r1.currentUser == null) {
                countDownLatch = new CountDownLatch(1);
                messagesStorage.getStorageQueue().postRunnable(new Runnable() {
                    public void run() {
                        ChatActivity.this.currentUser = messagesStorage.getUser(ChatActivity.this.currentEncryptedChat.user_id);
                        countDownLatch.countDown();
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Throwable e222) {
                    FileLog.e(e222);
                }
                if (r1.currentUser == null) {
                    return false;
                }
                MessagesController.getInstance(r1.currentAccount).putUser(r1.currentUser, true);
            }
            r1.dialog_id = ((long) encId) << 32;
            int[] iArr = r1.maxMessageId;
            r1.maxMessageId[1] = Integer.MIN_VALUE;
            iArr[0] = Integer.MIN_VALUE;
            iArr = r1.minMessageId;
            r1.minMessageId[1] = ConnectionsManager.DEFAULT_DATACENTER_ID;
            iArr[0] = ConnectionsManager.DEFAULT_DATACENTER_ID;
        }
        if (r1.currentUser != null) {
            MediaController.getInstance().startMediaObserver();
        }
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagesDidLoaded);
        NotificationCenter.getGlobalInstance().addObserver(r1, NotificationCenter.emojiDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.updateInterfaces);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didReceivedNewMessages);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.closeChats);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagesRead);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagesDeleted);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.historyCleared);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messageReceivedByServer);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messageReceivedByAck);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messageSendError);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.chatInfoDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.contactsDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.encryptedChatUpdated);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagesReadEncrypted);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.removeAllMessagesFromDialog);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagePlayingProgressDidChanged);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagePlayingDidReset);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagePlayingPlayStateChanged);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.screenshotTook);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.blockedUsersDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.FileNewChunkAvailable);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didCreatedNewDeleteTask);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagePlayingDidStarted);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.updateMessageMedia);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.replaceMessagesObjects);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.notificationsSettingsUpdated);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didLoadedReplyMessages);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didReceivedWebpages);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didReceivedWebpagesInUpdates);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.messagesReadContent);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.botInfoDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.botKeyboardDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.chatSearchResultsAvailable);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.chatSearchResultsLoading);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didUpdatedMessagesViews);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.chatInfoCantLoad);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.didLoadedPinnedMessage);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.peerSettingsDidLoaded);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.newDraftReceived);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.userInfoDidLoaded);
        NotificationCenter.getGlobalInstance().addObserver(r1, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.channelRightsUpdated);
        NotificationCenter.getInstance(r1.currentAccount).addObserver(r1, NotificationCenter.updateMentionsCount);
        super.onFragmentCreate();
        if (r1.currentEncryptedChat == null && !r1.isBroadcast) {
            DataQuery.getInstance(r1.currentAccount).loadBotKeyboard(r1.dialog_id);
        }
        r1.loading = true;
        MessagesController.getInstance(r1.currentAccount).loadPeerSettings(r1.currentUser, r1.currentChat);
        MessagesController.getInstance(r1.currentAccount).setLastCreatedDialogId(r1.dialog_id, true);
        if (r1.startLoadFromMessageId == 0) {
            SharedPreferences sharedPreferences = MessagesController.getNotificationsSettings(r1.currentAccount);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("diditem");
            stringBuilder.append(r1.dialog_id);
            messageId = sharedPreferences.getInt(stringBuilder.toString(), 0);
            if (messageId != 0) {
                r1.wasManualScroll = true;
                r1.loadingFromOldPosition = true;
                StringBuilder stringBuilder2 = new StringBuilder();
                stringBuilder2.append("diditemo");
                stringBuilder2.append(r1.dialog_id);
                r1.startLoadFromMessageOffset = sharedPreferences.getInt(stringBuilder2.toString(), 0);
                r1.startLoadFromMessageId = messageId;
            }
        } else {
            r1.needSelectFromMessageId = true;
        }
        if (r1.startLoadFromMessageId != 0) {
            r1.waitingForLoad.add(Integer.valueOf(r1.lastLoadIndex));
            MessagesController instance;
            long j;
            int i2;
            boolean isChannel;
            int i3;
            if (migrated_to != 0) {
                r1.mergeDialogId = (long) migrated_to;
                instance = MessagesController.getInstance(r1.currentAccount);
                j = r1.mergeDialogId;
                if (r1.loadingFromOldPosition) {
                    i2 = 50;
                } else {
                    i2 = AndroidUtilities.isTablet() ? bot_help : 20;
                }
                i = r1.startLoadFromMessageId;
                messageId = r1.classGuid;
                isChannel = ChatObject.isChannel(r1.currentChat);
                i3 = r1.lastLoadIndex;
                r1.lastLoadIndex = i3 + 1;
                instance.loadMessages(j, i2, i, 0, true, 0, messageId, 3, 0, isChannel, i3);
            } else {
                instance = MessagesController.getInstance(r1.currentAccount);
                j = r1.dialog_id;
                if (r1.loadingFromOldPosition) {
                    i2 = 50;
                } else {
                    i2 = AndroidUtilities.isTablet() ? bot_help : 20;
                }
                i = r1.startLoadFromMessageId;
                messageId = r1.classGuid;
                isChannel = ChatObject.isChannel(r1.currentChat);
                i3 = r1.lastLoadIndex;
                r1.lastLoadIndex = i3 + 1;
                instance.loadMessages(j, i2, i, 0, true, 0, messageId, 3, 0, isChannel, i3);
            }
        } else {
            r1.waitingForLoad.add(Integer.valueOf(r1.lastLoadIndex));
            MessagesController instance2 = MessagesController.getInstance(r1.currentAccount);
            long j2 = r1.dialog_id;
            int i4 = AndroidUtilities.isTablet() ? bot_help : 20;
            i = r1.classGuid;
            boolean isChannel2 = ChatObject.isChannel(r1.currentChat);
            messageId = r1.lastLoadIndex;
            r1.lastLoadIndex = messageId + 1;
            instance2.loadMessages(j2, i4, 0, 0, true, 0, i, 2, 0, isChannel2, messageId);
        }
        if (r1.currentChat != null) {
            countDownLatch = null;
            if (r1.isBroadcast) {
                countDownLatch = new CountDownLatch(1);
            }
            MessagesController.getInstance(r1.currentAccount).loadChatInfo(r1.currentChat.id, countDownLatch, ChatObject.isChannel(r1.currentChat));
            if (r1.isBroadcast && countDownLatch != null) {
                try {
                    countDownLatch.await();
                } catch (Throwable e2222) {
                    FileLog.e(e2222);
                }
            }
        }
        if (userId != 0 && r1.currentUser.bot) {
            DataQuery.getInstance(r1.currentAccount).loadBotInfo(userId, true, r1.classGuid);
        } else if (r1.info instanceof TL_chatFull) {
            for (i = 0; i < r1.info.participants.participants.size(); i++) {
                User user = MessagesController.getInstance(r1.currentAccount).getUser(Integer.valueOf(((ChatParticipant) r1.info.participants.participants.get(i)).user_id));
                if (user != null && user.bot) {
                    DataQuery.getInstance(r1.currentAccount).loadBotInfo(user.id, true, r1.classGuid);
                }
            }
        }
        if (r1.currentUser != null) {
            r1.userBlocked = MessagesController.getInstance(r1.currentAccount).blockedUsers.contains(Integer.valueOf(r1.currentUser.id));
        }
        if (AndroidUtilities.isTablet()) {
            NotificationCenter.getInstance(r1.currentAccount).postNotificationName(NotificationCenter.openedChatChanged, Long.valueOf(r1.dialog_id), Boolean.valueOf(false));
        }
        if (!(r1.currentEncryptedChat == null || AndroidUtilities.getMyLayerVersion(r1.currentEncryptedChat.layer) == 73)) {
            SecretChatHelper.getInstance(r1.currentAccount).sendNotifyLayerMessage(r1.currentEncryptedChat, null);
        }
        return true;
    }

    public void onFragmentDestroy() {
        super.onFragmentDestroy();
        if (this.chatActivityEnterView != null) {
            this.chatActivityEnterView.onDestroy();
        }
        if (this.mentionsAdapter != null) {
            this.mentionsAdapter.onDestroy();
        }
        if (this.chatAttachAlert != null) {
            this.chatAttachAlert.dismissInternal();
        }
        MessagesController.getInstance(this.currentAccount).setLastCreatedDialogId(this.dialog_id, false);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagesDidLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.updateInterfaces);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didReceivedNewMessages);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.closeChats);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagesRead);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagesDeleted);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.historyCleared);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messageReceivedByServer);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messageReceivedByAck);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messageSendError);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.chatInfoDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.encryptedChatUpdated);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagesReadEncrypted);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.contactsDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagePlayingDidReset);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.screenshotTook);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.FileNewChunkAvailable);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagePlayingDidStarted);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.updateMessageMedia);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.replaceMessagesObjects);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didLoadedReplyMessages);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didReceivedWebpages);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagesReadContent);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.botInfoDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.botKeyboardDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.chatSearchResultsLoading);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didUpdatedMessagesViews);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.chatInfoCantLoad);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.didLoadedPinnedMessage);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.peerSettingsDidLoaded);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.newDraftReceived);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.userInfoDidLoaded);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.channelRightsUpdated);
        NotificationCenter.getInstance(this.currentAccount).removeObserver(this, NotificationCenter.updateMentionsCount);
        if (AndroidUtilities.isTablet()) {
            NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.openedChatChanged, Long.valueOf(this.dialog_id), Boolean.valueOf(true));
        }
        if (this.currentUser != null) {
            MediaController.getInstance().stopMediaObserver();
        }
        if (this.currentEncryptedChat != null) {
            try {
                if (VERSION.SDK_INT >= edit && (SharedConfig.passcodeHash.length() == 0 || SharedConfig.allowScreenCapture)) {
                    MediaController.getInstance().setFlagSecure(this, false);
                }
            } catch (Throwable e) {
                FileLog.e(e);
            }
        }
        if (this.currentUser != null) {
            MessagesController.getInstance(this.currentAccount).cancelLoadFullUser(this.currentUser.id);
        }
        AndroidUtilities.removeAdjustResize(getParentActivity(), this.classGuid);
        if (this.stickersAdapter != null) {
            this.stickersAdapter.onDestroy();
        }
        if (this.chatAttachAlert != null) {
            this.chatAttachAlert.onDestroy();
        }
        AndroidUtilities.unlockOrientation(getParentActivity());
        if (ChatObject.isChannel(this.currentChat)) {
            MessagesController.getInstance(this.currentAccount).startShortPoll(this.currentChat.id, true);
        }
    }

    public View createView(Context context) {
        int a;
        ActionBarMenu actionMode;
        ActionBarMenuItem item;
        int i;
        CharSequence oldMessage;
        CharSequence oldMessage2;
        RecyclerListView recyclerListView;
        Adapter chatActivityAdapter;
        GridLayoutManagerFixed gridLayoutManagerFixed;
        GridLayoutManagerFixed anonymousClass17;
        CharSequence oldMessage3;
        int i2;
        MentionsAdapter mentionsAdapter;
        boolean z;
        OnItemClickListener anonymousClass38;
        Drawable drawable;
        Drawable shadowDrawable;
        Drawable combinedDrawable;
        SizeNotifierFrameLayout sizeNotifierFrameLayout;
        View fragmentContextView;
        ChatActivityEnterView chatActivityEnterView;
        boolean z2;
        boolean z3;
        FrameLayout replyLayout;
        final StickerPreviewViewerDelegate stickerPreviewViewerDelegate;
        LinearLayoutManager layoutManager;
        Context context2 = context;
        if (this.chatMessageCellsCache.isEmpty()) {
            for (a = 0; a < 8; a++) {
                r7.chatMessageCellsCache.add(new ChatMessageCell(context2));
            }
        }
        for (a = 1; a >= 0; a--) {
            r7.selectedMessagesIds[a].clear();
            r7.selectedMessagesCanCopyIds[a].clear();
            r7.selectedMessagesCanStarIds[a].clear();
        }
        r7.cantDeleteMessagesCount = 0;
        r7.canEditMessagesCount = 0;
        r7.roundVideoContainer = null;
        r7.hasOwnBackground = true;
        if (r7.chatAttachAlert != null) {
            try {
                if (r7.chatAttachAlert.isShowing()) {
                    r7.chatAttachAlert.dismiss();
                }
            } catch (Exception e) {
            }
            r7.chatAttachAlert.onDestroy();
            r7.chatAttachAlert = null;
        }
        Theme.createChatResources(context2, false);
        r7.actionBar.setAddToContainer(false);
        r7.actionBar.setBackButtonDrawable(new BackDrawable(false));
        r7.actionBar.setActionBarMenuOnItemClick(new ActionBarMenuOnItemClick() {
            public void onItemClick(final int id) {
                boolean z = false;
                if (id == -1) {
                    if (ChatActivity.this.actionBar.isActionModeShowed()) {
                        for (int a = 1; a >= 0; a--) {
                            ChatActivity.this.selectedMessagesIds[a].clear();
                            ChatActivity.this.selectedMessagesCanCopyIds[a].clear();
                            ChatActivity.this.selectedMessagesCanStarIds[a].clear();
                        }
                        ChatActivity.this.cantDeleteMessagesCount = 0;
                        ChatActivity.this.canEditMessagesCount = 0;
                        if (ChatActivity.this.chatActivityEnterView.isEditingMessage()) {
                            ChatActivity.this.chatActivityEnterView.setEditingMessageObject(null, false);
                        } else {
                            ChatActivity.this.actionBar.hideActionMode();
                            ChatActivity.this.updatePinnedMessageView(true);
                        }
                        ChatActivity.this.updateVisibleRows();
                    } else {
                        ChatActivity.this.finishFragment();
                    }
                } else if (id == 10) {
                    previousUid = 0;
                    String str = TtmlNode.ANONYMOUS_REGION_ID;
                    a = 1;
                    while (a >= 0) {
                        int b;
                        ArrayList<Integer> ids = new ArrayList();
                        for (b = 0; b < ChatActivity.this.selectedMessagesCanCopyIds[a].size(); b++) {
                            ids.add(Integer.valueOf(ChatActivity.this.selectedMessagesCanCopyIds[a].keyAt(b)));
                        }
                        if (ChatActivity.this.currentEncryptedChat == null) {
                            Collections.sort(ids);
                        } else {
                            Collections.sort(ids, Collections.reverseOrder());
                        }
                        b = previousUid;
                        String str2 = str;
                        for (str = null; str < ids.size(); str++) {
                            StringBuilder stringBuilder;
                            MessageObject messageObject = (MessageObject) ChatActivity.this.selectedMessagesCanCopyIds[a].get(((Integer) ids.get(str)).intValue());
                            if (str2.length() != 0) {
                                stringBuilder = new StringBuilder();
                                stringBuilder.append(str2);
                                stringBuilder.append("\n\n");
                                str2 = stringBuilder.toString();
                            }
                            stringBuilder = new StringBuilder();
                            stringBuilder.append(str2);
                            stringBuilder.append(ChatActivity.this.getMessageContent(messageObject, b, true));
                            str2 = stringBuilder.toString();
                            b = messageObject.messageOwner.from_id;
                        }
                        a--;
                        str = str2;
                        previousUid = b;
                    }
                    if (str.length() != 0) {
                        AndroidUtilities.addToClipboard(str);
                    }
                    for (a = 1; a >= 0; a--) {
                        ChatActivity.this.selectedMessagesIds[a].clear();
                        ChatActivity.this.selectedMessagesCanCopyIds[a].clear();
                        ChatActivity.this.selectedMessagesCanStarIds[a].clear();
                    }
                    ChatActivity.this.cantDeleteMessagesCount = 0;
                    ChatActivity.this.canEditMessagesCount = 0;
                    ChatActivity.this.actionBar.hideActionMode();
                    ChatActivity.this.updatePinnedMessageView(true);
                    ChatActivity.this.updateVisibleRows();
                } else if (id == 12) {
                    if (ChatActivity.this.getParentActivity() != null) {
                        ChatActivity.this.createDeleteMessagesAlert(null, null);
                    }
                } else if (id == 11) {
                    args = new Bundle();
                    args.putBoolean("onlySelect", true);
                    args.putInt("dialogsType", 3);
                    DialogsActivity fragment = new DialogsActivity(args);
                    fragment.setDelegate(ChatActivity.this);
                    ChatActivity.this.presentFragment(fragment);
                } else if (id != 13) {
                    if (id != 15) {
                        if (id != 16) {
                            if (id == 17) {
                                if (ChatActivity.this.currentUser != null) {
                                    if (ChatActivity.this.getParentActivity() != null) {
                                        if (ChatActivity.this.currentUser.phone == null || ChatActivity.this.currentUser.phone.length() == 0) {
                                            ChatActivity.this.shareMyContact(ChatActivity.this.replyingMessageObject);
                                        } else {
                                            args = new Bundle();
                                            args.putInt("user_id", ChatActivity.this.currentUser.id);
                                            args.putBoolean("addContact", true);
                                            ChatActivity.this.presentFragment(new ContactAddActivity(args));
                                        }
                                    }
                                }
                                return;
                            } else if (id == 18) {
                                ChatActivity.this.toggleMute(false);
                            } else if (id == 24) {
                                try {
                                    DataQuery.getInstance(ChatActivity.this.currentAccount).installShortcut((long) ChatActivity.this.currentUser.id);
                                } catch (Throwable e) {
                                    FileLog.e(e);
                                }
                            } else if (id == 21) {
                                ChatActivity.this.showDialog(AlertsCreator.createReportAlert(ChatActivity.this.getParentActivity(), ChatActivity.this.dialog_id, 0, ChatActivity.this));
                            } else if (id == 19) {
                                messageObject = null;
                                a = 1;
                                while (a >= 0) {
                                    if (messageObject == null && ChatActivity.this.selectedMessagesIds[a].size() == 1) {
                                        ids = new ArrayList();
                                        for (b = 0; b < ChatActivity.this.selectedMessagesIds[a].size(); b++) {
                                            ids.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[a].keyAt(b)));
                                        }
                                        messageObject = (MessageObject) ChatActivity.this.messagesDict[a].get(((Integer) ids.get(0)).intValue());
                                    }
                                    ChatActivity.this.selectedMessagesIds[a].clear();
                                    ChatActivity.this.selectedMessagesCanCopyIds[a].clear();
                                    ChatActivity.this.selectedMessagesCanStarIds[a].clear();
                                    a--;
                                }
                                if (messageObject != null && (messageObject.messageOwner.id > 0 || (messageObject.messageOwner.id < 0 && ChatActivity.this.currentEncryptedChat != null))) {
                                    ChatActivity.this.showReplyPanel(true, messageObject, null, null, false);
                                }
                                ChatActivity.this.cantDeleteMessagesCount = 0;
                                ChatActivity.this.canEditMessagesCount = 0;
                                ChatActivity.this.actionBar.hideActionMode();
                                ChatActivity.this.updatePinnedMessageView(true);
                                ChatActivity.this.updateVisibleRows();
                            } else if (id == 22) {
                                for (a = 0; a < 2; a++) {
                                    for (previousUid = 0; previousUid < ChatActivity.this.selectedMessagesCanStarIds[a].size(); previousUid++) {
                                        DataQuery.getInstance(ChatActivity.this.currentAccount).addRecentSticker(2, ((MessageObject) ChatActivity.this.selectedMessagesCanStarIds[a].valueAt(previousUid)).getDocument(), (int) (System.currentTimeMillis() / 1000), ChatActivity.this.hasUnfavedSelected ^ true);
                                    }
                                }
                                for (a = 1; a >= 0; a--) {
                                    ChatActivity.this.selectedMessagesIds[a].clear();
                                    ChatActivity.this.selectedMessagesCanCopyIds[a].clear();
                                    ChatActivity.this.selectedMessagesCanStarIds[a].clear();
                                }
                                ChatActivity.this.cantDeleteMessagesCount = 0;
                                ChatActivity.this.canEditMessagesCount = 0;
                                ChatActivity.this.actionBar.hideActionMode();
                                ChatActivity.this.updatePinnedMessageView(true);
                                ChatActivity.this.updateVisibleRows();
                            } else if (id == ChatActivity.edit) {
                                messageObject = null;
                                a = 1;
                                while (a >= 0) {
                                    if (messageObject == null && ChatActivity.this.selectedMessagesIds[a].size() == 1) {
                                        ids = new ArrayList();
                                        for (b = 0; b < ChatActivity.this.selectedMessagesIds[a].size(); b++) {
                                            ids.add(Integer.valueOf(ChatActivity.this.selectedMessagesIds[a].keyAt(b)));
                                        }
                                        messageObject = (MessageObject) ChatActivity.this.messagesDict[a].get(((Integer) ids.get(0)).intValue());
                                    }
                                    ChatActivity.this.selectedMessagesIds[a].clear();
                                    ChatActivity.this.selectedMessagesCanCopyIds[a].clear();
                                    ChatActivity.this.selectedMessagesCanStarIds[a].clear();
                                    a--;
                                }
                                ChatActivity.this.startReplyOnTextChange = false;
                                ChatActivity.this.startEditingMessageObject(messageObject);
                                ChatActivity.this.cantDeleteMessagesCount = 0;
                                ChatActivity.this.canEditMessagesCount = 0;
                                ChatActivity.this.updatePinnedMessageView(true);
                                ChatActivity.this.updateVisibleRows();
                            } else if (id == 14) {
                                ChatActivity.this.openAttachMenu();
                            } else if (id == ChatActivity.bot_help) {
                                SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage("/help", ChatActivity.this.dialog_id, null, null, false, null, null, null);
                            } else if (id == ChatActivity.bot_settings) {
                                SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage("/settings", ChatActivity.this.dialog_id, null, null, false, null, null, null);
                            } else if (id == ChatActivity.search) {
                                ChatActivity.this.openSearchWithText(null);
                            } else if (!(id != 32 || ChatActivity.this.currentUser == null || ChatActivity.this.getParentActivity() == null)) {
                                VoIPHelper.startCall(ChatActivity.this.currentUser, ChatActivity.this.getParentActivity(), MessagesController.getInstance(ChatActivity.this.currentAccount).getUserFull(ChatActivity.this.currentUser.id));
                            }
                        }
                    }
                    if (ChatActivity.this.getParentActivity() != null) {
                        if (((int) ChatActivity.this.dialog_id) < 0 && ((int) (ChatActivity.this.dialog_id >> 32)) != 1) {
                            z = true;
                        }
                        final boolean isChat = z;
                        AlertDialog.Builder builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity());
                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                        if (id == 15) {
                            builder.setMessage(LocaleController.getString("AreYouSureClearHistory", R.string.AreYouSureClearHistory));
                        } else if (isChat) {
                            builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
                        } else {
                            builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
                        }
                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialogInterface, int i) {
                                if (id != 15) {
                                    if (!isChat) {
                                        MessagesController.getInstance(ChatActivity.this.currentAccount).deleteDialog(ChatActivity.this.dialog_id, 0);
                                    } else if (ChatObject.isNotInChat(ChatActivity.this.currentChat)) {
                                        MessagesController.getInstance(ChatActivity.this.currentAccount).deleteDialog(ChatActivity.this.dialog_id, 0);
                                    } else {
                                        MessagesController.getInstance(ChatActivity.this.currentAccount).deleteUserFromChat((int) (-ChatActivity.this.dialog_id), MessagesController.getInstance(ChatActivity.this.currentAccount).getUser(Integer.valueOf(UserConfig.getInstance(ChatActivity.this.currentAccount).getClientUserId())), null);
                                    }
                                    ChatActivity.this.finishFragment();
                                    return;
                                }
                                if (!(!ChatObject.isChannel(ChatActivity.this.currentChat) || ChatActivity.this.info == null || ChatActivity.this.info.pinned_msg_id == 0)) {
                                    Editor edit = MessagesController.getNotificationsSettings(ChatActivity.this.currentAccount).edit();
                                    StringBuilder stringBuilder = new StringBuilder();
                                    stringBuilder.append("pin_");
                                    stringBuilder.append(ChatActivity.this.dialog_id);
                                    edit.putInt(stringBuilder.toString(), ChatActivity.this.info.pinned_msg_id).commit();
                                    ChatActivity.this.updatePinnedMessageView(true);
                                }
                                MessagesController.getInstance(ChatActivity.this.currentAccount).deleteDialog(ChatActivity.this.dialog_id, 1);
                            }
                        });
                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                        ChatActivity.this.showDialog(builder.create());
                    }
                } else if (ChatActivity.this.getParentActivity() != null) {
                    ChatActivity.this.showDialog(AlertsCreator.createTTLAlert(ChatActivity.this.getParentActivity(), ChatActivity.this.currentEncryptedChat).create());
                }
            }
        });
        r7.avatarContainer = new ChatAvatarContainer(context2, r7, r7.currentEncryptedChat != null);
        r7.actionBar.addView(r7.avatarContainer, 0, LayoutHelper.createFrame(-2, -1.0f, 51, 56.0f, 0.0f, 40.0f, 0.0f));
        if (!(r7.currentChat == null || ChatObject.isChannel(r7.currentChat))) {
            a = r7.currentChat.participants_count;
            if (r7.info != null) {
                a = r7.info.participants.participants.size();
            }
            if (a == 0 || r7.currentChat.deactivated || r7.currentChat.left || (r7.currentChat instanceof TL_chatForbidden) || (r7.info != null && (r7.info.participants instanceof TL_chatParticipantsForbidden))) {
                r7.avatarContainer.setEnabled(false);
            }
        }
        ActionBarMenu menu = r7.actionBar.createMenu();
        if (r7.currentEncryptedChat == null && !r7.isBroadcast) {
            r7.searchItem = menu.addItem(0, (int) R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItemSearchListener() {
                boolean searchWas;

                public void onSearchCollapse() {
                    ChatActivity.this.searchCalendarButton.setVisibility(0);
                    if (ChatActivity.this.searchUserButton != null) {
                        ChatActivity.this.searchUserButton.setVisibility(0);
                    }
                    if (ChatActivity.this.searchingForUser) {
                        ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(null, 0, null, false);
                        ChatActivity.this.searchingForUser = false;
                    }
                    ChatActivity.this.mentionLayoutManager.setReverseLayout(false);
                    ChatActivity.this.mentionsAdapter.setSearchingMentions(false);
                    ChatActivity.this.searchingUserMessages = null;
                    ChatActivity.this.searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
                    ChatActivity.this.searchItem.setSearchFieldCaption(null);
                    ChatActivity.this.avatarContainer.setVisibility(0);
                    if (ChatActivity.this.chatActivityEnterView.hasText()) {
                        if (ChatActivity.this.headerItem != null) {
                            ChatActivity.this.headerItem.setVisibility(8);
                        }
                        if (ChatActivity.this.attachItem != null) {
                            ChatActivity.this.attachItem.setVisibility(0);
                        }
                    } else {
                        if (ChatActivity.this.headerItem != null) {
                            ChatActivity.this.headerItem.setVisibility(0);
                        }
                        if (ChatActivity.this.attachItem != null) {
                            ChatActivity.this.attachItem.setVisibility(8);
                        }
                    }
                    ChatActivity.this.searchItem.setVisibility(8);
                    ChatActivity.this.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
                    ChatActivity.this.updateVisibleRows();
                    if (this.searchWas) {
                        ChatActivity.this.scrollToLastMessage(false);
                    }
                    ChatActivity.this.updateBottomOverlay();
                    ChatActivity.this.updatePinnedMessageView(true);
                }

                public void onSearchExpand() {
                    if (ChatActivity.this.openSearchKeyboard) {
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                AnonymousClass10.this.searchWas = false;
                                ChatActivity.this.searchItem.getSearchField().requestFocus();
                                AndroidUtilities.showKeyboard(ChatActivity.this.searchItem.getSearchField());
                            }
                        }, 300);
                    }
                }

                public void onSearchPressed(EditText editText) {
                    this.searchWas = true;
                    ChatActivity.this.updateSearchButtons(0, 0, -1);
                    DataQuery.getInstance(ChatActivity.this.currentAccount).searchMessagesInChat(editText.getText().toString(), ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ChatActivity.this.classGuid, 0, ChatActivity.this.searchingUserMessages);
                }

                public void onTextChanged(EditText editText) {
                    if (ChatActivity.this.searchingForUser) {
                        MentionsAdapter access$4900 = ChatActivity.this.mentionsAdapter;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("@");
                        stringBuilder.append(editText.getText().toString());
                        access$4900.searchUsernameOrHashtag(stringBuilder.toString(), 0, ChatActivity.this.messages, true);
                    } else if (!ChatActivity.this.searchingForUser && ChatActivity.this.searchingUserMessages == null && ChatActivity.this.searchUserButton != null && TextUtils.equals(editText.getText(), LocaleController.getString("SearchFrom", R.string.SearchFrom))) {
                        ChatActivity.this.searchUserButton.callOnClick();
                    }
                }

                public void onCaptionCleared() {
                    if (ChatActivity.this.searchingUserMessages != null) {
                        ChatActivity.this.searchUserButton.callOnClick();
                        return;
                    }
                    if (ChatActivity.this.searchingForUser) {
                        ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(null, 0, null, false);
                        ChatActivity.this.searchingForUser = false;
                    }
                    ChatActivity.this.searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
                    ChatActivity.this.searchCalendarButton.setVisibility(0);
                    ChatActivity.this.searchUserButton.setVisibility(0);
                    ChatActivity.this.searchingUserMessages = null;
                }
            });
            r7.searchItem.getSearchField().setHint(LocaleController.getString("Search", R.string.Search));
            r7.searchItem.setVisibility(8);
        }
        r7.headerItem = menu.addItem(0, (int) R.drawable.ic_ab_other);
        if (r7.currentUser != null) {
            r7.headerItem.addSubItem(32, LocaleController.getString("Call", R.string.Call));
            TL_userFull userFull = MessagesController.getInstance(r7.currentAccount).getUserFull(r7.currentUser.id);
            if (userFull == null || !userFull.phone_calls_available) {
                r7.headerItem.hideSubItem(32);
            } else {
                r7.headerItem.showSubItem(32);
            }
        }
        if (r7.searchItem != null) {
            r7.headerItem.addSubItem(search, LocaleController.getString("Search", R.string.Search));
        }
        if (ChatObject.isChannel(r7.currentChat) && !r7.currentChat.creator && (!r7.currentChat.megagroup || (r7.currentChat.username != null && r7.currentChat.username.length() > 0))) {
            r7.headerItem.addSubItem(21, LocaleController.getString("ReportChat", R.string.ReportChat));
        }
        if (r7.currentUser != null) {
            r7.addContactItem = r7.headerItem.addSubItem(17, TtmlNode.ANONYMOUS_REGION_ID);
        }
        if (r7.currentEncryptedChat != null) {
            r7.timeItem2 = r7.headerItem.addSubItem(13, LocaleController.getString("SetTimer", R.string.SetTimer));
        }
        if (!ChatObject.isChannel(r7.currentChat) || (r7.currentChat != null && r7.currentChat.megagroup && TextUtils.isEmpty(r7.currentChat.username))) {
            r7.headerItem.addSubItem(15, LocaleController.getString("ClearHistory", R.string.ClearHistory));
        }
        if (!ChatObject.isChannel(r7.currentChat)) {
            if (r7.currentChat == null || r7.isBroadcast) {
                r7.headerItem.addSubItem(16, LocaleController.getString("DeleteChatUser", R.string.DeleteChatUser));
            } else {
                r7.headerItem.addSubItem(16, LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit));
            }
        }
        if (r7.currentUser != null) {
            if (r7.currentUser.self) {
                if (r7.currentUser.self) {
                    r7.headerItem.addSubItem(24, LocaleController.getString("AddShortcut", R.string.AddShortcut));
                }
                if (r7.currentUser != null && r7.currentEncryptedChat == null && r7.currentUser.bot) {
                    r7.headerItem.addSubItem(bot_settings, LocaleController.getString("BotSettings", R.string.BotSettings));
                    r7.headerItem.addSubItem(bot_help, LocaleController.getString("BotHelp", R.string.BotHelp));
                    updateBotButtons();
                }
                updateTitle();
                r7.avatarContainer.updateOnlineCount();
                r7.avatarContainer.updateSubtitle();
                updateTitleIcons();
                r7.attachItem = menu.addItem(14, (int) R.drawable.ic_ab_other).setOverrideMenuClick(true).setAllowCloseAnimation(false);
                r7.attachItem.setVisibility(8);
                r7.actionModeViews.clear();
                actionMode = r7.actionBar.createActionMode();
                r7.selectedMessagesCountTextView = new NumberTextView(actionMode.getContext());
                r7.selectedMessagesCountTextView.setTextSize(18);
                r7.selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.selectedMessagesCountTextView.setTextColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
                actionMode.addView(r7.selectedMessagesCountTextView, LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
                r7.selectedMessagesCountTextView.setOnTouchListener(new OnTouchListener() {
                    public boolean onTouch(View v, MotionEvent event) {
                        return true;
                    }
                });
                r7.actionModeTitleContainer = new FrameLayout(context2) {
                    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                        int width = MeasureSpec.getSize(widthMeasureSpec);
                        setMeasuredDimension(width, MeasureSpec.getSize(heightMeasureSpec));
                        SimpleTextView access$6400 = ChatActivity.this.actionModeTextView;
                        int i = (AndroidUtilities.isTablet() || getResources().getConfiguration().orientation != 2) ? 20 : 18;
                        access$6400.setTextSize(i);
                        ChatActivity.this.actionModeTextView.measure(MeasureSpec.makeMeasureSpec(width, Integer.MIN_VALUE), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(24.0f), Integer.MIN_VALUE));
                        if (ChatActivity.this.actionModeSubTextView.getVisibility() != 8) {
                            access$6400 = ChatActivity.this.actionModeSubTextView;
                            int i2 = (AndroidUtilities.isTablet() || getResources().getConfiguration().orientation != 2) ? 16 : 14;
                            access$6400.setTextSize(i2);
                            ChatActivity.this.actionModeSubTextView.measure(MeasureSpec.makeMeasureSpec(width, Integer.MIN_VALUE), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20.0f), Integer.MIN_VALUE));
                        }
                    }

                    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
                        int textTop;
                        int height = bottom - top;
                        if (ChatActivity.this.actionModeSubTextView.getVisibility() != 8) {
                            textTop = ((height / 2) - ChatActivity.this.actionModeTextView.getTextHeight()) / 2;
                            float f = (AndroidUtilities.isTablet() || getResources().getConfiguration().orientation != 2) ? 3.0f : 2.0f;
                            textTop += AndroidUtilities.dp(f);
                        } else {
                            textTop = (height - ChatActivity.this.actionModeTextView.getTextHeight()) / 2;
                        }
                        ChatActivity.this.actionModeTextView.layout(0, textTop, ChatActivity.this.actionModeTextView.getMeasuredWidth(), ChatActivity.this.actionModeTextView.getTextHeight() + textTop);
                        if (ChatActivity.this.actionModeSubTextView.getVisibility() != 8) {
                            int textHeight = (height / 2) + (((height / 2) - ChatActivity.this.actionModeSubTextView.getTextHeight()) / 2);
                            if (!AndroidUtilities.isTablet()) {
                                int i = getResources().getConfiguration().orientation;
                            }
                            textTop = textHeight - AndroidUtilities.dp(1.0f);
                            ChatActivity.this.actionModeSubTextView.layout(0, textTop, ChatActivity.this.actionModeSubTextView.getMeasuredWidth(), ChatActivity.this.actionModeSubTextView.getTextHeight() + textTop);
                        }
                    }
                };
                actionMode.addView(r7.actionModeTitleContainer, LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
                r7.actionModeTitleContainer.setOnTouchListener(new OnTouchListener() {
                    public boolean onTouch(View v, MotionEvent event) {
                        return true;
                    }
                });
                r7.actionModeTitleContainer.setVisibility(8);
                r7.actionModeTextView = new SimpleTextView(context2);
                r7.actionModeTextView.setTextSize(18);
                r7.actionModeTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.actionModeTextView.setTextColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
                r7.actionModeTextView.setText(LocaleController.getString("Edit", R.string.Edit));
                r7.actionModeTitleContainer.addView(r7.actionModeTextView, LayoutHelper.createFrame(-1, -1.0f));
                r7.actionModeSubTextView = new SimpleTextView(context2);
                r7.actionModeSubTextView.setGravity(3);
                r7.actionModeSubTextView.setTextColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
                r7.actionModeTitleContainer.addView(r7.actionModeSubTextView, LayoutHelper.createFrame(-1, -1.0f));
                if (r7.currentEncryptedChat != null) {
                    r7.actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.group_edit, AndroidUtilities.dp(54.0f)));
                    if (!r7.isBroadcast) {
                        r7.actionModeViews.add(actionMode.addItemWithWidth(19, R.drawable.ic_ab_reply, AndroidUtilities.dp(54.0f)));
                    }
                    r7.actionModeViews.add(actionMode.addItemWithWidth(22, R.drawable.ic_ab_fave, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(10, R.drawable.ic_ab_copy, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(11, R.drawable.ic_ab_forward, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(12, R.drawable.ic_ab_delete, AndroidUtilities.dp(54.0f)));
                } else {
                    r7.actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.group_edit, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(19, R.drawable.ic_ab_reply, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(22, R.drawable.ic_ab_fave, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(10, R.drawable.ic_ab_copy, AndroidUtilities.dp(54.0f)));
                    r7.actionModeViews.add(actionMode.addItemWithWidth(12, R.drawable.ic_ab_delete, AndroidUtilities.dp(54.0f)));
                }
                item = actionMode.getItem(edit);
                i = (r7.canEditMessagesCount == 1 || r7.selectedMessagesIds[0].size() + r7.selectedMessagesIds[1].size() != 1) ? 8 : 0;
                item.setVisibility(i);
                actionMode.getItem(10).setVisibility(r7.selectedMessagesCanCopyIds[0].size() + r7.selectedMessagesCanCopyIds[1].size() == 0 ? 0 : 8);
                actionMode.getItem(22).setVisibility(r7.selectedMessagesCanStarIds[0].size() + r7.selectedMessagesCanStarIds[1].size() == 0 ? 0 : 8);
                actionMode.getItem(12).setVisibility(r7.cantDeleteMessagesCount != 0 ? 0 : 8);
                checkActionBarMenu();
                r7.fragmentView = new SizeNotifierFrameLayout(context2) {
                    int inputFieldHeight = 0;

                    protected void onLayout(boolean r1, int r2, int r3, int r4, int r5) {
                        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: org.telegram.ui.ChatActivity.14.onLayout(boolean, int, int, int, int):void
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:256)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:59)
	at jadx.core.ProcessClass.process(ProcessClass.java:42)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
                        /*
                        r0 = this;
                        r0 = r17;
                        r3 = r17.getChildCount();
                        r4 = r17.getKeyboardHeight();
                        r5 = 1101004800; // 0x41a00000 float:20.0 double:5.439686476E-315;
                        r5 = org.telegram.messenger.AndroidUtilities.dp(r5);
                        if (r4 > r5) goto L_0x001f;
                    L_0x0012:
                        r4 = org.telegram.messenger.AndroidUtilities.isInMultiwindow;
                        if (r4 != 0) goto L_0x001f;
                    L_0x0016:
                        r4 = org.telegram.ui.ChatActivity.this;
                        r4 = r4.chatActivityEnterView;
                        r4 = r4.getEmojiPadding();
                        goto L_0x0020;
                    L_0x001f:
                        r4 = 0;
                    L_0x0020:
                        r0.setBottomClip(r4);
                        r5 = 0;
                        if (r5 >= r3) goto L_0x01d9;
                    L_0x0026:
                        r7 = r0.getChildAt(r5);
                        r8 = r7.getVisibility();
                        r9 = 8;
                        if (r8 != r9) goto L_0x0036;
                    L_0x0033:
                        r15 = r3;
                        goto L_0x01d4;
                    L_0x0036:
                        r8 = r7.getLayoutParams();
                        r8 = (android.widget.FrameLayout.LayoutParams) r8;
                        r9 = r7.getMeasuredWidth();
                        r10 = r7.getMeasuredHeight();
                        r11 = r8.gravity;
                        r12 = -1;
                        if (r11 != r12) goto L_0x004b;
                    L_0x0049:
                        r11 = 51;
                    L_0x004b:
                        r12 = r11 & 7;
                        r13 = r11 & 112;
                        r14 = r12 & 7;
                        r6 = 1;
                        if (r14 == r6) goto L_0x0061;
                    L_0x0054:
                        r6 = 5;
                        if (r14 == r6) goto L_0x005b;
                    L_0x0057:
                        r6 = r8.leftMargin;
                        r2 = r6;
                        goto L_0x006e;
                    L_0x005b:
                        r6 = r21 - r9;
                        r14 = r8.rightMargin;
                        r6 = r6 - r14;
                        goto L_0x0059;
                    L_0x0061:
                        r14 = r21 - r19;
                        r14 = r14 - r9;
                        r14 = r14 / 2;
                        r2 = r8.leftMargin;
                        r14 = r14 + r2;
                        r2 = r8.rightMargin;
                        r2 = r14 - r2;
                        r14 = 16;
                        if (r13 == r14) goto L_0x00b1;
                        r14 = 48;
                        if (r13 == r14) goto L_0x0089;
                        r14 = 80;
                        if (r13 == r14) goto L_0x007f;
                        r14 = r8.topMargin;
                        r15 = r3;
                        goto L_0x00c1;
                        r14 = r22 - r4;
                        r14 = r14 - r20;
                        r14 = r14 - r10;
                        r15 = r3;
                        r3 = r8.bottomMargin;
                        r14 = r14 - r3;
                        goto L_0x00c1;
                        r15 = r3;
                        r3 = r8.topMargin;
                        r14 = r17.getPaddingTop();
                        r14 = r14 + r3;
                        r3 = org.telegram.ui.ChatActivity.this;
                        r3 = r3.actionBar;
                        if (r7 == r3) goto L_0x00c1;
                        r3 = org.telegram.ui.ChatActivity.this;
                        r3 = r3.actionBar;
                        r3 = r3.getVisibility();
                        if (r3 != 0) goto L_0x00c1;
                        r3 = org.telegram.ui.ChatActivity.this;
                        r3 = r3.actionBar;
                        r3 = r3.getMeasuredHeight();
                        r14 = r14 + r3;
                        goto L_0x00c1;
                        r15 = r3;
                        r3 = r22 - r4;
                        r3 = r3 - r20;
                        r3 = r3 - r10;
                        r3 = r3 / 2;
                        r14 = r8.topMargin;
                        r3 = r3 + r14;
                        r14 = r8.bottomMargin;
                        r14 = r3 - r14;
                        r3 = r14;
                        r14 = org.telegram.ui.ChatActivity.this;
                        r14 = r14.mentionContainer;
                        if (r7 != r14) goto L_0x00dc;
                        r14 = org.telegram.ui.ChatActivity.this;
                        r14 = r14.chatActivityEnterView;
                        r14 = r14.getMeasuredHeight();
                        r1 = 1073741824; // 0x40000000 float:2.0 double:5.304989477E-315;
                        r1 = org.telegram.messenger.AndroidUtilities.dp(r1);
                        r14 = r14 - r1;
                        r3 = r3 - r14;
                        goto L_0x01cd;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.pagedownButton;
                        if (r7 != r1) goto L_0x00ef;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.chatActivityEnterView;
                        r1 = r1.getMeasuredHeight();
                        r3 = r3 - r1;
                        goto L_0x01cd;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.mentiondownButton;
                        if (r7 != r1) goto L_0x0102;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.chatActivityEnterView;
                        r1 = r1.getMeasuredHeight();
                        r3 = r3 - r1;
                        goto L_0x01cd;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.emptyViewContainer;
                        if (r7 != r1) goto L_0x012c;
                        r1 = r0.inputFieldHeight;
                        r1 = r1 / 2;
                        r14 = org.telegram.ui.ChatActivity.this;
                        r14 = r14.actionBar;
                        r14 = r14.getVisibility();
                        if (r14 != 0) goto L_0x0127;
                        r14 = org.telegram.ui.ChatActivity.this;
                        r14 = r14.actionBar;
                        r14 = r14.getMeasuredHeight();
                        r14 = r14 / 2;
                        goto L_0x0128;
                        r14 = 0;
                        r1 = r1 - r14;
                        r3 = r3 - r1;
                        goto L_0x01cd;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.chatActivityEnterView;
                        r1 = r1.isPopupView(r7);
                        if (r1 == 0) goto L_0x015b;
                        r1 = org.telegram.messenger.AndroidUtilities.isInMultiwindow;
                        if (r1 == 0) goto L_0x0151;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.chatActivityEnterView;
                        r1 = r1.getTop();
                        r14 = r7.getMeasuredHeight();
                        r1 = r1 - r14;
                        r14 = 1065353216; // 0x3f800000 float:1.0 double:5.263544247E-315;
                        r14 = org.telegram.messenger.AndroidUtilities.dp(r14);
                        r3 = r1 + r14;
                        goto L_0x01cd;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.chatActivityEnterView;
                        r3 = r1.getBottom();
                        goto L_0x01cd;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.gifHintTextView;
                        if (r7 == r1) goto L_0x01ca;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.voiceHintTextView;
                        if (r7 == r1) goto L_0x01ca;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.mediaBanTooltip;
                        if (r7 != r1) goto L_0x0174;
                        goto L_0x01ca;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.chatListView;
                        if (r7 == r1) goto L_0x01b8;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.progressView;
                        if (r7 != r1) goto L_0x0185;
                        goto L_0x01b8;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.actionBar;
                        if (r7 != r1) goto L_0x0193;
                        r1 = r17.getPaddingTop();
                        r3 = r3 - r1;
                        goto L_0x01cd;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.roundVideoContainer;
                        if (r7 != r1) goto L_0x01a6;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.actionBar;
                        r3 = r1.getMeasuredHeight();
                        goto L_0x01cd;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.instantCameraView;
                        if (r7 == r1) goto L_0x01b6;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.overlayView;
                        if (r7 != r1) goto L_0x01cd;
                        r3 = 0;
                        goto L_0x01cd;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1 = r1.chatActivityEnterView;
                        r1 = r1.isTopViewVisible();
                        if (r1 == 0) goto L_0x01cd;
                        r1 = 1111490560; // 0x42400000 float:48.0 double:5.491493014E-315;
                        r1 = org.telegram.messenger.AndroidUtilities.dp(r1);
                        r3 = r3 - r1;
                        goto L_0x01cd;
                        r1 = r0.inputFieldHeight;
                        r3 = r3 - r1;
                        r1 = r2 + r9;
                        r14 = r3 + r10;
                        r7.layout(r2, r3, r1, r14);
                    L_0x01d4:
                        r5 = r5 + 1;
                        r3 = r15;
                        goto L_0x0024;
                    L_0x01d9:
                        r15 = r3;
                        r1 = org.telegram.ui.ChatActivity.this;
                        r1.updateMessagesVisisblePart();
                        r17.notifyHeightChanged();
                        return;
                        */
                        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.14.onLayout(boolean, int, int, int, int):void");
                    }

                    protected void onAttachedToWindow() {
                        super.onAttachedToWindow();
                        MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
                        if (messageObject != null && messageObject.isRoundVideo() && messageObject.eventId == 0 && messageObject.getDialogId() == ChatActivity.this.dialog_id) {
                            MediaController.getInstance().setTextureView(ChatActivity.this.createTextureView(false), ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.roundVideoContainer, true);
                        }
                    }

                    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
                        boolean result;
                        MessageObject messageObject = MediaController.getInstance().getPlayingMessageObject();
                        int i = 0;
                        boolean isRoundVideo = messageObject != null && messageObject.eventId == 0 && messageObject.isRoundVideo();
                        if (!isRoundVideo || child != ChatActivity.this.roundVideoContainer) {
                            boolean result2 = super.drawChild(canvas, child, drawingTime);
                            if (isRoundVideo && child == ChatActivity.this.chatListView && messageObject.type != 5 && ChatActivity.this.roundVideoContainer != null) {
                                super.drawChild(canvas, ChatActivity.this.roundVideoContainer, drawingTime);
                                if (ChatActivity.this.drawLaterRoundProgressCell != null) {
                                    canvas.save();
                                    canvas.translate(ChatActivity.this.drawLaterRoundProgressCell.getX(), (float) (ChatActivity.this.drawLaterRoundProgressCell.getTop() + ChatActivity.this.chatListView.getTop()));
                                    ChatActivity.this.drawLaterRoundProgressCell.drawRoundProgress(canvas);
                                    canvas.restore();
                                }
                            }
                            result = result2;
                        } else if (messageObject.type == 5) {
                            if (Theme.chat_roundVideoShadow != null && ChatActivity.this.aspectRatioFrameLayout.isDrawingReady()) {
                                int x = ((int) child.getX()) - AndroidUtilities.dp(3.0f);
                                int y = ((int) child.getY()) - AndroidUtilities.dp(2.0f);
                                Theme.chat_roundVideoShadow.setAlpha(255);
                                Theme.chat_roundVideoShadow.setBounds(x, y, (AndroidUtilities.roundMessageSize + x) + AndroidUtilities.dp(6.0f), (AndroidUtilities.roundMessageSize + y) + AndroidUtilities.dp(6.0f));
                                Theme.chat_roundVideoShadow.draw(canvas);
                            }
                            result = super.drawChild(canvas, child, drawingTime);
                        } else {
                            result = false;
                        }
                        if (child == ChatActivity.this.actionBar && ChatActivity.this.parentLayout != null) {
                            ActionBarLayout access$7400 = ChatActivity.this.parentLayout;
                            if (ChatActivity.this.actionBar.getVisibility() == 0) {
                                i = ChatActivity.this.actionBar.getMeasuredHeight();
                            }
                            access$7400.drawHeaderShadow(canvas, i);
                        }
                        return result;
                    }

                    protected boolean isActionBarVisible() {
                        return ChatActivity.this.actionBar.getVisibility() == 0;
                    }

                    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
                        int heightSize = MeasureSpec.getSize(heightMeasureSpec);
                        int allHeight = heightSize;
                        setMeasuredDimension(widthSize, heightSize);
                        int heightSize2 = heightSize - getPaddingTop();
                        measureChildWithMargins(ChatActivity.this.actionBar, widthMeasureSpec, 0, heightMeasureSpec, 0);
                        int actionBarHeight = ChatActivity.this.actionBar.getMeasuredHeight();
                        if (ChatActivity.this.actionBar.getVisibility() == 0) {
                            heightSize2 -= actionBarHeight;
                        }
                        if (getKeyboardHeight() <= AndroidUtilities.dp(20.0f) && !AndroidUtilities.isInMultiwindow) {
                            heightSize2 -= ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                            allHeight -= ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                        }
                        int childCount = getChildCount();
                        measureChildWithMargins(ChatActivity.this.chatActivityEnterView, widthMeasureSpec, 0, heightMeasureSpec, 0);
                        r6.inputFieldHeight = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                        heightSize = 0;
                        while (true) {
                            int i = heightSize;
                            if (i >= childCount) {
                                break;
                            }
                            View child = getChildAt(i);
                            if (!(child == null || child.getVisibility() == 8 || child == ChatActivity.this.chatActivityEnterView)) {
                                if (child != ChatActivity.this.actionBar) {
                                    if (child != ChatActivity.this.chatListView) {
                                        if (child != ChatActivity.this.progressView) {
                                            if (child != ChatActivity.this.instantCameraView) {
                                                if (child != ChatActivity.this.overlayView) {
                                                    if (child == ChatActivity.this.emptyViewContainer) {
                                                        child.measure(MeasureSpec.makeMeasureSpec(widthSize, 1073741824), MeasureSpec.makeMeasureSpec(heightSize2, 1073741824));
                                                    } else if (ChatActivity.this.chatActivityEnterView.isPopupView(child)) {
                                                        if (!AndroidUtilities.isInMultiwindow) {
                                                            heightSize = child.getLayoutParams().height;
                                                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, 1073741824), MeasureSpec.makeMeasureSpec(child.getLayoutParams().height, 1073741824));
                                                        } else if (AndroidUtilities.isTablet()) {
                                                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, 1073741824), MeasureSpec.makeMeasureSpec(Math.min(AndroidUtilities.dp(320.0f), (((heightSize2 - r6.inputFieldHeight) + actionBarHeight) - AndroidUtilities.statusBarHeight) + getPaddingTop()), 1073741824));
                                                        } else {
                                                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, 1073741824), MeasureSpec.makeMeasureSpec((((heightSize2 - r6.inputFieldHeight) + actionBarHeight) - AndroidUtilities.statusBarHeight) + getPaddingTop(), 1073741824));
                                                        }
                                                    } else if (child == ChatActivity.this.mentionContainer) {
                                                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) ChatActivity.this.mentionContainer.getLayoutParams();
                                                        if (ChatActivity.this.mentionsAdapter.isBannedInline()) {
                                                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, 1073741824), MeasureSpec.makeMeasureSpec(heightSize2, Integer.MIN_VALUE));
                                                        } else {
                                                            int height;
                                                            ChatActivity.this.mentionListViewIgnoreLayout = true;
                                                            int padding;
                                                            if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                                                int maxHeight = ChatActivity.this.mentionGridLayoutManager.getRowsCount(widthSize) * 102;
                                                                if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                                                    maxHeight += 34;
                                                                }
                                                                height = (heightSize2 - ChatActivity.this.chatActivityEnterView.getMeasuredHeight()) + (maxHeight != 0 ? AndroidUtilities.dp(2.0f) : 0);
                                                                padding = Math.max(0, height - AndroidUtilities.dp(Math.min((float) maxHeight, 122.399994f)));
                                                                if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                                                    ChatActivity.this.mentionListView.setPadding(0, 0, 0, padding);
                                                                } else {
                                                                    ChatActivity.this.mentionListView.setPadding(0, padding, 0, 0);
                                                                }
                                                            } else {
                                                                heightSize = ChatActivity.this.mentionsAdapter.getItemCount();
                                                                height = 0;
                                                                if (ChatActivity.this.mentionsAdapter.isBotContext()) {
                                                                    if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                                                        height = 0 + 36;
                                                                        heightSize--;
                                                                    }
                                                                    height += heightSize * 68;
                                                                } else {
                                                                    height = 0 + (heightSize * 36);
                                                                }
                                                                int height2 = (height != 0 ? AndroidUtilities.dp(2.0f) : 0) + (heightSize2 - ChatActivity.this.chatActivityEnterView.getMeasuredHeight());
                                                                padding = Math.max(0, height2 - AndroidUtilities.dp(Math.min((float) height, 122.399994f)));
                                                                if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                                                    ChatActivity.this.mentionListView.setPadding(0, 0, 0, padding);
                                                                } else {
                                                                    ChatActivity.this.mentionListView.setPadding(0, padding, 0, 0);
                                                                }
                                                                height = height2;
                                                            }
                                                            layoutParams.height = height;
                                                            layoutParams.topMargin = 0;
                                                            ChatActivity.this.mentionListViewIgnoreLayout = false;
                                                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, 1073741824), MeasureSpec.makeMeasureSpec(layoutParams.height, 1073741824));
                                                        }
                                                    } else {
                                                        measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);
                                                    }
                                                }
                                            }
                                            child.measure(MeasureSpec.makeMeasureSpec(widthSize, 1073741824), MeasureSpec.makeMeasureSpec((allHeight - r6.inputFieldHeight) + AndroidUtilities.dp(3.0f), 1073741824));
                                        }
                                    }
                                    child.measure(MeasureSpec.makeMeasureSpec(widthSize, 1073741824), MeasureSpec.makeMeasureSpec(Math.max(AndroidUtilities.dp(10.0f), (heightSize2 - r6.inputFieldHeight) + AndroidUtilities.dp((float) (2 + (ChatActivity.this.chatActivityEnterView.isTopViewVisible() ? 48 : 0)))), 1073741824));
                                }
                            }
                            heightSize = i + 1;
                        }
                        if (ChatActivity.this.fixPaddingsInLayout) {
                            ChatActivity.this.globalIgnoreLayout = true;
                            ChatActivity.this.checkListViewPaddingsInternal();
                            ChatActivity.this.fixPaddingsInLayout = false;
                            ChatActivity.this.globalIgnoreLayout = false;
                        }
                        if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
                            final int scrollTo = ChatActivity.this.scrollToPositionOnRecreate;
                            AndroidUtilities.runOnUIThread(new Runnable() {
                                public void run() {
                                    ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(scrollTo, ChatActivity.this.scrollToOffsetOnRecreate);
                                }
                            });
                            ChatActivity.this.globalIgnoreLayout = true;
                            ChatActivity.this.scrollToPositionOnRecreate = -1;
                            ChatActivity.this.globalIgnoreLayout = false;
                        }
                    }

                    public void requestLayout() {
                        if (!ChatActivity.this.globalIgnoreLayout) {
                            super.requestLayout();
                        }
                    }
                };
                r7.contentView = (SizeNotifierFrameLayout) r7.fragmentView;
                r7.contentView.setBackgroundImage(Theme.getCachedWallpaper());
                r7.emptyViewContainer = new FrameLayout(context2);
                r7.emptyViewContainer.setVisibility(4);
                r7.contentView.addView(r7.emptyViewContainer, LayoutHelper.createFrame(-1, -2, 17));
                r7.emptyViewContainer.setOnTouchListener(new OnTouchListener() {
                    public boolean onTouch(View v, MotionEvent event) {
                        return true;
                    }
                });
                if (r7.currentEncryptedChat == null) {
                    r7.bigEmptyView = new ChatBigEmptyView(context2, true);
                    if (r7.currentEncryptedChat.admin_id != UserConfig.getInstance(r7.currentAccount).getClientUserId()) {
                        r7.bigEmptyView.setSecretText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, UserObject.getFirstName(r7.currentUser)));
                    } else {
                        r7.bigEmptyView.setSecretText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, UserObject.getFirstName(r7.currentUser)));
                    }
                    r7.emptyViewContainer.addView(r7.bigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
                } else if (r7.currentUser == null && r7.currentUser.self) {
                    r7.bigEmptyView = new ChatBigEmptyView(context2, false);
                    r7.emptyViewContainer.addView(r7.bigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
                } else {
                    r7.emptyView = new TextView(context2);
                    if (r7.currentUser != null || r7.currentUser.id == 777000 || r7.currentUser.id == 429000 || r7.currentUser.id == 4244000 || !MessagesController.isSupportId(r7.currentUser.id)) {
                        r7.emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
                    } else {
                        r7.emptyView.setText(LocaleController.getString("GotAQuestion", R.string.GotAQuestion));
                    }
                    r7.emptyView.setTextSize(1, 14.0f);
                    r7.emptyView.setGravity(17);
                    r7.emptyView.setTextColor(Theme.getColor(Theme.key_chat_serviceText));
                    r7.emptyView.setBackgroundResource(R.drawable.system);
                    r7.emptyView.getBackground().setColorFilter(Theme.colorFilter);
                    r7.emptyView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    r7.emptyView.setPadding(AndroidUtilities.dp(10.0f), AndroidUtilities.dp(2.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(3.0f));
                    r7.emptyViewContainer.addView(r7.emptyView, new FrameLayout.LayoutParams(-2, -2, 17));
                }
                if (r7.chatActivityEnterView == null) {
                    r7.chatActivityEnterView.onDestroy();
                    if (r7.chatActivityEnterView.isEditingMessage()) {
                        oldMessage = r7.chatActivityEnterView.getFieldText();
                    } else {
                        oldMessage = null;
                    }
                } else {
                    oldMessage = null;
                }
                oldMessage2 = oldMessage;
                if (r7.mentionsAdapter != null) {
                    r7.mentionsAdapter.onDestroy();
                }
                r7.chatListView = new RecyclerListView(context2) {
                    ArrayList<ChatMessageCell> drawCaptionAfter = new ArrayList();
                    ArrayList<ChatMessageCell> drawNamesAfter = new ArrayList();
                    ArrayList<ChatMessageCell> drawTimeAfter = new ArrayList();
                    private float endedTrackingX;
                    private long lastReplyButtonAnimationTime;
                    private long lastTrackingAnimationTime;
                    private boolean maybeStartTracking;
                    private float replyButtonProgress;
                    private boolean slideAnimationInProgress;
                    private ChatMessageCell slidingView;
                    private boolean startedTracking;
                    private int startedTrackingPointerId;
                    private int startedTrackingX;
                    private int startedTrackingY;
                    private float trackAnimationProgress;
                    private boolean wasTrackingVibrate;

                    public boolean drawChild(android.graphics.Canvas r1, android.view.View r2, long r3) {
                        /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.DecodeException: Load method exception in method: org.telegram.ui.ChatActivity.16.drawChild(android.graphics.Canvas, android.view.View, long):boolean
	at jadx.core.dex.nodes.MethodNode.load(MethodNode.java:116)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:249)
	at jadx.core.dex.nodes.ClassNode.load(ClassNode.java:256)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:59)
	at jadx.core.ProcessClass.process(ProcessClass.java:42)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:306)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler$1.run(JadxDecompiler.java:199)
Caused by: java.lang.NullPointerException
*/
                        /*
                        r0 = this;
                        r0 = r31;
                        r1 = r32;
                        r2 = r33;
                        r3 = 0;
                        r4 = 0;
                        r5 = r2 instanceof org.telegram.ui.Cells.ChatMessageCell;
                        r6 = 1;
                        if (r5 == 0) goto L_0x0052;
                    L_0x000d:
                        r5 = r2;
                        r5 = (org.telegram.ui.Cells.ChatMessageCell) r5;
                        r7 = r5.getCurrentPosition();
                        r8 = r5.getCurrentMessagesGroup();
                        if (r7 == 0) goto L_0x0047;
                    L_0x001a:
                        r9 = r7.pw;
                        r10 = r7.spanSize;
                        if (r9 == r10) goto L_0x0033;
                    L_0x0020:
                        r9 = r7.spanSize;
                        r10 = 1000; // 0x3e8 float:1.401E-42 double:4.94E-321;
                        if (r9 != r10) goto L_0x0033;
                    L_0x0026:
                        r9 = r7.siblingHeights;
                        if (r9 != 0) goto L_0x0033;
                    L_0x002a:
                        r9 = r8.hasSibling;
                        if (r9 == 0) goto L_0x0033;
                    L_0x002e:
                        r3 = r5.getBackgroundDrawableLeft();
                        goto L_0x0047;
                    L_0x0033:
                        r9 = r7.siblingHeights;
                        if (r9 == 0) goto L_0x0047;
                    L_0x0037:
                        r9 = r33.getBottom();
                        r10 = r5.isPinnedBottom();
                        r10 = r10 + r6;
                        r10 = (float) r10;
                        r10 = org.telegram.messenger.AndroidUtilities.dp(r10);
                        r9 = r9 - r10;
                        r4 = r9;
                    L_0x0047:
                        r9 = r5.needDelayRoundProgressDraw();
                        if (r9 == 0) goto L_0x0052;
                    L_0x004d:
                        r9 = org.telegram.ui.ChatActivity.this;
                        r9.drawLaterRoundProgressCell = r5;
                    L_0x0052:
                        if (r3 == 0) goto L_0x0075;
                    L_0x0054:
                        r32.save();
                        r5 = (float) r3;
                        r7 = r33.getTranslationX();
                        r5 = r5 + r7;
                        r7 = r33.getTop();
                        r7 = (float) r7;
                        r8 = r33.getRight();
                        r8 = (float) r8;
                        r9 = r33.getTranslationX();
                        r8 = r8 + r9;
                        r9 = r33.getBottom();
                        r9 = (float) r9;
                        r1.clipRect(r5, r7, r8, r9);
                        goto L_0x0097;
                    L_0x0075:
                        if (r4 == 0) goto L_0x0097;
                    L_0x0077:
                        r32.save();
                        r5 = r33.getLeft();
                        r5 = (float) r5;
                        r7 = r33.getTranslationX();
                        r5 = r5 + r7;
                        r7 = r33.getTop();
                        r7 = (float) r7;
                        r8 = r33.getRight();
                        r8 = (float) r8;
                        r9 = r33.getTranslationX();
                        r8 = r8 + r9;
                        r9 = (float) r4;
                        r1.clipRect(r5, r7, r8, r9);
                    L_0x0097:
                        r5 = super.drawChild(r32, r33, r34);
                        if (r3 != 0) goto L_0x009f;
                    L_0x009d:
                        if (r4 == 0) goto L_0x00a2;
                    L_0x009f:
                        r32.restore();
                    L_0x00a2:
                        r7 = 0;
                        r8 = r31.getChildCount();
                        r10 = 0;
                    L_0x00a8:
                        if (r10 >= r8) goto L_0x00b5;
                    L_0x00aa:
                        r11 = r0.getChildAt(r10);
                        if (r11 != r2) goto L_0x00b2;
                    L_0x00b0:
                        r7 = r10;
                        goto L_0x00b5;
                    L_0x00b2:
                        r10 = r10 + 1;
                        goto L_0x00a8;
                    L_0x00b5:
                        r10 = r8 + -1;
                        if (r7 != r10) goto L_0x016e;
                    L_0x00b9:
                        r10 = r0.drawTimeAfter;
                        r10 = r10.size();
                        if (r10 <= 0) goto L_0x00ef;
                    L_0x00c1:
                        r11 = 0;
                    L_0x00c2:
                        if (r11 >= r10) goto L_0x00ea;
                    L_0x00c4:
                        r12 = r0.drawTimeAfter;
                        r12 = r12.get(r11);
                        r12 = (org.telegram.ui.Cells.ChatMessageCell) r12;
                        r32.save();
                        r13 = r12.getLeft();
                        r13 = (float) r13;
                        r14 = r12.getTranslationX();
                        r13 = r13 + r14;
                        r14 = r12.getTop();
                        r14 = (float) r14;
                        r1.translate(r13, r14);
                        r12.drawTimeLayout(r1);
                        r32.restore();
                        r11 = r11 + 1;
                        goto L_0x00c2;
                    L_0x00ea:
                        r11 = r0.drawTimeAfter;
                        r11.clear();
                    L_0x00ef:
                        r11 = r0.drawNamesAfter;
                        r10 = r11.size();
                        if (r10 <= 0) goto L_0x0125;
                    L_0x00f7:
                        r11 = 0;
                    L_0x00f8:
                        if (r11 >= r10) goto L_0x0120;
                    L_0x00fa:
                        r12 = r0.drawNamesAfter;
                        r12 = r12.get(r11);
                        r12 = (org.telegram.ui.Cells.ChatMessageCell) r12;
                        r32.save();
                        r13 = r12.getLeft();
                        r13 = (float) r13;
                        r14 = r12.getTranslationX();
                        r13 = r13 + r14;
                        r14 = r12.getTop();
                        r14 = (float) r14;
                        r1.translate(r13, r14);
                        r12.drawNamesLayout(r1);
                        r32.restore();
                        r11 = r11 + 1;
                        goto L_0x00f8;
                    L_0x0120:
                        r11 = r0.drawNamesAfter;
                        r11.clear();
                    L_0x0125:
                        r11 = r0.drawCaptionAfter;
                        r10 = r11.size();
                        if (r10 <= 0) goto L_0x016e;
                    L_0x012d:
                        r11 = 0;
                    L_0x012e:
                        if (r11 >= r10) goto L_0x0169;
                    L_0x0130:
                        r12 = r0.drawCaptionAfter;
                        r12 = r12.get(r11);
                        r12 = (org.telegram.ui.Cells.ChatMessageCell) r12;
                        r13 = r12.getCurrentPosition();
                        if (r13 != 0) goto L_0x013f;
                    L_0x013e:
                        goto L_0x0166;
                    L_0x013f:
                        r32.save();
                        r13 = r12.getLeft();
                        r13 = (float) r13;
                        r14 = r12.getTranslationX();
                        r13 = r13 + r14;
                        r14 = r12.getTop();
                        r14 = (float) r14;
                        r1.translate(r13, r14);
                        r13 = r12.getCurrentPosition();
                        r13 = r13.flags;
                        r13 = r13 & r6;
                        if (r13 != 0) goto L_0x015f;
                    L_0x015d:
                        r13 = r6;
                        goto L_0x0160;
                    L_0x015f:
                        r13 = 0;
                    L_0x0160:
                        r12.drawCaptionLayout(r1, r13);
                        r32.restore();
                    L_0x0166:
                        r11 = r11 + 1;
                        goto L_0x012e;
                    L_0x0169:
                        r11 = r0.drawCaptionAfter;
                        r11.clear();
                    L_0x016e:
                        r10 = r2 instanceof org.telegram.ui.Cells.ChatMessageCell;
                        if (r10 == 0) goto L_0x047a;
                    L_0x0172:
                        r10 = r2;
                        r10 = (org.telegram.ui.Cells.ChatMessageCell) r10;
                        r11 = r10.getCurrentPosition();
                        if (r11 == 0) goto L_0x0217;
                    L_0x017b:
                        r12 = r11.last;
                        if (r12 != 0) goto L_0x0187;
                    L_0x017f:
                        r12 = r11.minX;
                        if (r12 != 0) goto L_0x01d2;
                    L_0x0183:
                        r12 = r11.minY;
                        if (r12 != 0) goto L_0x01d2;
                    L_0x0187:
                        r12 = r8 + -1;
                        if (r7 != r12) goto L_0x01b6;
                    L_0x018b:
                        r32.save();
                        r12 = r10.getLeft();
                        r12 = (float) r12;
                        r13 = r10.getTranslationX();
                        r12 = r12 + r13;
                        r13 = r10.getTop();
                        r13 = (float) r13;
                        r1.translate(r12, r13);
                        r12 = r11.last;
                        if (r12 == 0) goto L_0x01a7;
                    L_0x01a4:
                        r10.drawTimeLayout(r1);
                    L_0x01a7:
                        r12 = r11.minX;
                        if (r12 != 0) goto L_0x01b2;
                    L_0x01ab:
                        r12 = r11.minY;
                        if (r12 != 0) goto L_0x01b2;
                    L_0x01af:
                        r10.drawNamesLayout(r1);
                    L_0x01b2:
                        r32.restore();
                        goto L_0x01d2;
                    L_0x01b6:
                        r12 = r11.last;
                        if (r12 == 0) goto L_0x01bf;
                    L_0x01ba:
                        r12 = r0.drawTimeAfter;
                        r12.add(r10);
                    L_0x01bf:
                        r12 = r11.minX;
                        if (r12 != 0) goto L_0x01d2;
                    L_0x01c3:
                        r12 = r11.minY;
                        if (r12 != 0) goto L_0x01d2;
                    L_0x01c7:
                        r12 = r10.hasNameLayout();
                        if (r12 == 0) goto L_0x01d2;
                    L_0x01cd:
                        r12 = r0.drawNamesAfter;
                        r12.add(r10);
                    L_0x01d2:
                        r12 = r8 + -1;
                        if (r7 != r12) goto L_0x0206;
                    L_0x01d6:
                        r32.save();
                        r12 = r10.getLeft();
                        r12 = (float) r12;
                        r13 = r10.getTranslationX();
                        r12 = r12 + r13;
                        r13 = r10.getTop();
                        r13 = (float) r13;
                        r1.translate(r12, r13);
                        r12 = r10.hasCaptionLayout();
                        if (r12 == 0) goto L_0x0202;
                    L_0x01f1:
                        r12 = r11.flags;
                        r12 = r12 & 8;
                        if (r12 == 0) goto L_0x0202;
                    L_0x01f7:
                        r12 = r11.flags;
                        r12 = r12 & r6;
                        if (r12 != 0) goto L_0x01fe;
                    L_0x01fc:
                        r12 = r6;
                        goto L_0x01ff;
                    L_0x01fe:
                        r12 = 0;
                    L_0x01ff:
                        r10.drawCaptionLayout(r1, r12);
                    L_0x0202:
                        r32.restore();
                        goto L_0x0217;
                    L_0x0206:
                        r12 = r10.hasCaptionLayout();
                        if (r12 == 0) goto L_0x0217;
                    L_0x020c:
                        r12 = r11.flags;
                        r12 = r12 & 8;
                        if (r12 == 0) goto L_0x0217;
                    L_0x0212:
                        r12 = r0.drawCaptionAfter;
                        r12.add(r10);
                    L_0x0217:
                        r12 = r10.getMessageObject();
                        r13 = org.telegram.ui.ChatActivity.this;
                        r13 = r13.roundVideoContainer;
                        r14 = 1111490560; // 0x42400000 float:48.0 double:5.491493014E-315;
                        if (r13 == 0) goto L_0x02ac;
                    L_0x0225:
                        r13 = r12.isRoundVideo();
                        if (r13 == 0) goto L_0x02ac;
                    L_0x022b:
                        r13 = org.telegram.messenger.MediaController.getInstance();
                        r13 = r13.isPlayingMessage(r12);
                        if (r13 == 0) goto L_0x02ac;
                    L_0x0235:
                        r13 = r10.getPhotoImage();
                        r15 = org.telegram.ui.ChatActivity.this;
                        r15 = r15.chatActivityEnterView;
                        r15 = r15.isTopViewVisible();
                        if (r15 == 0) goto L_0x0248;
                    L_0x0243:
                        r15 = org.telegram.messenger.AndroidUtilities.dp(r14);
                        goto L_0x0249;
                    L_0x0248:
                        r15 = 0;
                    L_0x0249:
                        r9 = r13.getImageX();
                        r9 = (float) r9;
                        r17 = r10.getTranslationX();
                        r9 = r9 + r17;
                        r14 = org.telegram.ui.ChatActivity.this;
                        r14 = r14.fragmentView;
                        r14 = r14.getPaddingTop();
                        r17 = r10.getTop();
                        r14 = r14 + r17;
                        r17 = r13.getImageY();
                        r14 = r14 + r17;
                        r14 = r14 - r15;
                        r14 = (float) r14;
                        r6 = org.telegram.ui.ChatActivity.this;
                        r6 = r6.roundVideoContainer;
                        r6 = r6.getTranslationX();
                        r6 = (r6 > r9 ? 1 : (r6 == r9 ? 0 : -1));
                        if (r6 != 0) goto L_0x0288;
                    L_0x027a:
                        r6 = org.telegram.ui.ChatActivity.this;
                        r6 = r6.roundVideoContainer;
                        r6 = r6.getTranslationY();
                        r6 = (r6 > r14 ? 1 : (r6 == r14 ? 0 : -1));
                        if (r6 == 0) goto L_0x02ac;
                    L_0x0288:
                        r6 = org.telegram.ui.ChatActivity.this;
                        r6 = r6.roundVideoContainer;
                        r6.setTranslationX(r9);
                        r6 = org.telegram.ui.ChatActivity.this;
                        r6 = r6.roundVideoContainer;
                        r6.setTranslationY(r14);
                        r6 = org.telegram.ui.ChatActivity.this;
                        r6 = r6.fragmentView;
                        r6.invalidate();
                        r6 = org.telegram.ui.ChatActivity.this;
                        r6 = r6.roundVideoContainer;
                        r6.invalidate();
                    L_0x02ac:
                        r6 = r10.getAvatarImage();
                        if (r6 == 0) goto L_0x047a;
                    L_0x02b2:
                        r9 = org.telegram.ui.ChatActivity.this;
                        r9 = r9.getValidGroupedMessage(r12);
                        r13 = r33.getTop();
                        r14 = r10.isPinnedBottom();
                        if (r14 == 0) goto L_0x0346;
                    L_0x02c2:
                        r14 = org.telegram.ui.ChatActivity.this;
                        r14 = r14.chatListView;
                        r14 = r14.getChildViewHolder(r2);
                        if (r14 == 0) goto L_0x0346;
                    L_0x02ce:
                        r15 = r14.getAdapterPosition();
                        if (r9 == 0) goto L_0x0321;
                    L_0x02d4:
                        if (r11 == 0) goto L_0x0321;
                    L_0x02d6:
                        r19 = r3;
                        r3 = r9.posArray;
                        r3 = r3.indexOf(r11);
                        r20 = r4;
                        r4 = r9.posArray;
                        r4 = r4.size();
                        r21 = r7;
                        r7 = r11.flags;
                        r7 = r7 & 8;
                        if (r7 == 0) goto L_0x02f4;
                    L_0x02ee:
                        r7 = r15 - r4;
                        r7 = r7 + r3;
                        r25 = r8;
                        goto L_0x0320;
                    L_0x02f4:
                        r7 = r15 + -1;
                        r17 = r3 + 1;
                    L_0x02f8:
                        r22 = r17;
                        if (r3 >= r4) goto L_0x031e;
                    L_0x02fc:
                        r23 = r3;
                        r3 = r9.posArray;
                        r24 = r4;
                        r4 = r22;
                        r3 = r3.get(r4);
                        r3 = (org.telegram.messenger.MessageObject.GroupedMessagePosition) r3;
                        r3 = r3.minY;
                        r25 = r8;
                        r8 = r11.maxY;
                        if (r3 <= r8) goto L_0x0313;
                    L_0x0312:
                        goto L_0x0320;
                    L_0x0313:
                        r7 = r7 + -1;
                        r17 = r4 + 1;
                        r3 = r23;
                        r4 = r24;
                        r8 = r25;
                        goto L_0x02f8;
                    L_0x031e:
                        r25 = r8;
                    L_0x0320:
                        goto L_0x032b;
                    L_0x0321:
                        r19 = r3;
                        r20 = r4;
                        r21 = r7;
                        r25 = r8;
                        r7 = r15 + -1;
                    L_0x032b:
                        r3 = r7;
                        r4 = org.telegram.ui.ChatActivity.this;
                        r4 = r4.chatListView;
                        r4 = r4.findViewHolderForAdapterPosition(r3);
                        if (r4 == 0) goto L_0x034e;
                    L_0x0338:
                        r7 = 1148846080; // 0x447a0000 float:1000.0 double:5.676053805E-315;
                        r7 = org.telegram.messenger.AndroidUtilities.dp(r7);
                        r7 = -r7;
                        r6.setImageY(r7);
                        r6.draw(r1);
                        return r5;
                    L_0x0346:
                        r19 = r3;
                        r20 = r4;
                        r21 = r7;
                        r25 = r8;
                    L_0x034e:
                        r3 = r10.getTranslationX();
                        r4 = r33.getTop();
                        r7 = r10.getLayoutHeight();
                        r4 = r4 + r7;
                        r7 = org.telegram.ui.ChatActivity.this;
                        r7 = r7.chatListView;
                        r7 = r7.getMeasuredHeight();
                        r8 = org.telegram.ui.ChatActivity.this;
                        r8 = r8.chatListView;
                        r8 = r8.getPaddingBottom();
                        r7 = r7 - r8;
                        if (r4 <= r7) goto L_0x0373;
                    L_0x0372:
                        r4 = r7;
                    L_0x0373:
                        r8 = r10.isPinnedTop();
                        if (r8 == 0) goto L_0x0445;
                    L_0x0379:
                        r8 = org.telegram.ui.ChatActivity.this;
                        r8 = r8.chatListView;
                        r8 = r8.getChildViewHolder(r2);
                        if (r8 == 0) goto L_0x0445;
                    L_0x0385:
                        r16 = 0;
                        r14 = r16;
                        r15 = 20;
                        if (r14 < r15) goto L_0x0394;
                    L_0x038e:
                        r28 = r7;
                        r30 = r9;
                        goto L_0x0449;
                    L_0x0394:
                        r16 = r14 + 1;
                        r14 = r8.getAdapterPosition();
                        if (r9 == 0) goto L_0x03f5;
                    L_0x039c:
                        if (r11 == 0) goto L_0x03f5;
                    L_0x039e:
                        r15 = r9.posArray;
                        r15 = r15.indexOf(r11);
                        if (r15 >= 0) goto L_0x03a7;
                    L_0x03a6:
                        goto L_0x038e;
                    L_0x03a7:
                        r2 = r9.posArray;
                        r2 = r2.size();
                        r26 = r2;
                        r2 = r11.flags;
                        r2 = r2 & 4;
                        if (r2 == 0) goto L_0x03c2;
                    L_0x03b5:
                        r2 = r14 + r15;
                        r17 = 1;
                        r2 = r2 + 1;
                        r28 = r7;
                        r29 = r8;
                        r30 = r9;
                        goto L_0x03f4;
                    L_0x03c2:
                        r17 = 1;
                        r2 = r14 + 1;
                        r18 = r15 + -1;
                    L_0x03c8:
                        r27 = r18;
                        if (r15 < 0) goto L_0x03ee;
                    L_0x03cc:
                        r28 = r7;
                        r7 = r9.posArray;
                        r29 = r8;
                        r8 = r27;
                        r7 = r7.get(r8);
                        r7 = (org.telegram.messenger.MessageObject.GroupedMessagePosition) r7;
                        r7 = r7.maxY;
                        r30 = r9;
                        r9 = r11.minY;
                        if (r7 >= r9) goto L_0x03e3;
                    L_0x03e2:
                        goto L_0x03f4;
                    L_0x03e3:
                        r2 = r2 + 1;
                        r18 = r8 + -1;
                        r7 = r28;
                        r8 = r29;
                        r9 = r30;
                        goto L_0x03c8;
                    L_0x03ee:
                        r28 = r7;
                        r29 = r8;
                        r30 = r9;
                    L_0x03f4:
                        goto L_0x03ff;
                    L_0x03f5:
                        r28 = r7;
                        r29 = r8;
                        r30 = r9;
                        r17 = 1;
                        r2 = r14 + 1;
                    L_0x03ff:
                        r7 = org.telegram.ui.ChatActivity.this;
                        r7 = r7.chatListView;
                        r8 = r7.findViewHolderForAdapterPosition(r2);
                        if (r8 == 0) goto L_0x0449;
                    L_0x040b:
                        r7 = r8.itemView;
                        r13 = r7.getTop();
                        r7 = 1111490560; // 0x42400000 float:48.0 double:5.491493014E-315;
                        r9 = org.telegram.messenger.AndroidUtilities.dp(r7);
                        r7 = r4 - r9;
                        r9 = r8.itemView;
                        r9 = r9.getBottom();
                        if (r7 >= r9) goto L_0x042b;
                    L_0x0421:
                        r7 = r8.itemView;
                        r7 = r7.getTranslationX();
                        r3 = java.lang.Math.min(r7, r3);
                    L_0x042b:
                        r7 = r8.itemView;
                        r7 = r7 instanceof org.telegram.ui.Cells.ChatMessageCell;
                        if (r7 == 0) goto L_0x0449;
                    L_0x0431:
                        r7 = r8.itemView;
                        r7 = (org.telegram.ui.Cells.ChatMessageCell) r7;
                        r9 = r7.isPinnedTop();
                        if (r9 != 0) goto L_0x043c;
                    L_0x043b:
                        goto L_0x0449;
                        r7 = r28;
                        r9 = r30;
                        r2 = r33;
                        goto L_0x0387;
                    L_0x0445:
                        r28 = r7;
                        r30 = r9;
                    L_0x0449:
                        r2 = 1111490560; // 0x42400000 float:48.0 double:5.491493014E-315;
                        r7 = org.telegram.messenger.AndroidUtilities.dp(r2);
                        r7 = r4 - r7;
                        if (r7 >= r13) goto L_0x0459;
                        r2 = org.telegram.messenger.AndroidUtilities.dp(r2);
                        r4 = r13 + r2;
                        r2 = 0;
                        r7 = (r3 > r2 ? 1 : (r3 == r2 ? 0 : -1));
                        if (r7 == 0) goto L_0x0464;
                        r32.save();
                        r1.translate(r3, r2);
                        r7 = 1110441984; // 0x42300000 float:44.0 double:5.48631236E-315;
                        r7 = org.telegram.messenger.AndroidUtilities.dp(r7);
                        r7 = r4 - r7;
                        r6.setImageY(r7);
                        r6.draw(r1);
                        r2 = (r3 > r2 ? 1 : (r3 == r2 ? 0 : -1));
                        if (r2 == 0) goto L_0x0482;
                        r32.restore();
                        goto L_0x0482;
                    L_0x047a:
                        r19 = r3;
                        r20 = r4;
                        r21 = r7;
                        r25 = r8;
                        return r5;
                        */
                        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.16.drawChild(android.graphics.Canvas, android.view.View, long):boolean");
                    }

                    protected void onLayout(boolean changed, int l, int t, int r, int b) {
                        super.onLayout(changed, l, t, r, b);
                        ChatActivity.this.forceScrollToTop = false;
                        if (ChatActivity.this.chatAdapter.isBot) {
                            int childCount = getChildCount();
                            for (int a = 0; a < childCount; a++) {
                                View child = getChildAt(a);
                                if (child instanceof BotHelpCell) {
                                    int top = ((b - t) / 2) - (child.getMeasuredHeight() / 2);
                                    if (child.getTop() > top) {
                                        child.layout(0, top, r - l, child.getMeasuredHeight() + top);
                                        return;
                                    }
                                    return;
                                }
                            }
                        }
                    }

                    private void setGroupTranslationX(ChatMessageCell view, float dx) {
                        GroupedMessages group = view.getCurrentMessagesGroup();
                        if (group != null) {
                            int count = getChildCount();
                            for (int a = 0; a < count; a++) {
                                View child = getChildAt(a);
                                if (child != this) {
                                    if (child instanceof ChatMessageCell) {
                                        ChatMessageCell cell = (ChatMessageCell) child;
                                        if (cell.getCurrentMessagesGroup() == group) {
                                            cell.setTranslationX(dx);
                                            cell.invalidate();
                                        }
                                    }
                                }
                            }
                            invalidate();
                        }
                    }

                    public boolean onInterceptTouchEvent(MotionEvent e) {
                        boolean result = super.onInterceptTouchEvent(e);
                        if (ChatActivity.this.actionBar.isActionModeShowed()) {
                            return result;
                        }
                        processTouchEvent(e);
                        return result;
                    }

                    private void drawReplyButton(Canvas canvas) {
                        Canvas canvas2 = canvas;
                        if (this.slidingView != null) {
                            float scale;
                            float scale2;
                            int alpha;
                            float translationX = r0.slidingView.getTranslationX();
                            long newTime = System.currentTimeMillis();
                            long dt = Math.min(17, newTime - r0.lastReplyButtonAnimationTime);
                            r0.lastReplyButtonAnimationTime = newTime;
                            boolean z = translationX <= ((float) (-AndroidUtilities.dp(50.0f)));
                            boolean showing = z;
                            if (z) {
                                if (r0.replyButtonProgress < 1.0f) {
                                    r0.replyButtonProgress += ((float) dt) / 180.0f;
                                    if (r0.replyButtonProgress > 1.0f) {
                                        r0.replyButtonProgress = 1.0f;
                                    } else {
                                        invalidate();
                                    }
                                }
                            } else if (r0.replyButtonProgress > 0.0f) {
                                r0.replyButtonProgress -= ((float) dt) / 180.0f;
                                if (r0.replyButtonProgress < 0.0f) {
                                    r0.replyButtonProgress = 0.0f;
                                } else {
                                    invalidate();
                                }
                            }
                            if (showing) {
                                if (r0.replyButtonProgress <= 0.8f) {
                                    scale = 1.2f * (r0.replyButtonProgress / 0.8f);
                                } else {
                                    scale = 1.2f - (0.2f * ((r0.replyButtonProgress - 0.8f) / 0.2f));
                                }
                                scale2 = scale;
                                alpha = (int) Math.min(255.0f, (r0.replyButtonProgress / 0.8f) * 255.0f);
                            } else {
                                scale2 = r0.replyButtonProgress;
                                alpha = (int) Math.min(255.0f, r0.replyButtonProgress * 255.0f);
                            }
                            Theme.chat_shareDrawable.setAlpha(alpha);
                            Theme.chat_replyIconDrawable.setAlpha(alpha);
                            float x = ((float) getMeasuredWidth()) + (r0.slidingView.getTranslationX() / 2.0f);
                            scale = (float) (r0.slidingView.getTop() + (r0.slidingView.getMeasuredHeight() / 2));
                            Theme.chat_shareDrawable.setColorFilter(Theme.colorFilter);
                            Theme.chat_shareDrawable.setBounds((int) (x - (((float) AndroidUtilities.dp(16.0f)) * scale2)), (int) (scale - (((float) AndroidUtilities.dp(16.0f)) * scale2)), (int) ((((float) AndroidUtilities.dp(16.0f)) * scale2) + x), (int) ((((float) AndroidUtilities.dp(16.0f)) * scale2) + scale));
                            Theme.chat_shareDrawable.draw(canvas2);
                            Theme.chat_replyIconDrawable.setBounds((int) (x - (((float) AndroidUtilities.dp(10.0f)) * scale2)), (int) (scale - (((float) AndroidUtilities.dp(8.0f)) * scale2)), (int) ((((float) AndroidUtilities.dp(10.0f)) * scale2) + x), (int) ((((float) AndroidUtilities.dp(6.0f)) * scale2) + scale));
                            Theme.chat_replyIconDrawable.draw(canvas2);
                            Theme.chat_shareDrawable.setAlpha(255);
                            Theme.chat_replyIconDrawable.setAlpha(255);
                        }
                    }

                    private void processTouchEvent(MotionEvent e) {
                        RecyclerListView recyclerListView = this;
                        MotionEvent motionEvent = e;
                        if (e.getAction() == 0 && !recyclerListView.startedTracking && !recyclerListView.maybeStartTracking) {
                            View view = getPressedChildView();
                            if (view instanceof ChatMessageCell) {
                                recyclerListView.slidingView = (ChatMessageCell) view;
                                MessageObject message = recyclerListView.slidingView.getMessageObject();
                                if ((ChatActivity.this.currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) >= 46) && (!(ChatActivity.this.getMessageType(message) == 1 && (message.getDialogId() == ChatActivity.this.mergeDialogId || message.needDrawBluredPreview())) && ((ChatActivity.this.currentEncryptedChat != null || message.getId() >= 0) && ((ChatActivity.this.bottomOverlayChat == null || ChatActivity.this.bottomOverlayChat.getVisibility() != 0) && !ChatActivity.this.isBroadcast)))) {
                                    if (ChatActivity.this.currentChat != null) {
                                        if (!ChatObject.isNotInChat(ChatActivity.this.currentChat) && (!ChatObject.isChannel(ChatActivity.this.currentChat) || ChatObject.canPost(ChatActivity.this.currentChat) || ChatActivity.this.currentChat.megagroup)) {
                                            if (!ChatObject.canSendMessages(ChatActivity.this.currentChat)) {
                                            }
                                        }
                                    }
                                    recyclerListView.startedTrackingPointerId = motionEvent.getPointerId(0);
                                    recyclerListView.maybeStartTracking = true;
                                    recyclerListView.startedTrackingX = (int) e.getX();
                                    recyclerListView.startedTrackingY = (int) e.getY();
                                }
                                recyclerListView.slidingView = null;
                            }
                        } else if (recyclerListView.slidingView != null && e.getAction() == 2 && motionEvent.getPointerId(0) == recyclerListView.startedTrackingPointerId) {
                            int dx = Math.max(AndroidUtilities.dp(-80.0f), Math.min(0, (int) (e.getX() - ((float) recyclerListView.startedTrackingX))));
                            int dy = Math.abs(((int) e.getY()) - recyclerListView.startedTrackingY);
                            if (getScrollState() == 0 && recyclerListView.maybeStartTracking && !recyclerListView.startedTracking && ((float) dx) <= (-AndroidUtilities.getPixelsInCM(0.4f, true)) && Math.abs(dx) / 3 > dy) {
                                MotionEvent event = MotionEvent.obtain(0, 0, 3, 0.0f, 0.0f, 0);
                                recyclerListView.slidingView.onTouchEvent(event);
                                super.onInterceptTouchEvent(event);
                                event.recycle();
                                ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                                recyclerListView.maybeStartTracking = false;
                                recyclerListView.startedTracking = true;
                                recyclerListView.startedTrackingX = (int) e.getX();
                                if (getParent() != null) {
                                    getParent().requestDisallowInterceptTouchEvent(true);
                                }
                            } else if (recyclerListView.startedTracking) {
                                if (Math.abs(dx) < AndroidUtilities.dp(50.0f)) {
                                    recyclerListView.wasTrackingVibrate = false;
                                } else if (!recyclerListView.wasTrackingVibrate) {
                                    try {
                                        performHapticFeedback(3, 2);
                                    } catch (Exception e2) {
                                    }
                                    recyclerListView.wasTrackingVibrate = true;
                                }
                                recyclerListView.slidingView.setTranslationX((float) dx);
                                if (recyclerListView.slidingView.getMessageObject().isRoundVideo()) {
                                    ChatActivity.this.updateTextureViewPosition();
                                }
                                setGroupTranslationX(recyclerListView.slidingView, (float) dx);
                                invalidate();
                            }
                        } else if (recyclerListView.slidingView != null && motionEvent.getPointerId(0) == recyclerListView.startedTrackingPointerId && (e.getAction() == 3 || e.getAction() == 1 || e.getAction() == 6)) {
                            if (Math.abs(recyclerListView.slidingView.getTranslationX()) >= ((float) AndroidUtilities.dp(50.0f))) {
                                ChatActivity.this.showReplyPanel(true, recyclerListView.slidingView.getMessageObject(), null, null, false);
                            }
                            recyclerListView.endedTrackingX = recyclerListView.slidingView.getTranslationX();
                            recyclerListView.lastTrackingAnimationTime = System.currentTimeMillis();
                            recyclerListView.trackAnimationProgress = 0.0f;
                            invalidate();
                            recyclerListView.maybeStartTracking = false;
                            recyclerListView.startedTracking = false;
                            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                        }
                    }

                    public boolean onTouchEvent(MotionEvent e) {
                        boolean result = super.onTouchEvent(e);
                        if (ChatActivity.this.actionBar.isActionModeShowed()) {
                            return result;
                        }
                        boolean z;
                        processTouchEvent(e);
                        if (!this.startedTracking) {
                            if (!result) {
                                z = false;
                                return z;
                            }
                        }
                        z = true;
                        return z;
                    }

                    public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
                        super.requestDisallowInterceptTouchEvent(disallowIntercept);
                        if (this.slidingView != null) {
                            this.endedTrackingX = this.slidingView.getTranslationX();
                            this.lastTrackingAnimationTime = System.currentTimeMillis();
                            this.trackAnimationProgress = 0.0f;
                            invalidate();
                            this.maybeStartTracking = false;
                            this.startedTracking = false;
                            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                        }
                    }

                    protected void onChildPressed(View child, boolean pressed) {
                        super.onChildPressed(child, pressed);
                        if (child instanceof ChatMessageCell) {
                            GroupedMessages groupedMessages = ((ChatMessageCell) child).getCurrentMessagesGroup();
                            if (groupedMessages != null) {
                                int count = getChildCount();
                                for (int a = 0; a < count; a++) {
                                    View item = getChildAt(a);
                                    if (item != child) {
                                        if (item instanceof ChatMessageCell) {
                                            ChatMessageCell cell = (ChatMessageCell) item;
                                            if (((ChatMessageCell) item).getCurrentMessagesGroup() == groupedMessages) {
                                                cell.setPressed(pressed);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    public void requestLayout() {
                        if (!ChatActivity.this.chatListViewIgnoreLayout) {
                            if (!ChatActivity.this.globalIgnoreLayout) {
                                super.requestLayout();
                            }
                        }
                    }

                    public void onDraw(Canvas c) {
                        super.onDraw(c);
                        if (this.slidingView != null) {
                            float translationX = this.slidingView.getTranslationX();
                            if (!(this.maybeStartTracking || this.startedTracking || this.endedTrackingX == 0.0f || translationX == 0.0f)) {
                                long newTime = System.currentTimeMillis();
                                this.trackAnimationProgress += ((float) (newTime - this.lastTrackingAnimationTime)) / 180.0f;
                                if (this.trackAnimationProgress > 1.0f) {
                                    this.trackAnimationProgress = 1.0f;
                                }
                                this.lastTrackingAnimationTime = newTime;
                                translationX = this.endedTrackingX * (1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(this.trackAnimationProgress));
                                if (translationX == 0.0f) {
                                    this.endedTrackingX = 0.0f;
                                }
                                setGroupTranslationX(this.slidingView, translationX);
                                this.slidingView.setTranslationX(translationX);
                                if (this.slidingView.getMessageObject().isRoundVideo()) {
                                    ChatActivity.this.updateTextureViewPosition();
                                }
                                invalidate();
                            }
                            drawReplyButton(c);
                        }
                    }

                    protected void dispatchDraw(Canvas canvas) {
                        ChatActivity.this.drawLaterRoundProgressCell = null;
                        super.dispatchDraw(canvas);
                    }
                };
                r7.chatListView.setTag(Integer.valueOf(1));
                r7.chatListView.setVerticalScrollBarEnabled(true);
                recyclerListView = r7.chatListView;
                chatActivityAdapter = new ChatActivityAdapter(context2);
                r7.chatAdapter = chatActivityAdapter;
                recyclerListView.setAdapter(chatActivityAdapter);
                r7.chatListView.setClipToPadding(false);
                r7.chatListView.setPadding(0, AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(3.0f));
                r7.chatListView.setItemAnimator(null);
                r7.chatListView.setLayoutAnimation(null);
                gridLayoutManagerFixed = anonymousClass17;
                oldMessage3 = oldMessage2;
                anonymousClass17 = new GridLayoutManagerFixed(context2, id_chat_compose_panel, 1, 1) {
                    public boolean supportsPredictiveItemAnimations() {
                        return false;
                    }

                    public void smoothScrollToPosition(RecyclerView recyclerView, State state, int position) {
                        LinearSmoothScrollerMiddle linearSmoothScroller = new LinearSmoothScrollerMiddle(recyclerView.getContext());
                        linearSmoothScroller.setTargetPosition(position);
                        startSmoothScroll(linearSmoothScroller);
                    }

                    public boolean shouldLayoutChildFromOpositeSide(View child) {
                        if (child instanceof ChatMessageCell) {
                            return ((ChatMessageCell) child).getMessageObject().isOutOwner() ^ 1;
                        }
                        return false;
                    }

                    protected boolean hasSiblingChild(int position) {
                        if (position >= ChatActivity.this.chatAdapter.messagesStartRow && position < ChatActivity.this.chatAdapter.messagesEndRow) {
                            int index = position - ChatActivity.this.chatAdapter.messagesStartRow;
                            if (index >= 0 && index < ChatActivity.this.messages.size()) {
                                MessageObject message = (MessageObject) ChatActivity.this.messages.get(index);
                                GroupedMessages group = ChatActivity.this.getValidGroupedMessage(message);
                                if (group != null) {
                                    GroupedMessagePosition pos = (GroupedMessagePosition) group.positions.get(message);
                                    if (pos.minX != pos.maxX && pos.minY == pos.maxY) {
                                        if (pos.minY != (byte) 0) {
                                            int count = group.posArray.size();
                                            for (int a = 0; a < count; a++) {
                                                GroupedMessagePosition p = (GroupedMessagePosition) group.posArray.get(a);
                                                if (p != pos) {
                                                    if (p.minY <= pos.minY && p.maxY >= pos.minY) {
                                                        return true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return false;
                                }
                            }
                        }
                        return false;
                    }
                };
                r7.chatLayoutManager = gridLayoutManagerFixed;
                r7.chatLayoutManager.setSpanSizeLookup(new SpanSizeLookup() {
                    public int getSpanSize(int position) {
                        if (position >= ChatActivity.this.chatAdapter.messagesStartRow && position < ChatActivity.this.chatAdapter.messagesEndRow) {
                            int idx = position - ChatActivity.this.chatAdapter.messagesStartRow;
                            if (idx >= 0 && idx < ChatActivity.this.messages.size()) {
                                MessageObject message = (MessageObject) ChatActivity.this.messages.get(idx);
                                GroupedMessages groupedMessages = ChatActivity.this.getValidGroupedMessage(message);
                                if (groupedMessages != null) {
                                    return ((GroupedMessagePosition) groupedMessages.positions.get(message)).spanSize;
                                }
                            }
                        }
                        return ChatActivity.id_chat_compose_panel;
                    }
                });
                r7.chatListView.setLayoutManager(r7.chatLayoutManager);
                r7.chatListView.addItemDecoration(new ItemDecoration() {
                    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State state) {
                        int a = 0;
                        outRect.bottom = 0;
                        if (view instanceof ChatMessageCell) {
                            ChatMessageCell cell = (ChatMessageCell) view;
                            GroupedMessages group = cell.getCurrentMessagesGroup();
                            if (group != null) {
                                GroupedMessagePosition position = cell.getCurrentPosition();
                                if (position != null && position.siblingHeights != null) {
                                    float maxHeight = ((float) Math.max(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y)) * 0.5f;
                                    int h = cell.getCaptionHeight();
                                    for (float f : position.siblingHeights) {
                                        h += (int) Math.ceil((double) (f * maxHeight));
                                    }
                                    h += (position.maxY - position.minY) * AndroidUtilities.dp2(11.0f);
                                    int a2 = group.posArray.size();
                                    while (a < a2) {
                                        GroupedMessagePosition pos = (GroupedMessagePosition) group.posArray.get(a);
                                        if (pos.minY == position.minY) {
                                            if (pos.minX != position.minX || pos.maxX != position.maxX || pos.minY != position.minY || pos.maxY != position.maxY) {
                                                if (pos.minY == position.minY) {
                                                    h -= ((int) Math.ceil((double) (pos.ph * maxHeight))) - AndroidUtilities.dp(4.0f);
                                                    break;
                                                }
                                            }
                                        }
                                        a++;
                                    }
                                    outRect.bottom = -h;
                                }
                            }
                        }
                    }
                });
                r7.contentView.addView(r7.chatListView, LayoutHelper.createFrame(-1, -1.0f));
                r7.chatListView.setOnItemLongClickListener(r7.onItemLongClickListener);
                r7.chatListView.setOnItemClickListener(r7.onItemClickListener);
                r7.chatListView.setOnScrollListener(new OnScrollListener() {
                    private final int scrollValue = AndroidUtilities.dp(100.0f);
                    private float totalDy = 0.0f;

                    public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                        if (newState == 2) {
                            ChatActivity.this.wasManualScroll = true;
                        } else if (newState == 1) {
                            ChatActivity.this.wasManualScroll = true;
                            ChatActivity.this.scrollingFloatingDate = true;
                            ChatActivity.this.checkTextureViewPosition = true;
                        } else if (newState == 0) {
                            ChatActivity.this.scrollingFloatingDate = false;
                            ChatActivity.this.checkTextureViewPosition = false;
                            ChatActivity.this.hideFloatingDateView(true);
                        }
                    }

                    public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                        ChatActivity.this.chatListView.invalidate();
                        if (!(ChatActivity.this.wasManualScroll || dy == 0)) {
                            ChatActivity.this.wasManualScroll = true;
                        }
                        if (!(dy == 0 || !ChatActivity.this.scrollingFloatingDate || ChatActivity.this.currentFloatingTopIsNotMessage)) {
                            if (ChatActivity.this.highlightMessageId != ConnectionsManager.DEFAULT_DATACENTER_ID) {
                                ChatActivity.this.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                ChatActivity.this.updateVisibleRows();
                            }
                            if (ChatActivity.this.floatingDateView.getTag() == null) {
                                if (ChatActivity.this.floatingDateAnimation != null) {
                                    ChatActivity.this.floatingDateAnimation.cancel();
                                }
                                ChatActivity.this.floatingDateView.setTag(Integer.valueOf(1));
                                ChatActivity.this.floatingDateAnimation = new AnimatorSet();
                                ChatActivity.this.floatingDateAnimation.setDuration(150);
                                AnimatorSet access$12600 = ChatActivity.this.floatingDateAnimation;
                                Animator[] animatorArr = new Animator[1];
                                animatorArr[0] = ObjectAnimator.ofFloat(ChatActivity.this.floatingDateView, "alpha", new float[]{1.0f});
                                access$12600.playTogether(animatorArr);
                                ChatActivity.this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() {
                                    public void onAnimationEnd(Animator animation) {
                                        if (animation.equals(ChatActivity.this.floatingDateAnimation)) {
                                            ChatActivity.this.floatingDateAnimation = null;
                                        }
                                    }
                                });
                                ChatActivity.this.floatingDateAnimation.start();
                            }
                        }
                        ChatActivity.this.checkScrollForLoad(true);
                        int firstVisibleItem = ChatActivity.this.chatLayoutManager.findFirstVisibleItemPosition();
                        if (firstVisibleItem != -1) {
                            int totalItemCount = ChatActivity.this.chatAdapter.getItemCount();
                            if (firstVisibleItem == 0 && ChatActivity.this.forwardEndReached[0]) {
                                ChatActivity.this.showPagedownButton(false, true);
                            } else if (dy > 0) {
                                if (ChatActivity.this.pagedownButton.getTag() == null) {
                                    this.totalDy += (float) dy;
                                    if (this.totalDy > ((float) this.scrollValue)) {
                                        this.totalDy = 0.0f;
                                        ChatActivity.this.showPagedownButton(true, true);
                                        ChatActivity.this.pagedownButtonShowedByScroll = true;
                                    }
                                }
                            } else if (ChatActivity.this.pagedownButtonShowedByScroll && ChatActivity.this.pagedownButton.getTag() != null) {
                                this.totalDy += (float) dy;
                                if (this.totalDy < ((float) (-this.scrollValue))) {
                                    ChatActivity.this.showPagedownButton(false, true);
                                    this.totalDy = 0.0f;
                                }
                            }
                        }
                        ChatActivity.this.updateMessagesVisisblePart();
                    }
                });
                r7.progressView = new FrameLayout(context2);
                r7.progressView.setVisibility(4);
                r7.contentView.addView(r7.progressView, LayoutHelper.createFrame(-1, -1, 51));
                r7.progressView2 = new View(context2);
                r7.progressView2.setBackgroundResource(R.drawable.system_loader);
                r7.progressView2.getBackground().setColorFilter(Theme.colorFilter);
                r7.progressView.addView(r7.progressView2, LayoutHelper.createFrame(36, 36, 17));
                r7.progressBar = new RadialProgressView(context2);
                r7.progressBar.setSize(AndroidUtilities.dp(28.0f));
                r7.progressBar.setProgressColor(Theme.getColor(Theme.key_chat_serviceText));
                r7.progressView.addView(r7.progressBar, LayoutHelper.createFrame(32, 32, 17));
                r7.floatingDateView = new ChatActionCell(context2);
                r7.floatingDateView.setAlpha(0.0f);
                r7.contentView.addView(r7.floatingDateView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 4.0f, 0.0f, 0.0f));
                r7.floatingDateView.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        if (ChatActivity.this.floatingDateView.getAlpha() != 0.0f) {
                            Calendar calendar = Calendar.getInstance();
                            calendar.setTimeInMillis(((long) ChatActivity.this.floatingDateView.getCustomDate()) * 1000);
                            int year = calendar.get(1);
                            int monthOfYear = calendar.get(2);
                            int dayOfMonth = calendar.get(5);
                            calendar.clear();
                            calendar.set(year, monthOfYear, dayOfMonth);
                            ChatActivity.this.jumpToDate((int) (calendar.getTime().getTime() / 1000));
                        }
                    }
                });
                if (ChatObject.isChannel(r7.currentChat)) {
                    r7.pinnedMessageView = new FrameLayout(context2);
                    r7.pinnedMessageView.setTag(Integer.valueOf(1));
                    r7.pinnedMessageView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
                    r7.pinnedMessageView.setVisibility(8);
                    r7.pinnedMessageView.setBackgroundResource(R.drawable.blockpanel);
                    r7.pinnedMessageView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), Mode.MULTIPLY));
                    r7.contentView.addView(r7.pinnedMessageView, LayoutHelper.createFrame(-1, 50, 51));
                    r7.pinnedMessageView.setOnClickListener(new OnClickListener() {
                        public void onClick(View v) {
                            ChatActivity.this.wasManualScroll = true;
                            ChatActivity.this.scrollToMessageId(ChatActivity.this.info.pinned_msg_id, 0, true, 0, false);
                        }
                    });
                    r7.pinnedLineView = new View(context2);
                    r7.pinnedLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_topPanelLine));
                    r7.pinnedMessageView.addView(r7.pinnedLineView, LayoutHelper.createFrame(2, 32.0f, 51, 8.0f, 8.0f, 0.0f, 0.0f));
                    r7.pinnedMessageImageView = new BackupImageView(context2);
                    r7.pinnedMessageView.addView(r7.pinnedMessageImageView, LayoutHelper.createFrame(32, 32.0f, 51, 17.0f, 8.0f, 0.0f, 0.0f));
                    r7.pinnedMessageNameTextView = new SimpleTextView(context2);
                    r7.pinnedMessageNameTextView.setTextSize(14);
                    r7.pinnedMessageNameTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelTitle));
                    r7.pinnedMessageNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    r7.pinnedMessageView.addView(r7.pinnedMessageNameTextView, LayoutHelper.createFrame(-1, (float) AndroidUtilities.dp(18.0f), 51, 18.0f, 7.3f, 52.0f, 0.0f));
                    r7.pinnedMessageTextView = new SimpleTextView(context2);
                    r7.pinnedMessageTextView.setTextSize(14);
                    r7.pinnedMessageTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelMessage));
                    r7.pinnedMessageView.addView(r7.pinnedMessageTextView, LayoutHelper.createFrame(-1, (float) AndroidUtilities.dp(18.0f), 51, 18.0f, 25.3f, 52.0f, 0.0f));
                    r7.closePinned = new ImageView(context2);
                    r7.closePinned.setImageResource(R.drawable.miniplayer_close);
                    r7.closePinned.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelClose), Mode.MULTIPLY));
                    r7.closePinned.setScaleType(ScaleType.CENTER);
                    r7.pinnedMessageView.addView(r7.closePinned, LayoutHelper.createFrame(48, 48, 53));
                    r7.closePinned.setOnClickListener(new OnClickListener() {
                        public void onClick(View v) {
                            if (ChatActivity.this.getParentActivity() != null) {
                                if (!ChatActivity.this.currentChat.creator) {
                                    if (ChatActivity.this.currentChat.admin_rights != null) {
                                        if (!(ChatActivity.this.currentChat.megagroup && ChatActivity.this.currentChat.admin_rights.pin_messages)) {
                                            if (!ChatActivity.this.currentChat.megagroup && ChatActivity.this.currentChat.admin_rights.edit_messages) {
                                            }
                                        }
                                    }
                                    Editor edit = MessagesController.getNotificationsSettings(ChatActivity.this.currentAccount).edit();
                                    StringBuilder stringBuilder = new StringBuilder();
                                    stringBuilder.append("pin_");
                                    stringBuilder.append(ChatActivity.this.dialog_id);
                                    edit.putInt(stringBuilder.toString(), ChatActivity.this.info.pinned_msg_id).commit();
                                    ChatActivity.this.updatePinnedMessageView(true);
                                }
                                AlertDialog.Builder builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity());
                                builder.setMessage(LocaleController.getString("UnpinMessageAlert", R.string.UnpinMessageAlert));
                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialogInterface, int i) {
                                        MessagesController.getInstance(ChatActivity.this.currentAccount).pinChannelMessage(ChatActivity.this.currentChat, 0, false);
                                    }
                                });
                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                                ChatActivity.this.showDialog(builder.create());
                            }
                        }
                    });
                }
                r7.reportSpamView = new LinearLayout(context2);
                r7.reportSpamView.setTag(Integer.valueOf(1));
                r7.reportSpamView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
                r7.reportSpamView.setVisibility(8);
                r7.reportSpamView.setBackgroundResource(R.drawable.blockpanel);
                r7.reportSpamView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), Mode.MULTIPLY));
                r7.contentView.addView(r7.reportSpamView, LayoutHelper.createFrame(-1, 50, 51));
                r7.addToContactsButton = new TextView(context2);
                r7.addToContactsButton.setTextColor(Theme.getColor(Theme.key_chat_addContact));
                r7.addToContactsButton.setVisibility(8);
                r7.addToContactsButton.setTextSize(1, 14.0f);
                r7.addToContactsButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.addToContactsButton.setSingleLine(true);
                r7.addToContactsButton.setMaxLines(1);
                r7.addToContactsButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
                r7.addToContactsButton.setGravity(17);
                r7.addToContactsButton.setText(LocaleController.getString("AddContactChat", R.string.AddContactChat));
                r7.reportSpamView.addView(r7.addToContactsButton, LayoutHelper.createLinear(-1, -1, 0.5f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
                r7.addToContactsButton.setOnClickListener(new OnClickListener() {
                    public void onClick(View v) {
                        Bundle args = new Bundle();
                        args.putInt("user_id", ChatActivity.this.currentUser.id);
                        args.putBoolean("addContact", true);
                        ChatActivity.this.presentFragment(new ContactAddActivity(args));
                    }
                });
                r7.reportSpamContainer = new FrameLayout(context2);
                r7.reportSpamView.addView(r7.reportSpamContainer, LayoutHelper.createLinear(-1, -1, 1.0f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
                r7.reportSpamButton = new TextView(context2);
                r7.reportSpamButton.setTextColor(Theme.getColor(Theme.key_chat_reportSpam));
                r7.reportSpamButton.setTextSize(1, 14.0f);
                r7.reportSpamButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.reportSpamButton.setSingleLine(true);
                r7.reportSpamButton.setMaxLines(1);
                if (r7.currentChat == null) {
                    r7.reportSpamButton.setText(LocaleController.getString("ReportSpamAndLeave", R.string.ReportSpamAndLeave));
                } else {
                    r7.reportSpamButton.setText(LocaleController.getString("ReportSpam", R.string.ReportSpam));
                }
                r7.reportSpamButton.setGravity(17);
                r7.reportSpamButton.setPadding(AndroidUtilities.dp(50.0f), 0, AndroidUtilities.dp(50.0f), 0);
                r7.reportSpamContainer.addView(r7.reportSpamButton, LayoutHelper.createFrame(-1, -1, 51));
                r7.reportSpamButton.setOnClickListener(new OnClickListener() {
                    public void onClick(View v) {
                        if (ChatActivity.this.getParentActivity() != null) {
                            AlertDialog.Builder builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity());
                            if (ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup) {
                                builder.setMessage(LocaleController.getString("ReportSpamAlertChannel", R.string.ReportSpamAlertChannel));
                            } else if (ChatActivity.this.currentChat != null) {
                                builder.setMessage(LocaleController.getString("ReportSpamAlertGroup", R.string.ReportSpamAlertGroup));
                            } else {
                                builder.setMessage(LocaleController.getString("ReportSpamAlert", R.string.ReportSpamAlert));
                            }
                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialogInterface, int i) {
                                    if (ChatActivity.this.currentUser != null) {
                                        MessagesController.getInstance(ChatActivity.this.currentAccount).blockUser(ChatActivity.this.currentUser.id);
                                    }
                                    MessagesController.getInstance(ChatActivity.this.currentAccount).reportSpam(ChatActivity.this.dialog_id, ChatActivity.this.currentUser, ChatActivity.this.currentChat, ChatActivity.this.currentEncryptedChat);
                                    ChatActivity.this.updateSpamView();
                                    if (ChatActivity.this.currentChat == null) {
                                        MessagesController.getInstance(ChatActivity.this.currentAccount).deleteDialog(ChatActivity.this.dialog_id, 0);
                                    } else if (ChatObject.isNotInChat(ChatActivity.this.currentChat)) {
                                        MessagesController.getInstance(ChatActivity.this.currentAccount).deleteDialog(ChatActivity.this.dialog_id, 0);
                                    } else {
                                        MessagesController.getInstance(ChatActivity.this.currentAccount).deleteUserFromChat((int) (-ChatActivity.this.dialog_id), MessagesController.getInstance(ChatActivity.this.currentAccount).getUser(Integer.valueOf(UserConfig.getInstance(ChatActivity.this.currentAccount).getClientUserId())), null);
                                    }
                                    ChatActivity.this.finishFragment();
                                }
                            });
                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                            ChatActivity.this.showDialog(builder.create());
                        }
                    }
                });
                r7.closeReportSpam = new ImageView(context2);
                r7.closeReportSpam.setImageResource(R.drawable.miniplayer_close);
                r7.closeReportSpam.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelClose), Mode.MULTIPLY));
                r7.closeReportSpam.setScaleType(ScaleType.CENTER);
                r7.reportSpamContainer.addView(r7.closeReportSpam, LayoutHelper.createFrame(48, 48, 53));
                r7.closeReportSpam.setOnClickListener(new OnClickListener() {
                    public void onClick(View v) {
                        MessagesController.getInstance(ChatActivity.this.currentAccount).hideReportSpam(ChatActivity.this.dialog_id, ChatActivity.this.currentUser, ChatActivity.this.currentChat);
                        ChatActivity.this.updateSpamView();
                    }
                });
                r7.alertView = new FrameLayout(context2);
                r7.alertView.setTag(Integer.valueOf(1));
                r7.alertView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
                r7.alertView.setVisibility(8);
                r7.alertView.setBackgroundResource(R.drawable.blockpanel);
                r7.alertView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), Mode.MULTIPLY));
                r7.contentView.addView(r7.alertView, LayoutHelper.createFrame(-1, 50, 51));
                r7.alertNameTextView = new TextView(context2);
                r7.alertNameTextView.setTextSize(1, 14.0f);
                r7.alertNameTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelTitle));
                r7.alertNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.alertNameTextView.setSingleLine(true);
                r7.alertNameTextView.setEllipsize(TruncateAt.END);
                r7.alertNameTextView.setMaxLines(1);
                r7.alertView.addView(r7.alertNameTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 5.0f, 8.0f, 0.0f));
                r7.alertTextView = new TextView(context2);
                r7.alertTextView.setTextSize(1, 14.0f);
                r7.alertTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelMessage));
                r7.alertTextView.setSingleLine(true);
                r7.alertTextView.setEllipsize(TruncateAt.END);
                r7.alertTextView.setMaxLines(1);
                r7.alertView.addView(r7.alertTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 23.0f, 8.0f, 0.0f));
                r7.pagedownButton = new FrameLayout(context2);
                r7.pagedownButton.setVisibility(4);
                r7.contentView.addView(r7.pagedownButton, LayoutHelper.createFrame(66, 59.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
                r7.pagedownButton.setOnClickListener(new OnClickListener() {
                    public void onClick(View view) {
                        ChatActivity.this.wasManualScroll = true;
                        ChatActivity.this.checkTextureViewPosition = true;
                        if (ChatActivity.this.createUnreadMessageAfterId != 0) {
                            ChatActivity.this.scrollToMessageId(ChatActivity.this.createUnreadMessageAfterId, 0, false, ChatActivity.this.returnToLoadIndex, false);
                        } else if (ChatActivity.this.returnToMessageId > 0) {
                            ChatActivity.this.scrollToMessageId(ChatActivity.this.returnToMessageId, 0, true, ChatActivity.this.returnToLoadIndex, false);
                        } else {
                            ChatActivity.this.scrollToLastMessage(true);
                        }
                    }
                });
                r7.mentiondownButton = new FrameLayout(context2);
                r7.mentiondownButton.setVisibility(4);
                r7.contentView.addView(r7.mentiondownButton, LayoutHelper.createFrame(46, 59.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
                r7.mentiondownButton.setOnClickListener(new OnClickListener() {
                    private void loadLastUnreadMention() {
                        ChatActivity.this.wasManualScroll = true;
                        if (ChatActivity.this.hasAllMentionsLocal) {
                            MessagesStorage.getInstance(ChatActivity.this.currentAccount).getUnreadMention(ChatActivity.this.dialog_id, new IntCallback() {
                                public void run(int param) {
                                    if (param == 0) {
                                        ChatActivity.this.hasAllMentionsLocal = false;
                                        AnonymousClass28.this.loadLastUnreadMention();
                                        return;
                                    }
                                    ChatActivity.this.scrollToMessageId(param, 0, false, 0, false);
                                }
                            });
                            return;
                        }
                        final MessagesStorage messagesStorage = MessagesStorage.getInstance(ChatActivity.this.currentAccount);
                        TL_messages_getUnreadMentions req = new TL_messages_getUnreadMentions();
                        req.peer = MessagesController.getInstance(ChatActivity.this.currentAccount).getInputPeer((int) ChatActivity.this.dialog_id);
                        req.limit = 1;
                        req.add_offset = ChatActivity.this.newMentionsCount - 1;
                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).sendRequest(req, new RequestDelegate() {
                            public void run(final TLObject response, final TL_error error) {
                                AndroidUtilities.runOnUIThread(new Runnable() {
                                    public void run() {
                                        messages_Messages res = response;
                                        if (error == null) {
                                            if (!res.messages.isEmpty()) {
                                                long mid;
                                                int id = ((Message) res.messages.get(0)).id;
                                                long mid2 = (long) id;
                                                if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                                    mid = mid2 | (((long) ChatActivity.this.currentChat.id) << 32);
                                                } else {
                                                    mid = mid2;
                                                }
                                                MessageObject object = (MessageObject) ChatActivity.this.messagesDict[0].get(id);
                                                messagesStorage.markMessageAsMention(mid);
                                                if (object != null) {
                                                    object.messageOwner.media_unread = true;
                                                    object.messageOwner.mentioned = true;
                                                }
                                                ChatActivity.this.scrollToMessageId(id, 0, false, 0, false);
                                                return;
                                            }
                                        }
                                        if (res != null) {
                                            ChatActivity.this.newMentionsCount = res.count;
                                        } else {
                                            ChatActivity.this.newMentionsCount = 0;
                                        }
                                        messagesStorage.resetMentionsCount(ChatActivity.this.dialog_id, ChatActivity.this.newMentionsCount);
                                        if (ChatActivity.this.newMentionsCount == 0) {
                                            ChatActivity.this.hasAllMentionsLocal = true;
                                            ChatActivity.this.showMentiondownButton(false, true);
                                            return;
                                        }
                                        ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(ChatActivity.this.newMentionsCount)}));
                                        AnonymousClass28.this.loadLastUnreadMention();
                                    }
                                });
                            }
                        });
                    }

                    public void onClick(View view) {
                        loadLastUnreadMention();
                    }
                });
                r7.mentiondownButton.setOnLongClickListener(new OnLongClickListener() {
                    public boolean onLongClick(View view) {
                        for (int a = 0; a < ChatActivity.this.messages.size(); a++) {
                            MessageObject messageObject = (MessageObject) ChatActivity.this.messages.get(a);
                            if (messageObject.messageOwner.mentioned && !messageObject.isContentUnread()) {
                                messageObject.setContentIsRead();
                            }
                        }
                        ChatActivity.this.newMentionsCount = 0;
                        MessagesStorage.getInstance(ChatActivity.this.currentAccount).resetMentionsCount(ChatActivity.this.dialog_id, ChatActivity.this.newMentionsCount);
                        ChatActivity.this.hasAllMentionsLocal = true;
                        ChatActivity.this.showMentiondownButton(false, true);
                        TL_messages_readMentions req = new TL_messages_readMentions();
                        req.peer = MessagesController.getInstance(ChatActivity.this.currentAccount).getInputPeer((int) ChatActivity.this.dialog_id);
                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).sendRequest(req, new RequestDelegate() {
                            public void run(TLObject response, TL_error error) {
                            }
                        });
                        return true;
                    }
                });
                if (r7.isBroadcast) {
                    r7.mentionContainer = new FrameLayout(context2) {
                        public void onDraw(Canvas canvas) {
                            if (ChatActivity.this.mentionListView.getChildCount() > 0) {
                                int top;
                                if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                    top = ChatActivity.this.mentionListViewScrollOffsetY + AndroidUtilities.dp(2.0f);
                                    Theme.chat_composeShadowDrawable.setBounds(0, Theme.chat_composeShadowDrawable.getIntrinsicHeight() + top, getMeasuredWidth(), top);
                                    Theme.chat_composeShadowDrawable.draw(canvas);
                                    canvas.drawRect(0.0f, 0.0f, (float) getMeasuredWidth(), (float) top, Theme.chat_composeBackgroundPaint);
                                } else {
                                    if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout() && ChatActivity.this.mentionsAdapter.getBotContextSwitch() == null) {
                                        top = ChatActivity.this.mentionListViewScrollOffsetY - AndroidUtilities.dp(4.0f);
                                    } else {
                                        top = ChatActivity.this.mentionListViewScrollOffsetY - AndroidUtilities.dp(2.0f);
                                    }
                                    int bottom = Theme.chat_composeShadowDrawable.getIntrinsicHeight() + top;
                                    Theme.chat_composeShadowDrawable.setBounds(0, top, getMeasuredWidth(), bottom);
                                    Theme.chat_composeShadowDrawable.draw(canvas);
                                    canvas.drawRect(0.0f, (float) bottom, (float) getMeasuredWidth(), (float) getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                                }
                            }
                        }

                        public void requestLayout() {
                            if (!ChatActivity.this.mentionListViewIgnoreLayout) {
                                super.requestLayout();
                            }
                        }
                    };
                    r7.mentionContainer.setVisibility(8);
                    r7.mentionContainer.setWillNotDraw(false);
                    r7.contentView.addView(r7.mentionContainer, LayoutHelper.createFrame(-1, 110, 83));
                    r7.mentionListView = new RecyclerListView(context2) {
                        private int lastHeight;
                        private int lastWidth;

                        public boolean onInterceptTouchEvent(MotionEvent event) {
                            boolean z = false;
                            if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                if (!(ChatActivity.this.mentionListViewIsScrolling || ChatActivity.this.mentionListViewScrollOffsetY == 0 || event.getY() <= ((float) ChatActivity.this.mentionListViewScrollOffsetY))) {
                                    return false;
                                }
                            } else if (!(ChatActivity.this.mentionListViewIsScrolling || ChatActivity.this.mentionListViewScrollOffsetY == 0 || event.getY() >= ((float) ChatActivity.this.mentionListViewScrollOffsetY))) {
                                return false;
                            }
                            boolean result = StickerPreviewViewer.getInstance().onInterceptTouchEvent(event, ChatActivity.this.mentionListView, 0, null);
                            if (!super.onInterceptTouchEvent(event)) {
                                if (!result) {
                                    return z;
                                }
                            }
                            z = true;
                            return z;
                        }

                        public boolean onTouchEvent(MotionEvent event) {
                            if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                if (!(ChatActivity.this.mentionListViewIsScrolling || ChatActivity.this.mentionListViewScrollOffsetY == 0 || event.getY() <= ((float) ChatActivity.this.mentionListViewScrollOffsetY))) {
                                    return false;
                                }
                            } else if (!(ChatActivity.this.mentionListViewIsScrolling || ChatActivity.this.mentionListViewScrollOffsetY == 0 || event.getY() >= ((float) ChatActivity.this.mentionListViewScrollOffsetY))) {
                                return false;
                            }
                            return super.onTouchEvent(event);
                        }

                        public void requestLayout() {
                            if (!ChatActivity.this.mentionListViewIgnoreLayout) {
                                super.requestLayout();
                            }
                        }

                        protected void onLayout(boolean changed, int l, int t, int r, int b) {
                            int width = r - l;
                            int height = b - t;
                            int newPosition = -1;
                            int newTop = 0;
                            if (!(ChatActivity.this.mentionLayoutManager.getReverseLayout() || ChatActivity.this.mentionListView == null || ChatActivity.this.mentionListViewLastViewPosition < 0 || width != r6.lastWidth || height - r6.lastHeight == 0)) {
                                newPosition = ChatActivity.this.mentionListViewLastViewPosition;
                                newTop = ((ChatActivity.this.mentionListViewLastViewTop + height) - r6.lastHeight) - getPaddingTop();
                            }
                            int newPosition2 = newPosition;
                            int newTop2 = newTop;
                            super.onLayout(changed, l, t, r, b);
                            if (newPosition2 != -1) {
                                ChatActivity.this.mentionListViewIgnoreLayout = true;
                                if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                    ChatActivity.this.mentionGridLayoutManager.scrollToPositionWithOffset(newPosition2, newTop2);
                                } else {
                                    ChatActivity.this.mentionLayoutManager.scrollToPositionWithOffset(newPosition2, newTop2);
                                }
                                super.onLayout(false, l, t, r, b);
                                ChatActivity.this.mentionListViewIgnoreLayout = false;
                            }
                            r6.lastHeight = height;
                            r6.lastWidth = width;
                            ChatActivity.this.mentionListViewUpdateLayout();
                        }
                    };
                    r7.mentionListView.setOnTouchListener(new OnTouchListener() {
                        public boolean onTouch(View v, MotionEvent event) {
                            return StickerPreviewViewer.getInstance().onTouch(event, ChatActivity.this.mentionListView, 0, ChatActivity.this.mentionsOnItemClickListener, null);
                        }
                    });
                    r7.mentionListView.setTag(Integer.valueOf(2));
                    r7.mentionLayoutManager = new LinearLayoutManager(context2) {
                        public boolean supportsPredictiveItemAnimations() {
                            return false;
                        }
                    };
                    r7.mentionLayoutManager.setOrientation(1);
                    r7.mentionGridLayoutManager = new ExtendedGridLayoutManager(context2, 100) {
                        private Size size = new Size();

                        protected Size getSizeForItem(int i) {
                            if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                i++;
                            }
                            BotInlineResult object = ChatActivity.this.mentionsAdapter.getItem(i);
                            if (object instanceof BotInlineResult) {
                                BotInlineResult inlineResult = object;
                                int b = 0;
                                int b2;
                                DocumentAttribute attribute;
                                if (inlineResult.document != null) {
                                    float f = 100.0f;
                                    this.size.width = inlineResult.document.thumb != null ? (float) inlineResult.document.thumb.w : 100.0f;
                                    Size size = this.size;
                                    if (inlineResult.document.thumb != null) {
                                        f = (float) inlineResult.document.thumb.h;
                                    }
                                    size.height = f;
                                    while (true) {
                                        b2 = b;
                                        if (b2 >= inlineResult.document.attributes.size()) {
                                            break;
                                        }
                                        attribute = (DocumentAttribute) inlineResult.document.attributes.get(b2);
                                        if (attribute instanceof TL_documentAttributeImageSize) {
                                            break;
                                        } else if (attribute instanceof TL_documentAttributeVideo) {
                                            break;
                                        } else {
                                            b = b2 + 1;
                                        }
                                    }
                                    this.size.width = (float) attribute.w;
                                    this.size.height = (float) attribute.h;
                                } else if (inlineResult.content != null) {
                                    while (true) {
                                        b2 = b;
                                        if (b2 >= inlineResult.content.attributes.size()) {
                                            break;
                                        }
                                        attribute = (DocumentAttribute) inlineResult.content.attributes.get(b2);
                                        if (attribute instanceof TL_documentAttributeImageSize) {
                                            break;
                                        } else if (attribute instanceof TL_documentAttributeVideo) {
                                            break;
                                        } else {
                                            b = b2 + 1;
                                        }
                                    }
                                    this.size.width = (float) attribute.w;
                                    this.size.height = (float) attribute.h;
                                } else if (inlineResult.thumb != null) {
                                    while (true) {
                                        b2 = b;
                                        if (b2 >= inlineResult.content.attributes.size()) {
                                            break;
                                        }
                                        attribute = (DocumentAttribute) inlineResult.content.attributes.get(b2);
                                        if (attribute instanceof TL_documentAttributeImageSize) {
                                            break;
                                        } else if (attribute instanceof TL_documentAttributeVideo) {
                                            break;
                                        } else {
                                            b = b2 + 1;
                                        }
                                    }
                                    this.size.width = (float) attribute.w;
                                    this.size.height = (float) attribute.h;
                                }
                            }
                            return this.size;
                        }

                        protected int getFlowItemCount() {
                            if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                return getItemCount() - 1;
                            }
                            return super.getFlowItemCount();
                        }
                    };
                    r7.mentionGridLayoutManager.setSpanSizeLookup(new SpanSizeLookup() {
                        public int getSpanSize(int position) {
                            if (ChatActivity.this.mentionsAdapter.getItem(position) instanceof TL_inlineBotSwitchPM) {
                                return 100;
                            }
                            if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                position--;
                            }
                            return ChatActivity.this.mentionGridLayoutManager.getSpanSizeForItem(position);
                        }
                    });
                    r7.mentionListView.addItemDecoration(new ItemDecoration() {
                        public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State state) {
                            int i = 0;
                            outRect.left = 0;
                            outRect.right = 0;
                            outRect.top = 0;
                            outRect.bottom = 0;
                            if (parent.getLayoutManager() == ChatActivity.this.mentionGridLayoutManager) {
                                int position = parent.getChildAdapterPosition(view);
                                if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() == null) {
                                    outRect.top = AndroidUtilities.dp(2.0f);
                                } else if (position != 0) {
                                    position--;
                                    if (!ChatActivity.this.mentionGridLayoutManager.isFirstRow(position)) {
                                        outRect.top = AndroidUtilities.dp(2.0f);
                                    }
                                } else {
                                    return;
                                }
                                if (!ChatActivity.this.mentionGridLayoutManager.isLastInRow(position)) {
                                    i = AndroidUtilities.dp(2.0f);
                                }
                                outRect.right = i;
                            }
                        }
                    });
                    r7.mentionListView.setItemAnimator(null);
                    r7.mentionListView.setLayoutAnimation(null);
                    r7.mentionListView.setClipToPadding(false);
                    r7.mentionListView.setLayoutManager(r7.mentionLayoutManager);
                    r7.mentionListView.setOverScrollMode(2);
                    r7.mentionContainer.addView(r7.mentionListView, LayoutHelper.createFrame(-1, -1.0f));
                    Adapter adapter = r1;
                    i2 = 46;
                    RecyclerListView recyclerListView2 = r7.mentionListView;
                    Adapter mentionsAdapter2 = new MentionsAdapter(context2, false, r7.dialog_id, new MentionsAdapterDelegate() {
                        public void needChangePanelVisibility(boolean show) {
                            if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                ChatActivity.this.mentionListView.setLayoutManager(ChatActivity.this.mentionGridLayoutManager);
                            } else {
                                ChatActivity.this.mentionListView.setLayoutManager(ChatActivity.this.mentionLayoutManager);
                            }
                            if (show && ChatActivity.this.bottomOverlay.getVisibility() == 0) {
                                show = false;
                            }
                            if (show) {
                                if (ChatActivity.this.mentionListAnimation != null) {
                                    ChatActivity.this.mentionListAnimation.cancel();
                                    ChatActivity.this.mentionListAnimation = null;
                                }
                                if (ChatActivity.this.mentionContainer.getVisibility() == 0) {
                                    ChatActivity.this.mentionContainer.setAlpha(1.0f);
                                    return;
                                }
                                if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                    ChatActivity.this.mentionGridLayoutManager.scrollToPositionWithOffset(0, 10000);
                                } else {
                                    ChatActivity.this.mentionLayoutManager.scrollToPositionWithOffset(0, 10000);
                                }
                                if (ChatActivity.this.allowStickersPanel && (!ChatActivity.this.mentionsAdapter.isBotContext() || ChatActivity.this.allowContextBotPanel || ChatActivity.this.allowContextBotPanelSecond)) {
                                    if (ChatActivity.this.currentEncryptedChat != null && ChatActivity.this.mentionsAdapter.isBotContext()) {
                                        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
                                        if (!preferences.getBoolean("secretbot", false)) {
                                            AlertDialog.Builder builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity());
                                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                            builder.setMessage(LocaleController.getString("SecretChatContextBotAlert", R.string.SecretChatContextBotAlert));
                                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                            ChatActivity.this.showDialog(builder.create());
                                            preferences.edit().putBoolean("secretbot", true).commit();
                                        }
                                    }
                                    ChatActivity.this.mentionContainer.setVisibility(0);
                                    ChatActivity.this.mentionContainer.setTag(null);
                                    ChatActivity.this.mentionListAnimation = new AnimatorSet();
                                    ChatActivity.this.mentionListAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(ChatActivity.this.mentionContainer, "alpha", new float[]{0.0f, 1.0f})});
                                    ChatActivity.this.mentionListAnimation.addListener(new AnimatorListenerAdapter() {
                                        public void onAnimationEnd(Animator animation) {
                                            if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                                                ChatActivity.this.mentionListAnimation = null;
                                            }
                                        }

                                        public void onAnimationCancel(Animator animation) {
                                            if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                                                ChatActivity.this.mentionListAnimation = null;
                                            }
                                        }
                                    });
                                    ChatActivity.this.mentionListAnimation.setDuration(200);
                                    ChatActivity.this.mentionListAnimation.start();
                                } else {
                                    ChatActivity.this.mentionContainer.setAlpha(1.0f);
                                    ChatActivity.this.mentionContainer.setVisibility(4);
                                }
                            } else {
                                if (ChatActivity.this.mentionListAnimation != null) {
                                    ChatActivity.this.mentionListAnimation.cancel();
                                    ChatActivity.this.mentionListAnimation = null;
                                }
                                if (ChatActivity.this.mentionContainer.getVisibility() != 8) {
                                    if (ChatActivity.this.allowStickersPanel) {
                                        ChatActivity.this.mentionListAnimation = new AnimatorSet();
                                        AnimatorSet access$16500 = ChatActivity.this.mentionListAnimation;
                                        Animator[] animatorArr = new Animator[1];
                                        animatorArr[0] = ObjectAnimator.ofFloat(ChatActivity.this.mentionContainer, "alpha", new float[]{0.0f});
                                        access$16500.playTogether(animatorArr);
                                        ChatActivity.this.mentionListAnimation.addListener(new AnimatorListenerAdapter() {
                                            public void onAnimationEnd(Animator animation) {
                                                if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                                                    ChatActivity.this.mentionContainer.setVisibility(8);
                                                    ChatActivity.this.mentionContainer.setTag(null);
                                                    ChatActivity.this.mentionListAnimation = null;
                                                }
                                            }

                                            public void onAnimationCancel(Animator animation) {
                                                if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                                                    ChatActivity.this.mentionListAnimation = null;
                                                }
                                            }
                                        });
                                        ChatActivity.this.mentionListAnimation.setDuration(200);
                                        ChatActivity.this.mentionListAnimation.start();
                                    } else {
                                        ChatActivity.this.mentionContainer.setTag(null);
                                        ChatActivity.this.mentionContainer.setVisibility(8);
                                    }
                                }
                            }
                        }

                        public void onContextSearch(boolean searching) {
                            if (ChatActivity.this.chatActivityEnterView != null) {
                                ChatActivity.this.chatActivityEnterView.setCaption(ChatActivity.this.mentionsAdapter.getBotCaption());
                                ChatActivity.this.chatActivityEnterView.showContextProgress(searching);
                            }
                        }

                        public void onContextClick(BotInlineResult result) {
                            if (ChatActivity.this.getParentActivity() != null) {
                                if (result.content != null) {
                                    if (!result.type.equals(MimeTypes.BASE_TYPE_VIDEO)) {
                                        if (!result.type.equals("web_player_video")) {
                                            Browser.openUrl(ChatActivity.this.getParentActivity(), result.content.url);
                                        }
                                    }
                                    int[] size = MessageObject.getInlineResultWidthAndHeight(result);
                                    EmbedBottomSheet.show(ChatActivity.this.getParentActivity(), result.title != null ? result.title : TtmlNode.ANONYMOUS_REGION_ID, result.description, result.content.url, result.content.url, size[0], size[1]);
                                }
                            }
                        }
                    });
                    r7.mentionsAdapter = adapter;
                    recyclerListView2.setAdapter(adapter);
                    if (!ChatObject.isChannel(r7.currentChat) || (r7.currentChat != null && r7.currentChat.megagroup)) {
                        r7.mentionsAdapter.setBotInfo(r7.botInfo);
                    }
                    r7.mentionsAdapter.setParentFragment(r7);
                    r7.mentionsAdapter.setChatInfo(r7.info);
                    r7.mentionsAdapter.setNeedUsernames(r7.currentChat == null);
                    mentionsAdapter = r7.mentionsAdapter;
                    if (r7.currentEncryptedChat != null) {
                        if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) >= i2) {
                            z = false;
                            mentionsAdapter.setNeedBotContext(z);
                            r7.mentionsAdapter.setBotsCount(r7.currentChat == null ? r7.botsCount : 1);
                            recyclerListView = r7.mentionListView;
                            anonymousClass38 = new OnItemClickListener() {
                                public void onItemClick(View view, int position) {
                                    int i = position;
                                    if (!ChatActivity.this.mentionsAdapter.isBannedInline()) {
                                        TLObject object = ChatActivity.this.mentionsAdapter.getItem(i);
                                        int start = ChatActivity.this.mentionsAdapter.getResultStartPosition();
                                        int len = ChatActivity.this.mentionsAdapter.getResultLength();
                                        String name;
                                        if (object instanceof User) {
                                            String from;
                                            StringBuilder stringBuilder;
                                            Spannable spannable;
                                            if (ChatActivity.this.searchingForUser && ChatActivity.this.searchContainer.getVisibility() == 0) {
                                                ChatActivity.this.searchingUserMessages = (User) object;
                                                if (ChatActivity.this.searchingUserMessages != null) {
                                                    name = ChatActivity.this.searchingUserMessages.first_name;
                                                    if (TextUtils.isEmpty(name)) {
                                                        name = ChatActivity.this.searchingUserMessages.last_name;
                                                    }
                                                    ChatActivity.this.searchingForUser = false;
                                                    from = LocaleController.getString("SearchFrom", R.string.SearchFrom);
                                                    stringBuilder = new StringBuilder();
                                                    stringBuilder.append(from);
                                                    stringBuilder.append(" ");
                                                    stringBuilder.append(name);
                                                    spannable = new SpannableString(stringBuilder.toString());
                                                    spannable.setSpan(new ForegroundColorSpan(Theme.getColor(Theme.key_actionBarDefaultSubtitle)), from.length() + 1, spannable.length(), 33);
                                                    ChatActivity.this.searchItem.setSearchFieldCaption(spannable);
                                                    ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(null, 0, null, false);
                                                    ChatActivity.this.searchItem.getSearchField().setHint(null);
                                                    ChatActivity.this.searchItem.clearSearchText();
                                                    DataQuery.getInstance(ChatActivity.this.currentAccount).searchMessagesInChat(TtmlNode.ANONYMOUS_REGION_ID, ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ChatActivity.this.classGuid, 0, ChatActivity.this.searchingUserMessages);
                                                } else {
                                                    return;
                                                }
                                            }
                                            User user = (User) object;
                                            if (user != null) {
                                                if (user.username != null) {
                                                    ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                                    StringBuilder stringBuilder2 = new StringBuilder();
                                                    stringBuilder2.append("@");
                                                    stringBuilder2.append(user.username);
                                                    stringBuilder2.append(" ");
                                                    chatActivityEnterView.replaceWithText(start, len, stringBuilder2.toString(), false);
                                                } else {
                                                    from = UserObject.getFirstName(user);
                                                    stringBuilder = new StringBuilder();
                                                    stringBuilder.append(from);
                                                    stringBuilder.append(" ");
                                                    spannable = new SpannableString(stringBuilder.toString());
                                                    StringBuilder stringBuilder3 = new StringBuilder();
                                                    stringBuilder3.append(TtmlNode.ANONYMOUS_REGION_ID);
                                                    stringBuilder3.append(user.id);
                                                    spannable.setSpan(new URLSpanUserMention(stringBuilder3.toString(), 1), 0, spannable.length(), 33);
                                                    ChatActivity.this.chatActivityEnterView.replaceWithText(start, len, spannable, false);
                                                }
                                            }
                                        } else if (object instanceof String) {
                                            if (ChatActivity.this.mentionsAdapter.isBotCommands()) {
                                                SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage((String) object, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, null, false, null, null, null);
                                                ChatActivity.this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
                                                ChatActivity.this.showReplyPanel(false, null, null, null, false);
                                            } else {
                                                ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                                                StringBuilder stringBuilder4 = new StringBuilder();
                                                stringBuilder4.append(object);
                                                stringBuilder4.append(" ");
                                                chatActivityEnterView2.replaceWithText(start, len, stringBuilder4.toString(), false);
                                            }
                                        } else if (object instanceof BotInlineResult) {
                                            if (ChatActivity.this.chatActivityEnterView.getFieldText() != null) {
                                                BotInlineResult result = (BotInlineResult) object;
                                                if ((!result.type.equals("photo") || (result.photo == null && result.content == null)) && ((!result.type.equals("gif") || (result.document == null && result.content == null)) && (!result.type.equals(MimeTypes.BASE_TYPE_VIDEO) || result.document == null))) {
                                                    ChatActivity.this.sendBotInlineResult(result);
                                                } else {
                                                    ArrayList<Object> arrayList = ChatActivity.this.botContextResults = new ArrayList(ChatActivity.this.mentionsAdapter.getSearchResultBotContext());
                                                    PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                                                    PhotoViewer.getInstance().openPhotoForSelect(arrayList, ChatActivity.this.mentionsAdapter.getItemPosition(i), 3, ChatActivity.this.botContextProvider, null);
                                                }
                                            }
                                        } else if (object instanceof TL_inlineBotSwitchPM) {
                                            ChatActivity.this.processInlineBotContextPM((TL_inlineBotSwitchPM) object);
                                        } else if (object instanceof EmojiSuggestion) {
                                            name = ((EmojiSuggestion) object).emoji;
                                            ChatActivity.this.chatActivityEnterView.addEmojiToRecent(name);
                                            ChatActivity.this.chatActivityEnterView.replaceWithText(start, len, name, true);
                                        }
                                    }
                                }
                            };
                            r7.mentionsOnItemClickListener = anonymousClass38;
                            recyclerListView.setOnItemClickListener(anonymousClass38);
                            r7.mentionListView.setOnItemLongClickListener(new OnItemLongClickListener() {
                                public boolean onItemClick(View view, int position) {
                                    boolean z = false;
                                    if (ChatActivity.this.getParentActivity() != null) {
                                        if (ChatActivity.this.mentionsAdapter.isLongClickEnabled()) {
                                            Object object = ChatActivity.this.mentionsAdapter.getItem(position);
                                            if (!(object instanceof String)) {
                                                return false;
                                            }
                                            if (!ChatActivity.this.mentionsAdapter.isBotCommands()) {
                                                AlertDialog.Builder builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity());
                                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                                builder.setMessage(LocaleController.getString("ClearSearch", R.string.ClearSearch));
                                                builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), new DialogInterface.OnClickListener() {
                                                    public void onClick(DialogInterface dialogInterface, int i) {
                                                        ChatActivity.this.mentionsAdapter.clearRecentHashtags();
                                                    }
                                                });
                                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                                                ChatActivity.this.showDialog(builder.create());
                                                return true;
                                            } else if (!URLSpanBotCommand.enabled) {
                                                return false;
                                            } else {
                                                ChatActivity.this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
                                                ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                                String str = (String) object;
                                                if (ChatActivity.this.currentChat != null && ChatActivity.this.currentChat.megagroup) {
                                                    z = true;
                                                }
                                                chatActivityEnterView.setCommand(null, str, true, z);
                                                return true;
                                            }
                                        }
                                    }
                                    return false;
                                }
                            });
                            r7.mentionListView.setOnScrollListener(new OnScrollListener() {
                                public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                                    ChatActivity chatActivity = ChatActivity.this;
                                    boolean z = true;
                                    if (newState != 1) {
                                        z = false;
                                    }
                                    chatActivity.mentionListViewIsScrolling = z;
                                }

                                public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                                    int lastVisibleItem;
                                    if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                        lastVisibleItem = ChatActivity.this.mentionGridLayoutManager.findLastVisibleItemPosition();
                                    } else {
                                        lastVisibleItem = ChatActivity.this.mentionLayoutManager.findLastVisibleItemPosition();
                                    }
                                    if ((lastVisibleItem == -1 ? 0 : lastVisibleItem) > 0 && lastVisibleItem > ChatActivity.this.mentionsAdapter.getItemCount() - 5) {
                                        ChatActivity.this.mentionsAdapter.searchForContextBotForNextOffset();
                                    }
                                    ChatActivity.this.mentionListViewUpdateLayout();
                                }
                            });
                        }
                    }
                    z = true;
                    mentionsAdapter.setNeedBotContext(z);
                    if (r7.currentChat == null) {
                    }
                    r7.mentionsAdapter.setBotsCount(r7.currentChat == null ? r7.botsCount : 1);
                    recyclerListView = r7.mentionListView;
                    anonymousClass38 = /* anonymous class already generated */;
                    r7.mentionsOnItemClickListener = anonymousClass38;
                    recyclerListView.setOnItemClickListener(anonymousClass38);
                    r7.mentionListView.setOnItemLongClickListener(/* anonymous class already generated */);
                    r7.mentionListView.setOnScrollListener(/* anonymous class already generated */);
                } else {
                    i2 = 46;
                }
                r7.pagedownButtonImage = new ImageView(context2);
                r7.pagedownButtonImage.setImageResource(R.drawable.pagedown);
                r7.pagedownButtonImage.setScaleType(ScaleType.CENTER);
                r7.pagedownButtonImage.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonIcon), Mode.MULTIPLY));
                r7.pagedownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                drawable = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), Theme.getColor(Theme.key_chat_goDownButton));
                shadowDrawable = context.getResources().getDrawable(R.drawable.pagedown_shadow).mutate();
                shadowDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonShadow), Mode.MULTIPLY));
                combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
                combinedDrawable.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                r7.pagedownButtonImage.setBackgroundDrawable(combinedDrawable);
                r7.pagedownButton.addView(r7.pagedownButtonImage, LayoutHelper.createFrame(i2, i2, 81));
                r7.pagedownButtonCounter = new TextView(context2);
                r7.pagedownButtonCounter.setVisibility(4);
                r7.pagedownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.pagedownButtonCounter.setTextSize(1, 13.0f);
                r7.pagedownButtonCounter.setTextColor(Theme.getColor(Theme.key_chat_goDownButtonCounter));
                r7.pagedownButtonCounter.setGravity(17);
                r7.pagedownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), Theme.getColor(Theme.key_chat_goDownButtonCounterBackground)));
                r7.pagedownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
                r7.pagedownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f));
                r7.pagedownButton.addView(r7.pagedownButtonCounter, LayoutHelper.createFrame(-2, edit, 49));
                r7.mentiondownButtonImage = new ImageView(context2);
                r7.mentiondownButtonImage.setImageResource(R.drawable.mentionbutton);
                r7.mentiondownButtonImage.setScaleType(ScaleType.CENTER);
                r7.mentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonIcon), Mode.MULTIPLY));
                r7.mentiondownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                drawable = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), Theme.getColor(Theme.key_chat_goDownButton));
                shadowDrawable = context.getResources().getDrawable(R.drawable.pagedown_shadow).mutate();
                shadowDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonShadow), Mode.MULTIPLY));
                combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
                combinedDrawable.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                r7.mentiondownButtonImage.setBackgroundDrawable(combinedDrawable);
                r7.mentiondownButton.addView(r7.mentiondownButtonImage, LayoutHelper.createFrame(i2, i2, 83));
                r7.mentiondownButtonCounter = new TextView(context2);
                r7.mentiondownButtonCounter.setVisibility(4);
                r7.mentiondownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.mentiondownButtonCounter.setTextSize(1, 13.0f);
                r7.mentiondownButtonCounter.setTextColor(Theme.getColor(Theme.key_chat_goDownButtonCounter));
                r7.mentiondownButtonCounter.setGravity(17);
                r7.mentiondownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), Theme.getColor(Theme.key_chat_goDownButtonCounterBackground)));
                r7.mentiondownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
                r7.mentiondownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f));
                r7.mentiondownButton.addView(r7.mentiondownButtonCounter, LayoutHelper.createFrame(-2, edit, 49));
                if (!AndroidUtilities.isTablet() || AndroidUtilities.isSmallTablet()) {
                    sizeNotifierFrameLayout = r7.contentView;
                    fragmentContextView = new FragmentContextView(context2, r7, true);
                    r7.fragmentLocationContextView = fragmentContextView;
                    sizeNotifierFrameLayout.addView(fragmentContextView, LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                    sizeNotifierFrameLayout = r7.contentView;
                    fragmentContextView = new FragmentContextView(context2, r7, false);
                    r7.fragmentContextView = fragmentContextView;
                    sizeNotifierFrameLayout.addView(fragmentContextView, LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                    r7.fragmentContextView.setAdditionalContextView(r7.fragmentLocationContextView);
                    r7.fragmentLocationContextView.setAdditionalContextView(r7.fragmentContextView);
                }
                r7.contentView.addView(r7.actionBar);
                r7.overlayView = new View(context2);
                r7.overlayView.setOnTouchListener(new OnTouchListener() {
                    public boolean onTouch(View v, MotionEvent event) {
                        if (event.getAction() == 0) {
                            ChatActivity.this.checkRecordLocked();
                        }
                        ChatActivity.this.overlayView.getParent().requestDisallowInterceptTouchEvent(true);
                        return true;
                    }
                });
                r7.contentView.addView(r7.overlayView, LayoutHelper.createFrame(-1, -1, 51));
                r7.overlayView.setVisibility(8);
                r7.instantCameraView = new InstantCameraView(context2, r7);
                r7.contentView.addView(r7.instantCameraView, LayoutHelper.createFrame(-1, -1, 51));
                r7.chatActivityEnterView = new ChatActivityEnterView(getParentActivity(), r7.contentView, r7, true);
                r7.chatActivityEnterView.setDialogId(r7.dialog_id, r7.currentAccount);
                r7.chatActivityEnterView.setId(id_chat_compose_panel);
                r7.chatActivityEnterView.setBotsCount(r7.botsCount, r7.hasBotsCommands);
                chatActivityEnterView = r7.chatActivityEnterView;
                if (r7.currentEncryptedChat != null) {
                    if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) >= edit) {
                        z2 = false;
                        if (r7.currentEncryptedChat != null) {
                            if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) < i2) {
                                z3 = false;
                                chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                                r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                                r7.chatActivityEnterView.setDelegate(new ChatActivityEnterViewDelegate() {
                                    public void onMessageSend(CharSequence message) {
                                        ChatActivity.this.moveScrollToLastMessage();
                                        ChatActivity.this.showReplyPanel(false, null, null, null, false);
                                        if (ChatActivity.this.mentionsAdapter != null) {
                                            ChatActivity.this.mentionsAdapter.addHashtagsFromMessage(message);
                                        }
                                    }

                                    public void onSwitchRecordMode(boolean video) {
                                        ChatActivity.this.showVoiceHint(false, video);
                                    }

                                    public void onPreAudioVideoRecord() {
                                        ChatActivity.this.showVoiceHint(true, false);
                                    }

                                    public void onTextChanged(final CharSequence text, boolean bigChange) {
                                        boolean z;
                                        if (ChatActivity.this.startReplyOnTextChange && text.length() > 0) {
                                            ChatActivity.this.actionBar.getActionBarMenuOnItemClick().onItemClick(19);
                                            ChatActivity.this.startReplyOnTextChange = false;
                                        }
                                        MediaController instance = MediaController.getInstance();
                                        if (TextUtils.isEmpty(text)) {
                                            if (!ChatActivity.this.chatActivityEnterView.isEditingMessage()) {
                                                z = false;
                                                instance.setInputFieldHasText(z);
                                                if (!(ChatActivity.this.stickersAdapter == null || ChatActivity.this.chatActivityEnterView.isEditingMessage() || !ChatObject.canSendStickers(ChatActivity.this.currentChat))) {
                                                    ChatActivity.this.stickersAdapter.loadStikersForEmoji(text);
                                                }
                                                if (ChatActivity.this.mentionsAdapter != null) {
                                                    ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(text.toString(), ChatActivity.this.chatActivityEnterView.getCursorPosition(), ChatActivity.this.messages, false);
                                                }
                                                if (ChatActivity.this.waitingForCharaterEnterRunnable != null) {
                                                    AndroidUtilities.cancelRunOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable);
                                                    ChatActivity.this.waitingForCharaterEnterRunnable = null;
                                                }
                                                if (ChatObject.canSendEmbed(ChatActivity.this.currentChat) && ChatActivity.this.chatActivityEnterView.isMessageWebPageSearchEnabled()) {
                                                    if (!ChatActivity.this.chatActivityEnterView.isEditingMessage() || !ChatActivity.this.chatActivityEnterView.isEditingCaption()) {
                                                        if (bigChange) {
                                                            ChatActivity.this.searchLinks(text, true);
                                                            return;
                                                        }
                                                        ChatActivity.this.waitingForCharaterEnterRunnable = new Runnable() {
                                                            public void run() {
                                                                if (this == ChatActivity.this.waitingForCharaterEnterRunnable) {
                                                                    ChatActivity.this.searchLinks(text, false);
                                                                    ChatActivity.this.waitingForCharaterEnterRunnable = null;
                                                                }
                                                            }
                                                        };
                                                        AndroidUtilities.runOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable, AndroidUtilities.WEB_URL == null ? 3000 : 1000);
                                                        return;
                                                    }
                                                    return;
                                                }
                                            }
                                        }
                                        z = true;
                                        instance.setInputFieldHasText(z);
                                        ChatActivity.this.stickersAdapter.loadStikersForEmoji(text);
                                        if (ChatActivity.this.mentionsAdapter != null) {
                                            ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(text.toString(), ChatActivity.this.chatActivityEnterView.getCursorPosition(), ChatActivity.this.messages, false);
                                        }
                                        if (ChatActivity.this.waitingForCharaterEnterRunnable != null) {
                                            AndroidUtilities.cancelRunOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable);
                                            ChatActivity.this.waitingForCharaterEnterRunnable = null;
                                        }
                                        if (ChatObject.canSendEmbed(ChatActivity.this.currentChat)) {
                                        }
                                    }

                                    public void needSendTyping() {
                                        MessagesController.getInstance(ChatActivity.this.currentAccount).sendTyping(ChatActivity.this.dialog_id, 0, ChatActivity.this.classGuid);
                                    }

                                    public void onAttachButtonHidden() {
                                        if (!ChatActivity.this.actionBar.isSearchFieldVisible()) {
                                            if (ChatActivity.this.attachItem != null) {
                                                ChatActivity.this.attachItem.setVisibility(0);
                                            }
                                            if (ChatActivity.this.headerItem != null) {
                                                ChatActivity.this.headerItem.setVisibility(8);
                                            }
                                        }
                                    }

                                    public void onAttachButtonShow() {
                                        if (!ChatActivity.this.actionBar.isSearchFieldVisible()) {
                                            if (ChatActivity.this.attachItem != null) {
                                                ChatActivity.this.attachItem.setVisibility(8);
                                            }
                                            if (ChatActivity.this.headerItem != null) {
                                                ChatActivity.this.headerItem.setVisibility(0);
                                            }
                                        }
                                    }

                                    public void onMessageEditEnd(boolean loading) {
                                        if (!loading) {
                                            boolean z;
                                            ChatActivityEnterView chatActivityEnterView;
                                            boolean z2;
                                            MentionsAdapter access$4900 = ChatActivity.this.mentionsAdapter;
                                            if (ChatActivity.this.currentEncryptedChat != null) {
                                                if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) < 46) {
                                                    z = false;
                                                    access$4900.setNeedBotContext(z);
                                                    ChatActivity.this.chatListView.setOnItemLongClickListener(ChatActivity.this.onItemLongClickListener);
                                                    ChatActivity.this.chatListView.setOnItemClickListener(ChatActivity.this.onItemClickListener);
                                                    ChatActivity.this.chatListView.setClickable(true);
                                                    ChatActivity.this.chatListView.setLongClickable(true);
                                                    ChatActivity.this.actionModeTitleContainer.setVisibility(8);
                                                    ChatActivity.this.selectedMessagesCountTextView.setVisibility(0);
                                                    chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                                    if (ChatActivity.this.currentEncryptedChat != null) {
                                                        if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) >= ChatActivity.edit) {
                                                            z = false;
                                                            if (ChatActivity.this.currentEncryptedChat != null) {
                                                                if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) < 46) {
                                                                    z2 = false;
                                                                    chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                                    if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                                        ChatActivity.this.editingMessageObjectReqId = 0;
                                                                    }
                                                                    ChatActivity.this.actionBar.hideActionMode();
                                                                    ChatActivity.this.updatePinnedMessageView(true);
                                                                    ChatActivity.this.updateBottomOverlay();
                                                                    ChatActivity.this.updateVisibleRows();
                                                                }
                                                            }
                                                            z2 = true;
                                                            chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                            if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                                ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                                ChatActivity.this.editingMessageObjectReqId = 0;
                                                            }
                                                            ChatActivity.this.actionBar.hideActionMode();
                                                            ChatActivity.this.updatePinnedMessageView(true);
                                                            ChatActivity.this.updateBottomOverlay();
                                                            ChatActivity.this.updateVisibleRows();
                                                        }
                                                    }
                                                    z = true;
                                                    if (ChatActivity.this.currentEncryptedChat != null) {
                                                        if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) < 46) {
                                                            z2 = false;
                                                            chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                            if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                                ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                                ChatActivity.this.editingMessageObjectReqId = 0;
                                                            }
                                                            ChatActivity.this.actionBar.hideActionMode();
                                                            ChatActivity.this.updatePinnedMessageView(true);
                                                            ChatActivity.this.updateBottomOverlay();
                                                            ChatActivity.this.updateVisibleRows();
                                                        }
                                                    }
                                                    z2 = true;
                                                    chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                    if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                        ChatActivity.this.editingMessageObjectReqId = 0;
                                                    }
                                                    ChatActivity.this.actionBar.hideActionMode();
                                                    ChatActivity.this.updatePinnedMessageView(true);
                                                    ChatActivity.this.updateBottomOverlay();
                                                    ChatActivity.this.updateVisibleRows();
                                                }
                                            }
                                            z = true;
                                            access$4900.setNeedBotContext(z);
                                            ChatActivity.this.chatListView.setOnItemLongClickListener(ChatActivity.this.onItemLongClickListener);
                                            ChatActivity.this.chatListView.setOnItemClickListener(ChatActivity.this.onItemClickListener);
                                            ChatActivity.this.chatListView.setClickable(true);
                                            ChatActivity.this.chatListView.setLongClickable(true);
                                            ChatActivity.this.actionModeTitleContainer.setVisibility(8);
                                            ChatActivity.this.selectedMessagesCountTextView.setVisibility(0);
                                            chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                            if (ChatActivity.this.currentEncryptedChat != null) {
                                                if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) >= ChatActivity.edit) {
                                                    z = false;
                                                    if (ChatActivity.this.currentEncryptedChat != null) {
                                                        if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) < 46) {
                                                            z2 = false;
                                                            chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                            if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                                ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                                ChatActivity.this.editingMessageObjectReqId = 0;
                                                            }
                                                            ChatActivity.this.actionBar.hideActionMode();
                                                            ChatActivity.this.updatePinnedMessageView(true);
                                                            ChatActivity.this.updateBottomOverlay();
                                                            ChatActivity.this.updateVisibleRows();
                                                        }
                                                    }
                                                    z2 = true;
                                                    chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                    if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                        ChatActivity.this.editingMessageObjectReqId = 0;
                                                    }
                                                    ChatActivity.this.actionBar.hideActionMode();
                                                    ChatActivity.this.updatePinnedMessageView(true);
                                                    ChatActivity.this.updateBottomOverlay();
                                                    ChatActivity.this.updateVisibleRows();
                                                }
                                            }
                                            z = true;
                                            if (ChatActivity.this.currentEncryptedChat != null) {
                                                if (AndroidUtilities.getPeerLayerVersion(ChatActivity.this.currentEncryptedChat.layer) < 46) {
                                                    z2 = false;
                                                    chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                                    if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                        ChatActivity.this.editingMessageObjectReqId = 0;
                                                    }
                                                    ChatActivity.this.actionBar.hideActionMode();
                                                    ChatActivity.this.updatePinnedMessageView(true);
                                                    ChatActivity.this.updateBottomOverlay();
                                                    ChatActivity.this.updateVisibleRows();
                                                }
                                            }
                                            z2 = true;
                                            chatActivityEnterView.setAllowStickersAndGifs(z, z2);
                                            if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                                ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                                ChatActivity.this.editingMessageObjectReqId = 0;
                                            }
                                            ChatActivity.this.actionBar.hideActionMode();
                                            ChatActivity.this.updatePinnedMessageView(true);
                                            ChatActivity.this.updateBottomOverlay();
                                            ChatActivity.this.updateVisibleRows();
                                        }
                                    }

                                    public void onWindowSizeChanged(int size) {
                                        if (size < AndroidUtilities.dp(72.0f) + ActionBar.getCurrentActionBarHeight()) {
                                            ChatActivity.this.allowStickersPanel = false;
                                            if (ChatActivity.this.stickersPanel.getVisibility() == 0) {
                                                ChatActivity.this.stickersPanel.setVisibility(4);
                                            }
                                            if (ChatActivity.this.mentionContainer != null && ChatActivity.this.mentionContainer.getVisibility() == 0) {
                                                ChatActivity.this.mentionContainer.setVisibility(4);
                                            }
                                        } else {
                                            ChatActivity.this.allowStickersPanel = true;
                                            if (ChatActivity.this.stickersPanel.getVisibility() == 4) {
                                                ChatActivity.this.stickersPanel.setVisibility(0);
                                            }
                                            if (ChatActivity.this.mentionContainer != null && ChatActivity.this.mentionContainer.getVisibility() == 4 && (!ChatActivity.this.mentionsAdapter.isBotContext() || ChatActivity.this.allowContextBotPanel || ChatActivity.this.allowContextBotPanelSecond)) {
                                                ChatActivity.this.mentionContainer.setVisibility(0);
                                                ChatActivity.this.mentionContainer.setTag(null);
                                            }
                                        }
                                        ChatActivity.this.allowContextBotPanel = true ^ ChatActivity.this.chatActivityEnterView.isPopupShowing();
                                        ChatActivity.this.checkContextBotPanel();
                                    }

                                    public void onStickersTab(boolean opened) {
                                        if (ChatActivity.this.emojiButtonRed != null) {
                                            ChatActivity.this.emojiButtonRed.setVisibility(8);
                                        }
                                        ChatActivity.this.allowContextBotPanelSecond = opened ^ 1;
                                        ChatActivity.this.checkContextBotPanel();
                                    }

                                    public void didPressedAttachButton() {
                                        ChatActivity.this.openAttachMenu();
                                    }

                                    public void needStartRecordVideo(int state) {
                                        if (ChatActivity.this.instantCameraView == null) {
                                            return;
                                        }
                                        if (state == 0) {
                                            ChatActivity.this.instantCameraView.showCamera();
                                            return;
                                        }
                                        if (!(state == 1 || state == 3)) {
                                            if (state != 4) {
                                                if (state == 2) {
                                                    ChatActivity.this.instantCameraView.cancel();
                                                    return;
                                                }
                                                return;
                                            }
                                        }
                                        ChatActivity.this.instantCameraView.send(state);
                                    }

                                    public void needChangeVideoPreviewState(int state, float seekProgress) {
                                        if (ChatActivity.this.instantCameraView != null) {
                                            ChatActivity.this.instantCameraView.changeVideoPreviewState(state, seekProgress);
                                        }
                                    }

                                    public void needStartRecordAudio(int state) {
                                        ChatActivity.this.overlayView.setVisibility(state == 0 ? 8 : 0);
                                    }

                                    public void needShowMediaBanHint() {
                                        ChatActivity.this.showMediaBannedHint();
                                    }

                                    public void onStickersExpandedChange() {
                                        ChatActivity.this.checkRaiseSensors();
                                    }
                                });
                                replyLayout = new FrameLayout(context2) {
                                    public void setTranslationY(float translationY) {
                                        super.setTranslationY(translationY);
                                        if (ChatActivity.this.chatActivityEnterView != null) {
                                            ChatActivity.this.chatActivityEnterView.invalidate();
                                        }
                                        if (getVisibility() != 8) {
                                            int height = getLayoutParams().height;
                                            if (ChatActivity.this.chatListView != null) {
                                                ChatActivity.this.chatListView.setTranslationY(translationY);
                                            }
                                            if (ChatActivity.this.progressView != null) {
                                                ChatActivity.this.progressView.setTranslationY(translationY);
                                            }
                                            if (ChatActivity.this.mentionContainer != null) {
                                                ChatActivity.this.mentionContainer.setTranslationY(translationY);
                                            }
                                            if (ChatActivity.this.pagedownButton != null) {
                                                ChatActivity.this.pagedownButton.setTranslationY(translationY);
                                            }
                                            if (ChatActivity.this.mentiondownButton != null) {
                                                ChatActivity.this.mentiondownButton.setTranslationY(ChatActivity.this.pagedownButton.getVisibility() != 0 ? translationY : translationY - ((float) AndroidUtilities.dp(72.0f)));
                                            }
                                        }
                                    }

                                    public boolean hasOverlappingRendering() {
                                        return false;
                                    }

                                    public void setVisibility(int visibility) {
                                        super.setVisibility(visibility);
                                        if (visibility == 8) {
                                            float f = 0.0f;
                                            if (ChatActivity.this.chatListView != null) {
                                                ChatActivity.this.chatListView.setTranslationY(0.0f);
                                            }
                                            if (ChatActivity.this.progressView != null) {
                                                ChatActivity.this.progressView.setTranslationY(0.0f);
                                            }
                                            if (ChatActivity.this.mentionContainer != null) {
                                                ChatActivity.this.mentionContainer.setTranslationY(0.0f);
                                            }
                                            if (ChatActivity.this.pagedownButton != null) {
                                                FrameLayout access$9600 = ChatActivity.this.pagedownButton;
                                                if (ChatActivity.this.pagedownButton.getTag() == null) {
                                                    f = (float) AndroidUtilities.dp(100.0f);
                                                }
                                                access$9600.setTranslationY(f);
                                            }
                                            if (ChatActivity.this.mentiondownButton != null) {
                                                ChatActivity.this.mentiondownButton.setTranslationY((float) (ChatActivity.this.mentiondownButton.getTag() == null ? AndroidUtilities.dp(100.0f) : ChatActivity.this.pagedownButton.getVisibility() == 0 ? -AndroidUtilities.dp(72.0f) : 0));
                                            }
                                        }
                                    }
                                };
                                r7.chatActivityEnterView.addTopView(replyLayout, 48);
                                replyLayout.setOnClickListener(new OnClickListener() {
                                    public void onClick(View v) {
                                        if (ChatActivity.this.replyingMessageObject != null) {
                                            ChatActivity.this.scrollToMessageId(ChatActivity.this.replyingMessageObject.getId(), 0, true, 0, false);
                                        }
                                    }
                                });
                                r7.replyLineView = new View(context2);
                                r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                                replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                                r7.replyIconImageView = new ImageView(context2);
                                r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                                r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                                replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                                r7.replyCloseImageView = new ImageView(context2);
                                r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                                r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                                r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                                replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                                r7.replyCloseImageView.setOnClickListener(new OnClickListener() {
                                    public void onClick(View v) {
                                        if (ChatActivity.this.forwardingMessages != null) {
                                            ChatActivity.this.forwardingMessages.clear();
                                        }
                                        ChatActivity.this.showReplyPanel(false, null, null, ChatActivity.this.foundWebPage, true);
                                    }
                                });
                                r7.replyNameTextView = new SimpleTextView(context2);
                                r7.replyNameTextView.setTextSize(14);
                                r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                                r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                                replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                                r7.replyObjectTextView = new SimpleTextView(context2);
                                r7.replyObjectTextView.setTextSize(14);
                                r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                                replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                                r7.replyImageView = new BackupImageView(context2);
                                replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                                r7.stickersPanel = new FrameLayout(context2);
                                r7.stickersPanel.setVisibility(8);
                                r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                                stickerPreviewViewerDelegate = new StickerPreviewViewerDelegate() {
                                    public void sendSticker(Document sticker) {
                                    }

                                    public boolean needSend() {
                                        return false;
                                    }

                                    public void openSet(InputStickerSet set) {
                                        if (set != null && ChatActivity.this.getParentActivity() != null) {
                                            InputStickerSet inputStickerSet = new TL_inputStickerSetID();
                                            inputStickerSet.access_hash = set.access_hash;
                                            inputStickerSet.id = set.id;
                                            ChatActivity.this.showDialog(new StickersAlert(ChatActivity.this.getParentActivity(), ChatActivity.this, inputStickerSet, null, ChatActivity.this.chatActivityEnterView));
                                        }
                                    }
                                };
                                r7.stickersListView = new RecyclerListView(context2) {
                                    public boolean onInterceptTouchEvent(MotionEvent event) {
                                        boolean result = StickerPreviewViewer.getInstance().onInterceptTouchEvent(event, ChatActivity.this.stickersListView, 0, stickerPreviewViewerDelegate);
                                        if (!super.onInterceptTouchEvent(event)) {
                                            if (!result) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    }
                                };
                                r7.stickersListView.setTag(Integer.valueOf(3));
                                r7.stickersListView.setOnTouchListener(new OnTouchListener() {
                                    public boolean onTouch(View v, MotionEvent event) {
                                        return StickerPreviewViewer.getInstance().onTouch(event, ChatActivity.this.stickersListView, 0, ChatActivity.this.stickersOnItemClickListener, stickerPreviewViewerDelegate);
                                    }
                                });
                                r7.stickersListView.setDisallowInterceptTouchEvents(true);
                                layoutManager = new LinearLayoutManager(context2);
                                layoutManager.setOrientation(0);
                                r7.stickersListView.setLayoutManager(layoutManager);
                                r7.stickersListView.setClipToPadding(false);
                                r7.stickersListView.setOverScrollMode(2);
                                r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                                initStickers();
                                r7.stickersPanelArrow = new ImageView(context2);
                                r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                                r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                                r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                                r7.searchContainer = new FrameLayout(context2) {
                                    public void onDraw(Canvas canvas) {
                                        int bottom = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                                        Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), bottom);
                                        Theme.chat_composeShadowDrawable.draw(canvas);
                                        canvas.drawRect(0.0f, (float) bottom, (float) getMeasuredWidth(), (float) getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                                    }
                                };
                                r7.searchContainer.setOnTouchListener(new OnTouchListener() {
                                    public boolean onTouch(View v, MotionEvent event) {
                                        return true;
                                    }
                                });
                                r7.searchContainer.setWillNotDraw(false);
                                r7.searchContainer.setVisibility(4);
                                r7.searchContainer.setFocusable(true);
                                r7.searchContainer.setFocusableInTouchMode(true);
                                r7.searchContainer.setClickable(true);
                                r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                                r7.searchUpButton = new ImageView(context2);
                                r7.searchUpButton.setScaleType(ScaleType.CENTER);
                                r7.searchUpButton.setImageResource(R.drawable.search_up);
                                r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                                r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                                r7.searchUpButton.setOnClickListener(new OnClickListener() {
                                    public void onClick(View view) {
                                        DataQuery.getInstance(ChatActivity.this.currentAccount).searchMessagesInChat(null, ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ChatActivity.this.classGuid, 1, ChatActivity.this.searchingUserMessages);
                                    }
                                });
                                r7.searchDownButton = new ImageView(context2);
                                r7.searchDownButton.setScaleType(ScaleType.CENTER);
                                r7.searchDownButton.setImageResource(R.drawable.search_down);
                                r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                                r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                                r7.searchDownButton.setOnClickListener(new OnClickListener() {
                                    public void onClick(View view) {
                                        DataQuery.getInstance(ChatActivity.this.currentAccount).searchMessagesInChat(null, ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ChatActivity.this.classGuid, 2, ChatActivity.this.searchingUserMessages);
                                    }
                                });
                                if (r7.currentChat != null && (!ChatObject.isChannel(r7.currentChat) || r7.currentChat.megagroup)) {
                                    r7.searchUserButton = new ImageView(context2);
                                    r7.searchUserButton.setScaleType(ScaleType.CENTER);
                                    r7.searchUserButton.setImageResource(R.drawable.usersearch);
                                    r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                                    r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                                    r7.searchUserButton.setOnClickListener(new OnClickListener() {
                                        public void onClick(View view) {
                                            ChatActivity.this.mentionLayoutManager.setReverseLayout(true);
                                            ChatActivity.this.mentionsAdapter.setSearchingMentions(true);
                                            ChatActivity.this.searchCalendarButton.setVisibility(8);
                                            ChatActivity.this.searchUserButton.setVisibility(8);
                                            ChatActivity.this.searchingForUser = true;
                                            ChatActivity.this.searchingUserMessages = null;
                                            ChatActivity.this.searchItem.getSearchField().setHint(LocaleController.getString("SearchMembers", R.string.SearchMembers));
                                            ChatActivity.this.searchItem.setSearchFieldCaption(LocaleController.getString("SearchFrom", R.string.SearchFrom));
                                            AndroidUtilities.showKeyboard(ChatActivity.this.searchItem.getSearchField());
                                            ChatActivity.this.searchItem.clearSearchText();
                                        }
                                    });
                                }
                                r7.searchCalendarButton = new ImageView(context2);
                                r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                                r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                                r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                                r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                                r7.searchCalendarButton.setOnClickListener(new OnClickListener() {
                                    public void onClick(View view) {
                                        if (ChatActivity.this.getParentActivity() != null) {
                                            AndroidUtilities.hideKeyboard(ChatActivity.this.searchItem.getSearchField());
                                            Calendar calendar = Calendar.getInstance();
                                            try {
                                                DatePickerDialog dialog = new DatePickerDialog(ChatActivity.this.getParentActivity(), new OnDateSetListener() {
                                                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                                                        Calendar calendar = Calendar.getInstance();
                                                        calendar.clear();
                                                        calendar.set(year, month, dayOfMonth);
                                                        int date = (int) (calendar.getTime().getTime() / 1000);
                                                        ChatActivity.this.clearChatData();
                                                        ChatActivity.this.waitingForLoad.add(Integer.valueOf(ChatActivity.this.lastLoadIndex));
                                                        MessagesController.getInstance(ChatActivity.this.currentAccount).loadMessages(ChatActivity.this.dialog_id, ChatActivity.bot_help, 0, date, true, 0, ChatActivity.this.classGuid, 4, 0, ChatObject.isChannel(ChatActivity.this.currentChat), ChatActivity.this.lastLoadIndex = ChatActivity.this.lastLoadIndex + 1);
                                                    }
                                                }, calendar.get(1), calendar.get(2), calendar.get(5));
                                                final DatePicker datePicker = dialog.getDatePicker();
                                                datePicker.setMinDate(1375315200000L);
                                                datePicker.setMaxDate(System.currentTimeMillis());
                                                dialog.setButton(-1, LocaleController.getString("JumpToDate", R.string.JumpToDate), dialog);
                                                dialog.setButton(-2, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
                                                    public void onClick(DialogInterface dialog, int which) {
                                                    }
                                                });
                                                if (VERSION.SDK_INT >= 21) {
                                                    dialog.setOnShowListener(new OnShowListener() {
                                                        public void onShow(DialogInterface dialog) {
                                                            int count = datePicker.getChildCount();
                                                            for (int a = 0; a < count; a++) {
                                                                View child = datePicker.getChildAt(a);
                                                                ViewGroup.LayoutParams layoutParams = child.getLayoutParams();
                                                                layoutParams.width = -1;
                                                                child.setLayoutParams(layoutParams);
                                                            }
                                                        }
                                                    });
                                                }
                                                ChatActivity.this.showDialog(dialog);
                                            } catch (Throwable e) {
                                                FileLog.e(e);
                                            }
                                        }
                                    }
                                });
                                r7.searchCountText = new SimpleTextView(context2);
                                r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                                r7.searchCountText.setTextSize(15);
                                r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                                r7.searchCountText.setGravity(5);
                                r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                                r7.bottomOverlay = new FrameLayout(context2) {
                                    public void onDraw(Canvas canvas) {
                                        int bottom = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                                        Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), bottom);
                                        Theme.chat_composeShadowDrawable.draw(canvas);
                                        canvas.drawRect(0.0f, (float) bottom, (float) getMeasuredWidth(), (float) getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                                    }
                                };
                                r7.bottomOverlay.setWillNotDraw(false);
                                r7.bottomOverlay.setVisibility(4);
                                r7.bottomOverlay.setFocusable(true);
                                r7.bottomOverlay.setFocusableInTouchMode(true);
                                r7.bottomOverlay.setClickable(true);
                                r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                                r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                                r7.bottomOverlayText = new TextView(context2);
                                r7.bottomOverlayText.setTextSize(1, 14.0f);
                                r7.bottomOverlayText.setGravity(17);
                                r7.bottomOverlayText.setMaxLines(2);
                                r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                                r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                                r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                                r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                                r7.bottomOverlayChat = new FrameLayout(context2) {
                                    public void onDraw(Canvas canvas) {
                                        int bottom = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                                        Theme.chat_composeShadowDrawable.setBounds(0, 0, getMeasuredWidth(), bottom);
                                        Theme.chat_composeShadowDrawable.draw(canvas);
                                        canvas.drawRect(0.0f, (float) bottom, (float) getMeasuredWidth(), (float) getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                                    }
                                };
                                r7.bottomOverlayChat.setWillNotDraw(false);
                                r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                                r7.bottomOverlayChat.setVisibility(4);
                                r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                                r7.bottomOverlayChat.setOnClickListener(new OnClickListener() {
                                    public void onClick(View view) {
                                        if (ChatActivity.this.getParentActivity() != null) {
                                            AlertDialog.Builder builder = null;
                                            if (ChatActivity.this.currentUser == null || !ChatActivity.this.userBlocked) {
                                                if (ChatActivity.this.currentUser != null && ChatActivity.this.currentUser.bot && ChatActivity.this.botUser != null) {
                                                    if (ChatActivity.this.botUser.length() != 0) {
                                                        MessagesController.getInstance(ChatActivity.this.currentAccount).sendBotStart(ChatActivity.this.currentUser, ChatActivity.this.botUser);
                                                    } else {
                                                        SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage("/start", ChatActivity.this.dialog_id, null, null, false, null, null, null);
                                                    }
                                                    ChatActivity.this.botUser = null;
                                                    ChatActivity.this.updateBottomOverlay();
                                                } else if (!ChatObject.isChannel(ChatActivity.this.currentChat) || (ChatActivity.this.currentChat instanceof TL_channelForbidden)) {
                                                    builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity());
                                                    builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
                                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                                                        public void onClick(DialogInterface dialogInterface, int i) {
                                                            MessagesController.getInstance(ChatActivity.this.currentAccount).deleteDialog(ChatActivity.this.dialog_id, 0);
                                                            ChatActivity.this.finishFragment();
                                                        }
                                                    });
                                                } else if (ChatObject.isNotInChat(ChatActivity.this.currentChat)) {
                                                    MessagesController.getInstance(ChatActivity.this.currentAccount).addUserToChat(ChatActivity.this.currentChat.id, UserConfig.getInstance(ChatActivity.this.currentAccount).getCurrentUser(), null, 0, null, ChatActivity.this);
                                                } else {
                                                    ChatActivity.this.toggleMute(true);
                                                }
                                            } else if (ChatActivity.this.currentUser.bot) {
                                                String botUserLast = ChatActivity.this.botUser;
                                                ChatActivity.this.botUser = null;
                                                MessagesController.getInstance(ChatActivity.this.currentAccount).unblockUser(ChatActivity.this.currentUser.id);
                                                if (botUserLast == null || botUserLast.length() == 0) {
                                                    SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage("/start", ChatActivity.this.dialog_id, null, null, false, null, null, null);
                                                } else {
                                                    MessagesController.getInstance(ChatActivity.this.currentAccount).sendBotStart(ChatActivity.this.currentUser, botUserLast);
                                                }
                                            } else {
                                                builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity());
                                                builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
                                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                                                    public void onClick(DialogInterface dialogInterface, int i) {
                                                        MessagesController.getInstance(ChatActivity.this.currentAccount).unblockUser(ChatActivity.this.currentUser.id);
                                                    }
                                                });
                                            }
                                            if (builder != null) {
                                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                                                ChatActivity.this.showDialog(builder.create());
                                            }
                                        }
                                    }
                                });
                                r7.bottomOverlayChatText = new TextView(context2);
                                r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                                r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                                r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                                r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                                r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                                r7.chatAdapter.updateRows();
                                if (r7.loading || !r7.messages.isEmpty()) {
                                    r7.progressView.setVisibility(4);
                                    r7.chatListView.setEmptyView(r7.emptyViewContainer);
                                } else {
                                    r7.progressView.setVisibility(r7.chatAdapter.botInfoRow == -1 ? 0 : 4);
                                    r7.chatListView.setEmptyView(null);
                                }
                                checkBotKeyboard();
                                updateContactStatus();
                                updateBottomOverlay();
                                updateSecretStatus();
                                updateSpamView();
                                updatePinnedMessageView(true);
                                if (r7.currentEncryptedChat != null && VERSION.SDK_INT >= edit && (SharedConfig.passcodeHash.length() == 0 || SharedConfig.allowScreenCapture)) {
                                    MediaController.getInstance().setFlagSecure(r7, true);
                                }
                                oldMessage2 = oldMessage3;
                                if (oldMessage2 != null) {
                                    r7.chatActivityEnterView.setFieldText(oldMessage2);
                                }
                                fixLayoutInternal();
                                return r7.fragmentView;
                            }
                        }
                        z3 = true;
                        chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                        r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                        r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
                        replyLayout = /* anonymous class already generated */;
                        r7.chatActivityEnterView.addTopView(replyLayout, 48);
                        replyLayout.setOnClickListener(/* anonymous class already generated */);
                        r7.replyLineView = new View(context2);
                        r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                        replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                        r7.replyIconImageView = new ImageView(context2);
                        r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                        r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                        replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                        r7.replyCloseImageView = new ImageView(context2);
                        r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                        r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                        r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                        replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                        r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
                        r7.replyNameTextView = new SimpleTextView(context2);
                        r7.replyNameTextView.setTextSize(14);
                        r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                        r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                        r7.replyObjectTextView = new SimpleTextView(context2);
                        r7.replyObjectTextView.setTextSize(14);
                        r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                        replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                        r7.replyImageView = new BackupImageView(context2);
                        replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                        r7.stickersPanel = new FrameLayout(context2);
                        r7.stickersPanel.setVisibility(8);
                        r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                        stickerPreviewViewerDelegate = /* anonymous class already generated */;
                        r7.stickersListView = /* anonymous class already generated */;
                        r7.stickersListView.setTag(Integer.valueOf(3));
                        r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
                        r7.stickersListView.setDisallowInterceptTouchEvents(true);
                        layoutManager = new LinearLayoutManager(context2);
                        layoutManager.setOrientation(0);
                        r7.stickersListView.setLayoutManager(layoutManager);
                        r7.stickersListView.setClipToPadding(false);
                        r7.stickersListView.setOverScrollMode(2);
                        r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                        initStickers();
                        r7.stickersPanelArrow = new ImageView(context2);
                        r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                        r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                        r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchContainer = /* anonymous class already generated */;
                        r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
                        r7.searchContainer.setWillNotDraw(false);
                        r7.searchContainer.setVisibility(4);
                        r7.searchContainer.setFocusable(true);
                        r7.searchContainer.setFocusableInTouchMode(true);
                        r7.searchContainer.setClickable(true);
                        r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                        r7.searchUpButton = new ImageView(context2);
                        r7.searchUpButton.setScaleType(ScaleType.CENTER);
                        r7.searchUpButton.setImageResource(R.drawable.search_up);
                        r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                        r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchDownButton = new ImageView(context2);
                        r7.searchDownButton.setScaleType(ScaleType.CENTER);
                        r7.searchDownButton.setImageResource(R.drawable.search_down);
                        r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchUserButton = new ImageView(context2);
                        r7.searchUserButton.setScaleType(ScaleType.CENTER);
                        r7.searchUserButton.setImageResource(R.drawable.usersearch);
                        r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchCalendarButton = new ImageView(context2);
                        r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                        r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                        r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                        r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchCountText = new SimpleTextView(context2);
                        r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                        r7.searchCountText.setTextSize(15);
                        r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        r7.searchCountText.setGravity(5);
                        r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                        r7.bottomOverlay = /* anonymous class already generated */;
                        r7.bottomOverlay.setWillNotDraw(false);
                        r7.bottomOverlay.setVisibility(4);
                        r7.bottomOverlay.setFocusable(true);
                        r7.bottomOverlay.setFocusableInTouchMode(true);
                        r7.bottomOverlay.setClickable(true);
                        r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                        r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                        r7.bottomOverlayText = new TextView(context2);
                        r7.bottomOverlayText.setTextSize(1, 14.0f);
                        r7.bottomOverlayText.setGravity(17);
                        r7.bottomOverlayText.setMaxLines(2);
                        r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                        r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                        r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                        r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                        r7.bottomOverlayChat = /* anonymous class already generated */;
                        r7.bottomOverlayChat.setWillNotDraw(false);
                        r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                        r7.bottomOverlayChat.setVisibility(4);
                        r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                        r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
                        r7.bottomOverlayChatText = new TextView(context2);
                        r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                        r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                        r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                        r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                        r7.chatAdapter.updateRows();
                        if (r7.loading) {
                        }
                        r7.progressView.setVisibility(4);
                        r7.chatListView.setEmptyView(r7.emptyViewContainer);
                        checkBotKeyboard();
                        updateContactStatus();
                        updateBottomOverlay();
                        updateSecretStatus();
                        updateSpamView();
                        updatePinnedMessageView(true);
                        MediaController.getInstance().setFlagSecure(r7, true);
                        oldMessage2 = oldMessage3;
                        if (oldMessage2 != null) {
                            r7.chatActivityEnterView.setFieldText(oldMessage2);
                        }
                        fixLayoutInternal();
                        return r7.fragmentView;
                    }
                }
                z2 = true;
                if (r7.currentEncryptedChat != null) {
                    if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) < i2) {
                        z3 = false;
                        chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                        r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                        r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
                        replyLayout = /* anonymous class already generated */;
                        r7.chatActivityEnterView.addTopView(replyLayout, 48);
                        replyLayout.setOnClickListener(/* anonymous class already generated */);
                        r7.replyLineView = new View(context2);
                        r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                        replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                        r7.replyIconImageView = new ImageView(context2);
                        r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                        r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                        replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                        r7.replyCloseImageView = new ImageView(context2);
                        r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                        r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                        r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                        replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                        r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
                        r7.replyNameTextView = new SimpleTextView(context2);
                        r7.replyNameTextView.setTextSize(14);
                        r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                        r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                        r7.replyObjectTextView = new SimpleTextView(context2);
                        r7.replyObjectTextView.setTextSize(14);
                        r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                        replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                        r7.replyImageView = new BackupImageView(context2);
                        replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                        r7.stickersPanel = new FrameLayout(context2);
                        r7.stickersPanel.setVisibility(8);
                        r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                        stickerPreviewViewerDelegate = /* anonymous class already generated */;
                        r7.stickersListView = /* anonymous class already generated */;
                        r7.stickersListView.setTag(Integer.valueOf(3));
                        r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
                        r7.stickersListView.setDisallowInterceptTouchEvents(true);
                        layoutManager = new LinearLayoutManager(context2);
                        layoutManager.setOrientation(0);
                        r7.stickersListView.setLayoutManager(layoutManager);
                        r7.stickersListView.setClipToPadding(false);
                        r7.stickersListView.setOverScrollMode(2);
                        r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                        initStickers();
                        r7.stickersPanelArrow = new ImageView(context2);
                        r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                        r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                        r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchContainer = /* anonymous class already generated */;
                        r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
                        r7.searchContainer.setWillNotDraw(false);
                        r7.searchContainer.setVisibility(4);
                        r7.searchContainer.setFocusable(true);
                        r7.searchContainer.setFocusableInTouchMode(true);
                        r7.searchContainer.setClickable(true);
                        r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                        r7.searchUpButton = new ImageView(context2);
                        r7.searchUpButton.setScaleType(ScaleType.CENTER);
                        r7.searchUpButton.setImageResource(R.drawable.search_up);
                        r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                        r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchDownButton = new ImageView(context2);
                        r7.searchDownButton.setScaleType(ScaleType.CENTER);
                        r7.searchDownButton.setImageResource(R.drawable.search_down);
                        r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchUserButton = new ImageView(context2);
                        r7.searchUserButton.setScaleType(ScaleType.CENTER);
                        r7.searchUserButton.setImageResource(R.drawable.usersearch);
                        r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchCalendarButton = new ImageView(context2);
                        r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                        r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                        r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                        r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchCountText = new SimpleTextView(context2);
                        r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                        r7.searchCountText.setTextSize(15);
                        r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        r7.searchCountText.setGravity(5);
                        r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                        r7.bottomOverlay = /* anonymous class already generated */;
                        r7.bottomOverlay.setWillNotDraw(false);
                        r7.bottomOverlay.setVisibility(4);
                        r7.bottomOverlay.setFocusable(true);
                        r7.bottomOverlay.setFocusableInTouchMode(true);
                        r7.bottomOverlay.setClickable(true);
                        r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                        r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                        r7.bottomOverlayText = new TextView(context2);
                        r7.bottomOverlayText.setTextSize(1, 14.0f);
                        r7.bottomOverlayText.setGravity(17);
                        r7.bottomOverlayText.setMaxLines(2);
                        r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                        r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                        r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                        r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                        r7.bottomOverlayChat = /* anonymous class already generated */;
                        r7.bottomOverlayChat.setWillNotDraw(false);
                        r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                        r7.bottomOverlayChat.setVisibility(4);
                        r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                        r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
                        r7.bottomOverlayChatText = new TextView(context2);
                        r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                        r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                        r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                        r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                        r7.chatAdapter.updateRows();
                        if (r7.loading) {
                        }
                        r7.progressView.setVisibility(4);
                        r7.chatListView.setEmptyView(r7.emptyViewContainer);
                        checkBotKeyboard();
                        updateContactStatus();
                        updateBottomOverlay();
                        updateSecretStatus();
                        updateSpamView();
                        updatePinnedMessageView(true);
                        MediaController.getInstance().setFlagSecure(r7, true);
                        oldMessage2 = oldMessage3;
                        if (oldMessage2 != null) {
                            r7.chatActivityEnterView.setFieldText(oldMessage2);
                        }
                        fixLayoutInternal();
                        return r7.fragmentView;
                    }
                }
                z3 = true;
                chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
                replyLayout = /* anonymous class already generated */;
                r7.chatActivityEnterView.addTopView(replyLayout, 48);
                replyLayout.setOnClickListener(/* anonymous class already generated */);
                r7.replyLineView = new View(context2);
                r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                r7.replyIconImageView = new ImageView(context2);
                r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                r7.replyCloseImageView = new ImageView(context2);
                r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
                r7.replyNameTextView = new SimpleTextView(context2);
                r7.replyNameTextView.setTextSize(14);
                r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                r7.replyObjectTextView = new SimpleTextView(context2);
                r7.replyObjectTextView.setTextSize(14);
                r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                r7.replyImageView = new BackupImageView(context2);
                replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                r7.stickersPanel = new FrameLayout(context2);
                r7.stickersPanel.setVisibility(8);
                r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                stickerPreviewViewerDelegate = /* anonymous class already generated */;
                r7.stickersListView = /* anonymous class already generated */;
                r7.stickersListView.setTag(Integer.valueOf(3));
                r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
                r7.stickersListView.setDisallowInterceptTouchEvents(true);
                layoutManager = new LinearLayoutManager(context2);
                layoutManager.setOrientation(0);
                r7.stickersListView.setLayoutManager(layoutManager);
                r7.stickersListView.setClipToPadding(false);
                r7.stickersListView.setOverScrollMode(2);
                r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                initStickers();
                r7.stickersPanelArrow = new ImageView(context2);
                r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                r7.searchContainer = /* anonymous class already generated */;
                r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
                r7.searchContainer.setWillNotDraw(false);
                r7.searchContainer.setVisibility(4);
                r7.searchContainer.setFocusable(true);
                r7.searchContainer.setFocusableInTouchMode(true);
                r7.searchContainer.setClickable(true);
                r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                r7.searchUpButton = new ImageView(context2);
                r7.searchUpButton.setScaleType(ScaleType.CENTER);
                r7.searchUpButton.setImageResource(R.drawable.search_up);
                r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchDownButton = new ImageView(context2);
                r7.searchDownButton.setScaleType(ScaleType.CENTER);
                r7.searchDownButton.setImageResource(R.drawable.search_down);
                r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchUserButton = new ImageView(context2);
                r7.searchUserButton.setScaleType(ScaleType.CENTER);
                r7.searchUserButton.setImageResource(R.drawable.usersearch);
                r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchCalendarButton = new ImageView(context2);
                r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchCountText = new SimpleTextView(context2);
                r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                r7.searchCountText.setTextSize(15);
                r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.searchCountText.setGravity(5);
                r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                r7.bottomOverlay = /* anonymous class already generated */;
                r7.bottomOverlay.setWillNotDraw(false);
                r7.bottomOverlay.setVisibility(4);
                r7.bottomOverlay.setFocusable(true);
                r7.bottomOverlay.setFocusableInTouchMode(true);
                r7.bottomOverlay.setClickable(true);
                r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                r7.bottomOverlayText = new TextView(context2);
                r7.bottomOverlayText.setTextSize(1, 14.0f);
                r7.bottomOverlayText.setGravity(17);
                r7.bottomOverlayText.setMaxLines(2);
                r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                r7.bottomOverlayChat = /* anonymous class already generated */;
                r7.bottomOverlayChat.setWillNotDraw(false);
                r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                r7.bottomOverlayChat.setVisibility(4);
                r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
                r7.bottomOverlayChatText = new TextView(context2);
                r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                r7.chatAdapter.updateRows();
                if (r7.loading) {
                }
                r7.progressView.setVisibility(4);
                r7.chatListView.setEmptyView(r7.emptyViewContainer);
                checkBotKeyboard();
                updateContactStatus();
                updateBottomOverlay();
                updateSecretStatus();
                updateSpamView();
                updatePinnedMessageView(true);
                MediaController.getInstance().setFlagSecure(r7, true);
                oldMessage2 = oldMessage3;
                if (oldMessage2 != null) {
                    r7.chatActivityEnterView.setFieldText(oldMessage2);
                }
                fixLayoutInternal();
                return r7.fragmentView;
            }
        }
        r7.muteItem = r7.headerItem.addSubItem(18, null);
        r7.headerItem.addSubItem(bot_settings, LocaleController.getString("BotSettings", R.string.BotSettings));
        r7.headerItem.addSubItem(bot_help, LocaleController.getString("BotHelp", R.string.BotHelp));
        updateBotButtons();
        updateTitle();
        r7.avatarContainer.updateOnlineCount();
        r7.avatarContainer.updateSubtitle();
        updateTitleIcons();
        r7.attachItem = menu.addItem(14, (int) R.drawable.ic_ab_other).setOverrideMenuClick(true).setAllowCloseAnimation(false);
        r7.attachItem.setVisibility(8);
        r7.actionModeViews.clear();
        actionMode = r7.actionBar.createActionMode();
        r7.selectedMessagesCountTextView = new NumberTextView(actionMode.getContext());
        r7.selectedMessagesCountTextView.setTextSize(18);
        r7.selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.selectedMessagesCountTextView.setTextColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
        actionMode.addView(r7.selectedMessagesCountTextView, LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
        r7.selectedMessagesCountTextView.setOnTouchListener(/* anonymous class already generated */);
        r7.actionModeTitleContainer = /* anonymous class already generated */;
        actionMode.addView(r7.actionModeTitleContainer, LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
        r7.actionModeTitleContainer.setOnTouchListener(/* anonymous class already generated */);
        r7.actionModeTitleContainer.setVisibility(8);
        r7.actionModeTextView = new SimpleTextView(context2);
        r7.actionModeTextView.setTextSize(18);
        r7.actionModeTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.actionModeTextView.setTextColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
        r7.actionModeTextView.setText(LocaleController.getString("Edit", R.string.Edit));
        r7.actionModeTitleContainer.addView(r7.actionModeTextView, LayoutHelper.createFrame(-1, -1.0f));
        r7.actionModeSubTextView = new SimpleTextView(context2);
        r7.actionModeSubTextView.setGravity(3);
        r7.actionModeSubTextView.setTextColor(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon));
        r7.actionModeTitleContainer.addView(r7.actionModeSubTextView, LayoutHelper.createFrame(-1, -1.0f));
        if (r7.currentEncryptedChat != null) {
            r7.actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.group_edit, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(19, R.drawable.ic_ab_reply, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(22, R.drawable.ic_ab_fave, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(10, R.drawable.ic_ab_copy, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(12, R.drawable.ic_ab_delete, AndroidUtilities.dp(54.0f)));
        } else {
            r7.actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.group_edit, AndroidUtilities.dp(54.0f)));
            if (r7.isBroadcast) {
                r7.actionModeViews.add(actionMode.addItemWithWidth(19, R.drawable.ic_ab_reply, AndroidUtilities.dp(54.0f)));
            }
            r7.actionModeViews.add(actionMode.addItemWithWidth(22, R.drawable.ic_ab_fave, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(10, R.drawable.ic_ab_copy, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(11, R.drawable.ic_ab_forward, AndroidUtilities.dp(54.0f)));
            r7.actionModeViews.add(actionMode.addItemWithWidth(12, R.drawable.ic_ab_delete, AndroidUtilities.dp(54.0f)));
        }
        item = actionMode.getItem(edit);
        if (r7.canEditMessagesCount == 1) {
        }
        item.setVisibility(i);
        if (r7.selectedMessagesCanCopyIds[0].size() + r7.selectedMessagesCanCopyIds[1].size() == 0) {
        }
        actionMode.getItem(10).setVisibility(r7.selectedMessagesCanCopyIds[0].size() + r7.selectedMessagesCanCopyIds[1].size() == 0 ? 0 : 8);
        if (r7.selectedMessagesCanStarIds[0].size() + r7.selectedMessagesCanStarIds[1].size() == 0) {
        }
        actionMode.getItem(22).setVisibility(r7.selectedMessagesCanStarIds[0].size() + r7.selectedMessagesCanStarIds[1].size() == 0 ? 0 : 8);
        if (r7.cantDeleteMessagesCount != 0) {
        }
        actionMode.getItem(12).setVisibility(r7.cantDeleteMessagesCount != 0 ? 0 : 8);
        checkActionBarMenu();
        r7.fragmentView = /* anonymous class already generated */;
        r7.contentView = (SizeNotifierFrameLayout) r7.fragmentView;
        r7.contentView.setBackgroundImage(Theme.getCachedWallpaper());
        r7.emptyViewContainer = new FrameLayout(context2);
        r7.emptyViewContainer.setVisibility(4);
        r7.contentView.addView(r7.emptyViewContainer, LayoutHelper.createFrame(-1, -2, 17));
        r7.emptyViewContainer.setOnTouchListener(/* anonymous class already generated */);
        if (r7.currentEncryptedChat == null) {
            r7.bigEmptyView = new ChatBigEmptyView(context2, true);
            if (r7.currentEncryptedChat.admin_id != UserConfig.getInstance(r7.currentAccount).getClientUserId()) {
                r7.bigEmptyView.setSecretText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, UserObject.getFirstName(r7.currentUser)));
            } else {
                r7.bigEmptyView.setSecretText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, UserObject.getFirstName(r7.currentUser)));
            }
            r7.emptyViewContainer.addView(r7.bigEmptyView, new FrameLayout.LayoutParams(-2, -2, 17));
        } else {
            if (r7.currentUser == null) {
            }
            r7.emptyView = new TextView(context2);
            if (r7.currentUser != null) {
            }
            r7.emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
            r7.emptyView.setTextSize(1, 14.0f);
            r7.emptyView.setGravity(17);
            r7.emptyView.setTextColor(Theme.getColor(Theme.key_chat_serviceText));
            r7.emptyView.setBackgroundResource(R.drawable.system);
            r7.emptyView.getBackground().setColorFilter(Theme.colorFilter);
            r7.emptyView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
            r7.emptyView.setPadding(AndroidUtilities.dp(10.0f), AndroidUtilities.dp(2.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(3.0f));
            r7.emptyViewContainer.addView(r7.emptyView, new FrameLayout.LayoutParams(-2, -2, 17));
        }
        if (r7.chatActivityEnterView == null) {
            oldMessage = null;
        } else {
            r7.chatActivityEnterView.onDestroy();
            if (r7.chatActivityEnterView.isEditingMessage()) {
                oldMessage = null;
            } else {
                oldMessage = r7.chatActivityEnterView.getFieldText();
            }
        }
        oldMessage2 = oldMessage;
        if (r7.mentionsAdapter != null) {
            r7.mentionsAdapter.onDestroy();
        }
        r7.chatListView = /* anonymous class already generated */;
        r7.chatListView.setTag(Integer.valueOf(1));
        r7.chatListView.setVerticalScrollBarEnabled(true);
        recyclerListView = r7.chatListView;
        chatActivityAdapter = new ChatActivityAdapter(context2);
        r7.chatAdapter = chatActivityAdapter;
        recyclerListView.setAdapter(chatActivityAdapter);
        r7.chatListView.setClipToPadding(false);
        r7.chatListView.setPadding(0, AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(3.0f));
        r7.chatListView.setItemAnimator(null);
        r7.chatListView.setLayoutAnimation(null);
        gridLayoutManagerFixed = anonymousClass17;
        oldMessage3 = oldMessage2;
        anonymousClass17 = /* anonymous class already generated */;
        r7.chatLayoutManager = gridLayoutManagerFixed;
        r7.chatLayoutManager.setSpanSizeLookup(/* anonymous class already generated */);
        r7.chatListView.setLayoutManager(r7.chatLayoutManager);
        r7.chatListView.addItemDecoration(/* anonymous class already generated */);
        r7.contentView.addView(r7.chatListView, LayoutHelper.createFrame(-1, -1.0f));
        r7.chatListView.setOnItemLongClickListener(r7.onItemLongClickListener);
        r7.chatListView.setOnItemClickListener(r7.onItemClickListener);
        r7.chatListView.setOnScrollListener(/* anonymous class already generated */);
        r7.progressView = new FrameLayout(context2);
        r7.progressView.setVisibility(4);
        r7.contentView.addView(r7.progressView, LayoutHelper.createFrame(-1, -1, 51));
        r7.progressView2 = new View(context2);
        r7.progressView2.setBackgroundResource(R.drawable.system_loader);
        r7.progressView2.getBackground().setColorFilter(Theme.colorFilter);
        r7.progressView.addView(r7.progressView2, LayoutHelper.createFrame(36, 36, 17));
        r7.progressBar = new RadialProgressView(context2);
        r7.progressBar.setSize(AndroidUtilities.dp(28.0f));
        r7.progressBar.setProgressColor(Theme.getColor(Theme.key_chat_serviceText));
        r7.progressView.addView(r7.progressBar, LayoutHelper.createFrame(32, 32, 17));
        r7.floatingDateView = new ChatActionCell(context2);
        r7.floatingDateView.setAlpha(0.0f);
        r7.contentView.addView(r7.floatingDateView, LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 4.0f, 0.0f, 0.0f));
        r7.floatingDateView.setOnClickListener(/* anonymous class already generated */);
        if (ChatObject.isChannel(r7.currentChat)) {
            r7.pinnedMessageView = new FrameLayout(context2);
            r7.pinnedMessageView.setTag(Integer.valueOf(1));
            r7.pinnedMessageView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
            r7.pinnedMessageView.setVisibility(8);
            r7.pinnedMessageView.setBackgroundResource(R.drawable.blockpanel);
            r7.pinnedMessageView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), Mode.MULTIPLY));
            r7.contentView.addView(r7.pinnedMessageView, LayoutHelper.createFrame(-1, 50, 51));
            r7.pinnedMessageView.setOnClickListener(/* anonymous class already generated */);
            r7.pinnedLineView = new View(context2);
            r7.pinnedLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_topPanelLine));
            r7.pinnedMessageView.addView(r7.pinnedLineView, LayoutHelper.createFrame(2, 32.0f, 51, 8.0f, 8.0f, 0.0f, 0.0f));
            r7.pinnedMessageImageView = new BackupImageView(context2);
            r7.pinnedMessageView.addView(r7.pinnedMessageImageView, LayoutHelper.createFrame(32, 32.0f, 51, 17.0f, 8.0f, 0.0f, 0.0f));
            r7.pinnedMessageNameTextView = new SimpleTextView(context2);
            r7.pinnedMessageNameTextView.setTextSize(14);
            r7.pinnedMessageNameTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelTitle));
            r7.pinnedMessageNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
            r7.pinnedMessageView.addView(r7.pinnedMessageNameTextView, LayoutHelper.createFrame(-1, (float) AndroidUtilities.dp(18.0f), 51, 18.0f, 7.3f, 52.0f, 0.0f));
            r7.pinnedMessageTextView = new SimpleTextView(context2);
            r7.pinnedMessageTextView.setTextSize(14);
            r7.pinnedMessageTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelMessage));
            r7.pinnedMessageView.addView(r7.pinnedMessageTextView, LayoutHelper.createFrame(-1, (float) AndroidUtilities.dp(18.0f), 51, 18.0f, 25.3f, 52.0f, 0.0f));
            r7.closePinned = new ImageView(context2);
            r7.closePinned.setImageResource(R.drawable.miniplayer_close);
            r7.closePinned.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelClose), Mode.MULTIPLY));
            r7.closePinned.setScaleType(ScaleType.CENTER);
            r7.pinnedMessageView.addView(r7.closePinned, LayoutHelper.createFrame(48, 48, 53));
            r7.closePinned.setOnClickListener(/* anonymous class already generated */);
        }
        r7.reportSpamView = new LinearLayout(context2);
        r7.reportSpamView.setTag(Integer.valueOf(1));
        r7.reportSpamView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
        r7.reportSpamView.setVisibility(8);
        r7.reportSpamView.setBackgroundResource(R.drawable.blockpanel);
        r7.reportSpamView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), Mode.MULTIPLY));
        r7.contentView.addView(r7.reportSpamView, LayoutHelper.createFrame(-1, 50, 51));
        r7.addToContactsButton = new TextView(context2);
        r7.addToContactsButton.setTextColor(Theme.getColor(Theme.key_chat_addContact));
        r7.addToContactsButton.setVisibility(8);
        r7.addToContactsButton.setTextSize(1, 14.0f);
        r7.addToContactsButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.addToContactsButton.setSingleLine(true);
        r7.addToContactsButton.setMaxLines(1);
        r7.addToContactsButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
        r7.addToContactsButton.setGravity(17);
        r7.addToContactsButton.setText(LocaleController.getString("AddContactChat", R.string.AddContactChat));
        r7.reportSpamView.addView(r7.addToContactsButton, LayoutHelper.createLinear(-1, -1, 0.5f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
        r7.addToContactsButton.setOnClickListener(/* anonymous class already generated */);
        r7.reportSpamContainer = new FrameLayout(context2);
        r7.reportSpamView.addView(r7.reportSpamContainer, LayoutHelper.createLinear(-1, -1, 1.0f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
        r7.reportSpamButton = new TextView(context2);
        r7.reportSpamButton.setTextColor(Theme.getColor(Theme.key_chat_reportSpam));
        r7.reportSpamButton.setTextSize(1, 14.0f);
        r7.reportSpamButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.reportSpamButton.setSingleLine(true);
        r7.reportSpamButton.setMaxLines(1);
        if (r7.currentChat == null) {
            r7.reportSpamButton.setText(LocaleController.getString("ReportSpam", R.string.ReportSpam));
        } else {
            r7.reportSpamButton.setText(LocaleController.getString("ReportSpamAndLeave", R.string.ReportSpamAndLeave));
        }
        r7.reportSpamButton.setGravity(17);
        r7.reportSpamButton.setPadding(AndroidUtilities.dp(50.0f), 0, AndroidUtilities.dp(50.0f), 0);
        r7.reportSpamContainer.addView(r7.reportSpamButton, LayoutHelper.createFrame(-1, -1, 51));
        r7.reportSpamButton.setOnClickListener(/* anonymous class already generated */);
        r7.closeReportSpam = new ImageView(context2);
        r7.closeReportSpam.setImageResource(R.drawable.miniplayer_close);
        r7.closeReportSpam.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelClose), Mode.MULTIPLY));
        r7.closeReportSpam.setScaleType(ScaleType.CENTER);
        r7.reportSpamContainer.addView(r7.closeReportSpam, LayoutHelper.createFrame(48, 48, 53));
        r7.closeReportSpam.setOnClickListener(/* anonymous class already generated */);
        r7.alertView = new FrameLayout(context2);
        r7.alertView.setTag(Integer.valueOf(1));
        r7.alertView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
        r7.alertView.setVisibility(8);
        r7.alertView.setBackgroundResource(R.drawable.blockpanel);
        r7.alertView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_topPanelBackground), Mode.MULTIPLY));
        r7.contentView.addView(r7.alertView, LayoutHelper.createFrame(-1, 50, 51));
        r7.alertNameTextView = new TextView(context2);
        r7.alertNameTextView.setTextSize(1, 14.0f);
        r7.alertNameTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelTitle));
        r7.alertNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.alertNameTextView.setSingleLine(true);
        r7.alertNameTextView.setEllipsize(TruncateAt.END);
        r7.alertNameTextView.setMaxLines(1);
        r7.alertView.addView(r7.alertNameTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 5.0f, 8.0f, 0.0f));
        r7.alertTextView = new TextView(context2);
        r7.alertTextView.setTextSize(1, 14.0f);
        r7.alertTextView.setTextColor(Theme.getColor(Theme.key_chat_topPanelMessage));
        r7.alertTextView.setSingleLine(true);
        r7.alertTextView.setEllipsize(TruncateAt.END);
        r7.alertTextView.setMaxLines(1);
        r7.alertView.addView(r7.alertTextView, LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 23.0f, 8.0f, 0.0f));
        r7.pagedownButton = new FrameLayout(context2);
        r7.pagedownButton.setVisibility(4);
        r7.contentView.addView(r7.pagedownButton, LayoutHelper.createFrame(66, 59.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
        r7.pagedownButton.setOnClickListener(/* anonymous class already generated */);
        r7.mentiondownButton = new FrameLayout(context2);
        r7.mentiondownButton.setVisibility(4);
        r7.contentView.addView(r7.mentiondownButton, LayoutHelper.createFrame(46, 59.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
        r7.mentiondownButton.setOnClickListener(/* anonymous class already generated */);
        r7.mentiondownButton.setOnLongClickListener(/* anonymous class already generated */);
        if (r7.isBroadcast) {
            i2 = 46;
        } else {
            r7.mentionContainer = /* anonymous class already generated */;
            r7.mentionContainer.setVisibility(8);
            r7.mentionContainer.setWillNotDraw(false);
            r7.contentView.addView(r7.mentionContainer, LayoutHelper.createFrame(-1, 110, 83));
            r7.mentionListView = /* anonymous class already generated */;
            r7.mentionListView.setOnTouchListener(/* anonymous class already generated */);
            r7.mentionListView.setTag(Integer.valueOf(2));
            r7.mentionLayoutManager = /* anonymous class already generated */;
            r7.mentionLayoutManager.setOrientation(1);
            r7.mentionGridLayoutManager = /* anonymous class already generated */;
            r7.mentionGridLayoutManager.setSpanSizeLookup(/* anonymous class already generated */);
            r7.mentionListView.addItemDecoration(/* anonymous class already generated */);
            r7.mentionListView.setItemAnimator(null);
            r7.mentionListView.setLayoutAnimation(null);
            r7.mentionListView.setClipToPadding(false);
            r7.mentionListView.setLayoutManager(r7.mentionLayoutManager);
            r7.mentionListView.setOverScrollMode(2);
            r7.mentionContainer.addView(r7.mentionListView, LayoutHelper.createFrame(-1, -1.0f));
            Adapter adapter2 = mentionsAdapter2;
            i2 = 46;
            RecyclerListView recyclerListView22 = r7.mentionListView;
            Adapter mentionsAdapter22 = new MentionsAdapter(context2, false, r7.dialog_id, /* anonymous class already generated */);
            r7.mentionsAdapter = adapter2;
            recyclerListView22.setAdapter(adapter2);
            r7.mentionsAdapter.setBotInfo(r7.botInfo);
            r7.mentionsAdapter.setParentFragment(r7);
            r7.mentionsAdapter.setChatInfo(r7.info);
            if (r7.currentChat == null) {
            }
            r7.mentionsAdapter.setNeedUsernames(r7.currentChat == null);
            mentionsAdapter = r7.mentionsAdapter;
            if (r7.currentEncryptedChat != null) {
                if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) >= i2) {
                    z = false;
                    mentionsAdapter.setNeedBotContext(z);
                    if (r7.currentChat == null) {
                    }
                    r7.mentionsAdapter.setBotsCount(r7.currentChat == null ? r7.botsCount : 1);
                    recyclerListView = r7.mentionListView;
                    anonymousClass38 = /* anonymous class already generated */;
                    r7.mentionsOnItemClickListener = anonymousClass38;
                    recyclerListView.setOnItemClickListener(anonymousClass38);
                    r7.mentionListView.setOnItemLongClickListener(/* anonymous class already generated */);
                    r7.mentionListView.setOnScrollListener(/* anonymous class already generated */);
                }
            }
            z = true;
            mentionsAdapter.setNeedBotContext(z);
            if (r7.currentChat == null) {
            }
            r7.mentionsAdapter.setBotsCount(r7.currentChat == null ? r7.botsCount : 1);
            recyclerListView = r7.mentionListView;
            anonymousClass38 = /* anonymous class already generated */;
            r7.mentionsOnItemClickListener = anonymousClass38;
            recyclerListView.setOnItemClickListener(anonymousClass38);
            r7.mentionListView.setOnItemLongClickListener(/* anonymous class already generated */);
            r7.mentionListView.setOnScrollListener(/* anonymous class already generated */);
        }
        r7.pagedownButtonImage = new ImageView(context2);
        r7.pagedownButtonImage.setImageResource(R.drawable.pagedown);
        r7.pagedownButtonImage.setScaleType(ScaleType.CENTER);
        r7.pagedownButtonImage.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonIcon), Mode.MULTIPLY));
        r7.pagedownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        drawable = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), Theme.getColor(Theme.key_chat_goDownButton));
        shadowDrawable = context.getResources().getDrawable(R.drawable.pagedown_shadow).mutate();
        shadowDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonShadow), Mode.MULTIPLY));
        combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
        combinedDrawable.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        r7.pagedownButtonImage.setBackgroundDrawable(combinedDrawable);
        r7.pagedownButton.addView(r7.pagedownButtonImage, LayoutHelper.createFrame(i2, i2, 81));
        r7.pagedownButtonCounter = new TextView(context2);
        r7.pagedownButtonCounter.setVisibility(4);
        r7.pagedownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.pagedownButtonCounter.setTextSize(1, 13.0f);
        r7.pagedownButtonCounter.setTextColor(Theme.getColor(Theme.key_chat_goDownButtonCounter));
        r7.pagedownButtonCounter.setGravity(17);
        r7.pagedownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), Theme.getColor(Theme.key_chat_goDownButtonCounterBackground)));
        r7.pagedownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
        r7.pagedownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f));
        r7.pagedownButton.addView(r7.pagedownButtonCounter, LayoutHelper.createFrame(-2, edit, 49));
        r7.mentiondownButtonImage = new ImageView(context2);
        r7.mentiondownButtonImage.setImageResource(R.drawable.mentionbutton);
        r7.mentiondownButtonImage.setScaleType(ScaleType.CENTER);
        r7.mentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonIcon), Mode.MULTIPLY));
        r7.mentiondownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        drawable = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), Theme.getColor(Theme.key_chat_goDownButton));
        shadowDrawable = context.getResources().getDrawable(R.drawable.pagedown_shadow).mutate();
        shadowDrawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_goDownButtonShadow), Mode.MULTIPLY));
        combinedDrawable = new CombinedDrawable(shadowDrawable, drawable, 0, 0);
        combinedDrawable.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
        r7.mentiondownButtonImage.setBackgroundDrawable(combinedDrawable);
        r7.mentiondownButton.addView(r7.mentiondownButtonImage, LayoutHelper.createFrame(i2, i2, 83));
        r7.mentiondownButtonCounter = new TextView(context2);
        r7.mentiondownButtonCounter.setVisibility(4);
        r7.mentiondownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.mentiondownButtonCounter.setTextSize(1, 13.0f);
        r7.mentiondownButtonCounter.setTextColor(Theme.getColor(Theme.key_chat_goDownButtonCounter));
        r7.mentiondownButtonCounter.setGravity(17);
        r7.mentiondownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), Theme.getColor(Theme.key_chat_goDownButtonCounterBackground)));
        r7.mentiondownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
        r7.mentiondownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f));
        r7.mentiondownButton.addView(r7.mentiondownButtonCounter, LayoutHelper.createFrame(-2, edit, 49));
        sizeNotifierFrameLayout = r7.contentView;
        fragmentContextView = new FragmentContextView(context2, r7, true);
        r7.fragmentLocationContextView = fragmentContextView;
        sizeNotifierFrameLayout.addView(fragmentContextView, LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
        sizeNotifierFrameLayout = r7.contentView;
        fragmentContextView = new FragmentContextView(context2, r7, false);
        r7.fragmentContextView = fragmentContextView;
        sizeNotifierFrameLayout.addView(fragmentContextView, LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
        r7.fragmentContextView.setAdditionalContextView(r7.fragmentLocationContextView);
        r7.fragmentLocationContextView.setAdditionalContextView(r7.fragmentContextView);
        r7.contentView.addView(r7.actionBar);
        r7.overlayView = new View(context2);
        r7.overlayView.setOnTouchListener(/* anonymous class already generated */);
        r7.contentView.addView(r7.overlayView, LayoutHelper.createFrame(-1, -1, 51));
        r7.overlayView.setVisibility(8);
        r7.instantCameraView = new InstantCameraView(context2, r7);
        r7.contentView.addView(r7.instantCameraView, LayoutHelper.createFrame(-1, -1, 51));
        r7.chatActivityEnterView = new ChatActivityEnterView(getParentActivity(), r7.contentView, r7, true);
        r7.chatActivityEnterView.setDialogId(r7.dialog_id, r7.currentAccount);
        r7.chatActivityEnterView.setId(id_chat_compose_panel);
        r7.chatActivityEnterView.setBotsCount(r7.botsCount, r7.hasBotsCommands);
        chatActivityEnterView = r7.chatActivityEnterView;
        if (r7.currentEncryptedChat != null) {
            if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) >= edit) {
                z2 = false;
                if (r7.currentEncryptedChat != null) {
                    if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) < i2) {
                        z3 = false;
                        chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                        r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                        r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
                        replyLayout = /* anonymous class already generated */;
                        r7.chatActivityEnterView.addTopView(replyLayout, 48);
                        replyLayout.setOnClickListener(/* anonymous class already generated */);
                        r7.replyLineView = new View(context2);
                        r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                        replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                        r7.replyIconImageView = new ImageView(context2);
                        r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                        r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                        replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                        r7.replyCloseImageView = new ImageView(context2);
                        r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                        r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                        r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                        replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                        r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
                        r7.replyNameTextView = new SimpleTextView(context2);
                        r7.replyNameTextView.setTextSize(14);
                        r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                        r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                        r7.replyObjectTextView = new SimpleTextView(context2);
                        r7.replyObjectTextView.setTextSize(14);
                        r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                        replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                        r7.replyImageView = new BackupImageView(context2);
                        replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                        r7.stickersPanel = new FrameLayout(context2);
                        r7.stickersPanel.setVisibility(8);
                        r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                        stickerPreviewViewerDelegate = /* anonymous class already generated */;
                        r7.stickersListView = /* anonymous class already generated */;
                        r7.stickersListView.setTag(Integer.valueOf(3));
                        r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
                        r7.stickersListView.setDisallowInterceptTouchEvents(true);
                        layoutManager = new LinearLayoutManager(context2);
                        layoutManager.setOrientation(0);
                        r7.stickersListView.setLayoutManager(layoutManager);
                        r7.stickersListView.setClipToPadding(false);
                        r7.stickersListView.setOverScrollMode(2);
                        r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                        initStickers();
                        r7.stickersPanelArrow = new ImageView(context2);
                        r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                        r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                        r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchContainer = /* anonymous class already generated */;
                        r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
                        r7.searchContainer.setWillNotDraw(false);
                        r7.searchContainer.setVisibility(4);
                        r7.searchContainer.setFocusable(true);
                        r7.searchContainer.setFocusableInTouchMode(true);
                        r7.searchContainer.setClickable(true);
                        r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                        r7.searchUpButton = new ImageView(context2);
                        r7.searchUpButton.setScaleType(ScaleType.CENTER);
                        r7.searchUpButton.setImageResource(R.drawable.search_up);
                        r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                        r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchDownButton = new ImageView(context2);
                        r7.searchDownButton.setScaleType(ScaleType.CENTER);
                        r7.searchDownButton.setImageResource(R.drawable.search_down);
                        r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchUserButton = new ImageView(context2);
                        r7.searchUserButton.setScaleType(ScaleType.CENTER);
                        r7.searchUserButton.setImageResource(R.drawable.usersearch);
                        r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                        r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchCalendarButton = new ImageView(context2);
                        r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                        r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                        r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                        r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                        r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
                        r7.searchCountText = new SimpleTextView(context2);
                        r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                        r7.searchCountText.setTextSize(15);
                        r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        r7.searchCountText.setGravity(5);
                        r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                        r7.bottomOverlay = /* anonymous class already generated */;
                        r7.bottomOverlay.setWillNotDraw(false);
                        r7.bottomOverlay.setVisibility(4);
                        r7.bottomOverlay.setFocusable(true);
                        r7.bottomOverlay.setFocusableInTouchMode(true);
                        r7.bottomOverlay.setClickable(true);
                        r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                        r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                        r7.bottomOverlayText = new TextView(context2);
                        r7.bottomOverlayText.setTextSize(1, 14.0f);
                        r7.bottomOverlayText.setGravity(17);
                        r7.bottomOverlayText.setMaxLines(2);
                        r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                        r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                        r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                        r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                        r7.bottomOverlayChat = /* anonymous class already generated */;
                        r7.bottomOverlayChat.setWillNotDraw(false);
                        r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                        r7.bottomOverlayChat.setVisibility(4);
                        r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                        r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
                        r7.bottomOverlayChatText = new TextView(context2);
                        r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                        r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                        r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                        r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                        r7.chatAdapter.updateRows();
                        if (r7.loading) {
                        }
                        r7.progressView.setVisibility(4);
                        r7.chatListView.setEmptyView(r7.emptyViewContainer);
                        checkBotKeyboard();
                        updateContactStatus();
                        updateBottomOverlay();
                        updateSecretStatus();
                        updateSpamView();
                        updatePinnedMessageView(true);
                        MediaController.getInstance().setFlagSecure(r7, true);
                        oldMessage2 = oldMessage3;
                        if (oldMessage2 != null) {
                            r7.chatActivityEnterView.setFieldText(oldMessage2);
                        }
                        fixLayoutInternal();
                        return r7.fragmentView;
                    }
                }
                z3 = true;
                chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
                replyLayout = /* anonymous class already generated */;
                r7.chatActivityEnterView.addTopView(replyLayout, 48);
                replyLayout.setOnClickListener(/* anonymous class already generated */);
                r7.replyLineView = new View(context2);
                r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                r7.replyIconImageView = new ImageView(context2);
                r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                r7.replyCloseImageView = new ImageView(context2);
                r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
                r7.replyNameTextView = new SimpleTextView(context2);
                r7.replyNameTextView.setTextSize(14);
                r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                r7.replyObjectTextView = new SimpleTextView(context2);
                r7.replyObjectTextView.setTextSize(14);
                r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                r7.replyImageView = new BackupImageView(context2);
                replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                r7.stickersPanel = new FrameLayout(context2);
                r7.stickersPanel.setVisibility(8);
                r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                stickerPreviewViewerDelegate = /* anonymous class already generated */;
                r7.stickersListView = /* anonymous class already generated */;
                r7.stickersListView.setTag(Integer.valueOf(3));
                r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
                r7.stickersListView.setDisallowInterceptTouchEvents(true);
                layoutManager = new LinearLayoutManager(context2);
                layoutManager.setOrientation(0);
                r7.stickersListView.setLayoutManager(layoutManager);
                r7.stickersListView.setClipToPadding(false);
                r7.stickersListView.setOverScrollMode(2);
                r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                initStickers();
                r7.stickersPanelArrow = new ImageView(context2);
                r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                r7.searchContainer = /* anonymous class already generated */;
                r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
                r7.searchContainer.setWillNotDraw(false);
                r7.searchContainer.setVisibility(4);
                r7.searchContainer.setFocusable(true);
                r7.searchContainer.setFocusableInTouchMode(true);
                r7.searchContainer.setClickable(true);
                r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                r7.searchUpButton = new ImageView(context2);
                r7.searchUpButton.setScaleType(ScaleType.CENTER);
                r7.searchUpButton.setImageResource(R.drawable.search_up);
                r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchDownButton = new ImageView(context2);
                r7.searchDownButton.setScaleType(ScaleType.CENTER);
                r7.searchDownButton.setImageResource(R.drawable.search_down);
                r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchUserButton = new ImageView(context2);
                r7.searchUserButton.setScaleType(ScaleType.CENTER);
                r7.searchUserButton.setImageResource(R.drawable.usersearch);
                r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchCalendarButton = new ImageView(context2);
                r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchCountText = new SimpleTextView(context2);
                r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                r7.searchCountText.setTextSize(15);
                r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.searchCountText.setGravity(5);
                r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                r7.bottomOverlay = /* anonymous class already generated */;
                r7.bottomOverlay.setWillNotDraw(false);
                r7.bottomOverlay.setVisibility(4);
                r7.bottomOverlay.setFocusable(true);
                r7.bottomOverlay.setFocusableInTouchMode(true);
                r7.bottomOverlay.setClickable(true);
                r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                r7.bottomOverlayText = new TextView(context2);
                r7.bottomOverlayText.setTextSize(1, 14.0f);
                r7.bottomOverlayText.setGravity(17);
                r7.bottomOverlayText.setMaxLines(2);
                r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                r7.bottomOverlayChat = /* anonymous class already generated */;
                r7.bottomOverlayChat.setWillNotDraw(false);
                r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                r7.bottomOverlayChat.setVisibility(4);
                r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
                r7.bottomOverlayChatText = new TextView(context2);
                r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                r7.chatAdapter.updateRows();
                if (r7.loading) {
                }
                r7.progressView.setVisibility(4);
                r7.chatListView.setEmptyView(r7.emptyViewContainer);
                checkBotKeyboard();
                updateContactStatus();
                updateBottomOverlay();
                updateSecretStatus();
                updateSpamView();
                updatePinnedMessageView(true);
                MediaController.getInstance().setFlagSecure(r7, true);
                oldMessage2 = oldMessage3;
                if (oldMessage2 != null) {
                    r7.chatActivityEnterView.setFieldText(oldMessage2);
                }
                fixLayoutInternal();
                return r7.fragmentView;
            }
        }
        z2 = true;
        if (r7.currentEncryptedChat != null) {
            if (AndroidUtilities.getPeerLayerVersion(r7.currentEncryptedChat.layer) < i2) {
                z3 = false;
                chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
                r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
                r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
                replyLayout = /* anonymous class already generated */;
                r7.chatActivityEnterView.addTopView(replyLayout, 48);
                replyLayout.setOnClickListener(/* anonymous class already generated */);
                r7.replyLineView = new View(context2);
                r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
                replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
                r7.replyIconImageView = new ImageView(context2);
                r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
                r7.replyIconImageView.setScaleType(ScaleType.CENTER);
                replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
                r7.replyCloseImageView = new ImageView(context2);
                r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
                r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
                r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
                replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
                r7.replyNameTextView = new SimpleTextView(context2);
                r7.replyNameTextView.setTextSize(14);
                r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
                r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                r7.replyObjectTextView = new SimpleTextView(context2);
                r7.replyObjectTextView.setTextSize(14);
                r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
                replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                r7.replyImageView = new BackupImageView(context2);
                replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                r7.stickersPanel = new FrameLayout(context2);
                r7.stickersPanel.setVisibility(8);
                r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                stickerPreviewViewerDelegate = /* anonymous class already generated */;
                r7.stickersListView = /* anonymous class already generated */;
                r7.stickersListView.setTag(Integer.valueOf(3));
                r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
                r7.stickersListView.setDisallowInterceptTouchEvents(true);
                layoutManager = new LinearLayoutManager(context2);
                layoutManager.setOrientation(0);
                r7.stickersListView.setLayoutManager(layoutManager);
                r7.stickersListView.setClipToPadding(false);
                r7.stickersListView.setOverScrollMode(2);
                r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
                initStickers();
                r7.stickersPanelArrow = new ImageView(context2);
                r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
                r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
                r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
                r7.searchContainer = /* anonymous class already generated */;
                r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
                r7.searchContainer.setWillNotDraw(false);
                r7.searchContainer.setVisibility(4);
                r7.searchContainer.setFocusable(true);
                r7.searchContainer.setFocusableInTouchMode(true);
                r7.searchContainer.setClickable(true);
                r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                r7.searchUpButton = new ImageView(context2);
                r7.searchUpButton.setScaleType(ScaleType.CENTER);
                r7.searchUpButton.setImageResource(R.drawable.search_up);
                r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchDownButton = new ImageView(context2);
                r7.searchDownButton.setScaleType(ScaleType.CENTER);
                r7.searchDownButton.setImageResource(R.drawable.search_down);
                r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchUserButton = new ImageView(context2);
                r7.searchUserButton.setScaleType(ScaleType.CENTER);
                r7.searchUserButton.setImageResource(R.drawable.usersearch);
                r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchCalendarButton = new ImageView(context2);
                r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
                r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
                r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
                r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
                r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
                r7.searchCountText = new SimpleTextView(context2);
                r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
                r7.searchCountText.setTextSize(15);
                r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.searchCountText.setGravity(5);
                r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                r7.bottomOverlay = /* anonymous class already generated */;
                r7.bottomOverlay.setWillNotDraw(false);
                r7.bottomOverlay.setVisibility(4);
                r7.bottomOverlay.setFocusable(true);
                r7.bottomOverlay.setFocusableInTouchMode(true);
                r7.bottomOverlay.setClickable(true);
                r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
                r7.bottomOverlayText = new TextView(context2);
                r7.bottomOverlayText.setTextSize(1, 14.0f);
                r7.bottomOverlayText.setGravity(17);
                r7.bottomOverlayText.setMaxLines(2);
                r7.bottomOverlayText.setEllipsize(TruncateAt.END);
                r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
                r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
                r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                r7.bottomOverlayChat = /* anonymous class already generated */;
                r7.bottomOverlayChat.setWillNotDraw(false);
                r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                r7.bottomOverlayChat.setVisibility(4);
                r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
                r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
                r7.bottomOverlayChatText = new TextView(context2);
                r7.bottomOverlayChatText.setTextSize(1, 15.0f);
                r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
                r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
                r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
                r7.chatAdapter.updateRows();
                if (r7.loading) {
                }
                r7.progressView.setVisibility(4);
                r7.chatListView.setEmptyView(r7.emptyViewContainer);
                checkBotKeyboard();
                updateContactStatus();
                updateBottomOverlay();
                updateSecretStatus();
                updateSpamView();
                updatePinnedMessageView(true);
                MediaController.getInstance().setFlagSecure(r7, true);
                oldMessage2 = oldMessage3;
                if (oldMessage2 != null) {
                    r7.chatActivityEnterView.setFieldText(oldMessage2);
                }
                fixLayoutInternal();
                return r7.fragmentView;
            }
        }
        z3 = true;
        chatActivityEnterView.setAllowStickersAndGifs(z2, z3);
        r7.contentView.addView(r7.chatActivityEnterView, r7.contentView.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
        r7.chatActivityEnterView.setDelegate(/* anonymous class already generated */);
        replyLayout = /* anonymous class already generated */;
        r7.chatActivityEnterView.addTopView(replyLayout, 48);
        replyLayout.setOnClickListener(/* anonymous class already generated */);
        r7.replyLineView = new View(context2);
        r7.replyLineView.setBackgroundColor(Theme.getColor(Theme.key_chat_replyPanelLine));
        replyLayout.addView(r7.replyLineView, LayoutHelper.createFrame(-1, 1, 83));
        r7.replyIconImageView = new ImageView(context2);
        r7.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelIcons), Mode.MULTIPLY));
        r7.replyIconImageView.setScaleType(ScaleType.CENTER);
        replyLayout.addView(r7.replyIconImageView, LayoutHelper.createFrame(52, i2, 51));
        r7.replyCloseImageView = new ImageView(context2);
        r7.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_replyPanelClose), Mode.MULTIPLY));
        r7.replyCloseImageView.setImageResource(R.drawable.msg_panel_clear);
        r7.replyCloseImageView.setScaleType(ScaleType.CENTER);
        replyLayout.addView(r7.replyCloseImageView, LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
        r7.replyCloseImageView.setOnClickListener(/* anonymous class already generated */);
        r7.replyNameTextView = new SimpleTextView(context2);
        r7.replyNameTextView.setTextSize(14);
        r7.replyNameTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelName));
        r7.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        replyLayout.addView(r7.replyNameTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
        r7.replyObjectTextView = new SimpleTextView(context2);
        r7.replyObjectTextView.setTextSize(14);
        r7.replyObjectTextView.setTextColor(Theme.getColor(Theme.key_chat_replyPanelMessage));
        replyLayout.addView(r7.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
        r7.replyImageView = new BackupImageView(context2);
        replyLayout.addView(r7.replyImageView, LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
        r7.stickersPanel = new FrameLayout(context2);
        r7.stickersPanel.setVisibility(8);
        r7.contentView.addView(r7.stickersPanel, LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
        stickerPreviewViewerDelegate = /* anonymous class already generated */;
        r7.stickersListView = /* anonymous class already generated */;
        r7.stickersListView.setTag(Integer.valueOf(3));
        r7.stickersListView.setOnTouchListener(/* anonymous class already generated */);
        r7.stickersListView.setDisallowInterceptTouchEvents(true);
        layoutManager = new LinearLayoutManager(context2);
        layoutManager.setOrientation(0);
        r7.stickersListView.setLayoutManager(layoutManager);
        r7.stickersListView.setClipToPadding(false);
        r7.stickersListView.setOverScrollMode(2);
        r7.stickersPanel.addView(r7.stickersListView, LayoutHelper.createFrame(-1, 78.0f));
        initStickers();
        r7.stickersPanelArrow = new ImageView(context2);
        r7.stickersPanelArrow.setImageResource(R.drawable.stickers_back_arrow);
        r7.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel), Mode.MULTIPLY));
        r7.stickersPanel.addView(r7.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 0.0f, 0.0f));
        r7.searchContainer = /* anonymous class already generated */;
        r7.searchContainer.setOnTouchListener(/* anonymous class already generated */);
        r7.searchContainer.setWillNotDraw(false);
        r7.searchContainer.setVisibility(4);
        r7.searchContainer.setFocusable(true);
        r7.searchContainer.setFocusableInTouchMode(true);
        r7.searchContainer.setClickable(true);
        r7.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
        r7.searchUpButton = new ImageView(context2);
        r7.searchUpButton.setScaleType(ScaleType.CENTER);
        r7.searchUpButton.setImageResource(R.drawable.search_up);
        r7.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
        r7.searchContainer.addView(r7.searchUpButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
        r7.searchUpButton.setOnClickListener(/* anonymous class already generated */);
        r7.searchDownButton = new ImageView(context2);
        r7.searchDownButton.setScaleType(ScaleType.CENTER);
        r7.searchDownButton.setImageResource(R.drawable.search_down);
        r7.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
        r7.searchContainer.addView(r7.searchDownButton, LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
        r7.searchDownButton.setOnClickListener(/* anonymous class already generated */);
        r7.searchUserButton = new ImageView(context2);
        r7.searchUserButton.setScaleType(ScaleType.CENTER);
        r7.searchUserButton.setImageResource(R.drawable.usersearch);
        r7.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
        r7.searchContainer.addView(r7.searchUserButton, LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
        r7.searchUserButton.setOnClickListener(/* anonymous class already generated */);
        r7.searchCalendarButton = new ImageView(context2);
        r7.searchCalendarButton.setScaleType(ScaleType.CENTER);
        r7.searchCalendarButton.setImageResource(R.drawable.search_calendar);
        r7.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_searchPanelIcons), Mode.MULTIPLY));
        r7.searchContainer.addView(r7.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
        r7.searchCalendarButton.setOnClickListener(/* anonymous class already generated */);
        r7.searchCountText = new SimpleTextView(context2);
        r7.searchCountText.setTextColor(Theme.getColor(Theme.key_chat_searchPanelText));
        r7.searchCountText.setTextSize(15);
        r7.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.searchCountText.setGravity(5);
        r7.searchContainer.addView(r7.searchCountText, LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
        r7.bottomOverlay = /* anonymous class already generated */;
        r7.bottomOverlay.setWillNotDraw(false);
        r7.bottomOverlay.setVisibility(4);
        r7.bottomOverlay.setFocusable(true);
        r7.bottomOverlay.setFocusableInTouchMode(true);
        r7.bottomOverlay.setClickable(true);
        r7.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
        r7.contentView.addView(r7.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
        r7.bottomOverlayText = new TextView(context2);
        r7.bottomOverlayText.setTextSize(1, 14.0f);
        r7.bottomOverlayText.setGravity(17);
        r7.bottomOverlayText.setMaxLines(2);
        r7.bottomOverlayText.setEllipsize(TruncateAt.END);
        r7.bottomOverlayText.setLineSpacing((float) AndroidUtilities.dp(2.0f), 1.0f);
        r7.bottomOverlayText.setTextColor(Theme.getColor(Theme.key_chat_secretChatStatusText));
        r7.bottomOverlay.addView(r7.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
        r7.bottomOverlayChat = /* anonymous class already generated */;
        r7.bottomOverlayChat.setWillNotDraw(false);
        r7.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
        r7.bottomOverlayChat.setVisibility(4);
        r7.contentView.addView(r7.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
        r7.bottomOverlayChat.setOnClickListener(/* anonymous class already generated */);
        r7.bottomOverlayChatText = new TextView(context2);
        r7.bottomOverlayChatText.setTextSize(1, 15.0f);
        r7.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        r7.bottomOverlayChatText.setTextColor(Theme.getColor(Theme.key_chat_fieldOverlayText));
        r7.bottomOverlayChat.addView(r7.bottomOverlayChatText, LayoutHelper.createFrame(-2, -2, 17));
        r7.contentView.addView(r7.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
        r7.chatAdapter.updateRows();
        if (r7.loading) {
        }
        r7.progressView.setVisibility(4);
        r7.chatListView.setEmptyView(r7.emptyViewContainer);
        checkBotKeyboard();
        updateContactStatus();
        updateBottomOverlay();
        updateSecretStatus();
        updateSpamView();
        updatePinnedMessageView(true);
        try {
            MediaController.getInstance().setFlagSecure(r7, true);
        } catch (Throwable th) {
            FileLog.e(th);
        }
        oldMessage2 = oldMessage3;
        if (oldMessage2 != null) {
            r7.chatActivityEnterView.setFieldText(oldMessage2);
        }
        fixLayoutInternal();
        return r7.fragmentView;
    }

    private TextureView createTextureView(boolean add) {
        if (this.parentLayout == null) {
            return null;
        }
        if (this.roundVideoContainer == null) {
            if (VERSION.SDK_INT >= 21) {
                this.roundVideoContainer = new FrameLayout(getParentActivity()) {
                    public void setTranslationY(float translationY) {
                        super.setTranslationY(translationY);
                        ChatActivity.this.contentView.invalidate();
                    }
                };
                this.roundVideoContainer.setOutlineProvider(new ViewOutlineProvider() {
                    @TargetApi(21)
                    public void getOutline(View view, Outline outline) {
                        outline.setOval(0, 0, AndroidUtilities.roundMessageSize, AndroidUtilities.roundMessageSize);
                    }
                });
                this.roundVideoContainer.setClipToOutline(true);
            } else {
                this.roundVideoContainer = new FrameLayout(getParentActivity()) {
                    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
                        super.onSizeChanged(w, h, oldw, oldh);
                        ChatActivity.this.aspectPath.reset();
                        ChatActivity.this.aspectPath.addCircle((float) (w / 2), (float) (h / 2), (float) (w / 2), Direction.CW);
                        ChatActivity.this.aspectPath.toggleInverseFillType();
                    }

                    public void setTranslationY(float translationY) {
                        super.setTranslationY(translationY);
                        ChatActivity.this.contentView.invalidate();
                    }

                    public void setVisibility(int visibility) {
                        super.setVisibility(visibility);
                        if (visibility == 0) {
                            setLayerType(2, null);
                        }
                    }

                    protected void dispatchDraw(Canvas canvas) {
                        super.dispatchDraw(canvas);
                        canvas.drawPath(ChatActivity.this.aspectPath, ChatActivity.this.aspectPaint);
                    }
                };
                this.aspectPath = new Path();
                this.aspectPaint = new Paint(1);
                this.aspectPaint.setColor(Theme.ACTION_BAR_VIDEO_EDIT_COLOR);
                this.aspectPaint.setXfermode(new PorterDuffXfermode(Mode.CLEAR));
            }
            this.roundVideoContainer.setWillNotDraw(false);
            this.roundVideoContainer.setVisibility(4);
            this.aspectRatioFrameLayout = new AspectRatioFrameLayout(getParentActivity());
            this.aspectRatioFrameLayout.setBackgroundColor(0);
            if (add) {
                this.roundVideoContainer.addView(this.aspectRatioFrameLayout, LayoutHelper.createFrame(-1, -1.0f));
            }
            this.videoTextureView = new TextureView(getParentActivity());
            this.videoTextureView.setOpaque(false);
            this.aspectRatioFrameLayout.addView(this.videoTextureView, LayoutHelper.createFrame(-1, -1.0f));
        }
        ViewGroup parent = (ViewGroup) this.roundVideoContainer.getParent();
        if (!(parent == null || parent == this.contentView)) {
            parent.removeView(this.roundVideoContainer);
            parent = null;
        }
        if (parent == null) {
            this.contentView.addView(this.roundVideoContainer, 1, new FrameLayout.LayoutParams(AndroidUtilities.roundMessageSize, AndroidUtilities.roundMessageSize));
        }
        this.roundVideoContainer.setVisibility(4);
        this.aspectRatioFrameLayout.setDrawingReady(false);
        return this.videoTextureView;
    }

    private void destroyTextureView() {
        if (this.roundVideoContainer != null) {
            if (this.roundVideoContainer.getParent() != null) {
                this.contentView.removeView(this.roundVideoContainer);
                this.aspectRatioFrameLayout.setDrawingReady(false);
                this.roundVideoContainer.setVisibility(4);
                if (VERSION.SDK_INT < 21) {
                    this.roundVideoContainer.setLayerType(0, null);
                }
            }
        }
    }

    private void sendBotInlineResult(BotInlineResult result) {
        int uid = this.mentionsAdapter.getContextBotId();
        HashMap<String, String> params = new HashMap();
        params.put(TtmlNode.ATTR_ID, result.id);
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(TtmlNode.ANONYMOUS_REGION_ID);
        stringBuilder.append(result.query_id);
        params.put("query_id", stringBuilder.toString());
        stringBuilder = new StringBuilder();
        stringBuilder.append(TtmlNode.ANONYMOUS_REGION_ID);
        stringBuilder.append(uid);
        params.put("bot", stringBuilder.toString());
        params.put("bot_name", this.mentionsAdapter.getContextBotName());
        SendMessagesHelper.prepareSendingBotContextResult(result, params, this.dialog_id, this.replyingMessageObject);
        this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
        showReplyPanel(false, null, null, null, false);
        DataQuery.getInstance(this.currentAccount).increaseInlineRaiting(uid);
    }

    private void mentionListViewUpdateLayout() {
        if (this.mentionListView.getChildCount() <= 0) {
            this.mentionListViewScrollOffsetY = 0;
            this.mentionListViewLastViewPosition = -1;
            return;
        }
        View child = this.mentionListView.getChildAt(this.mentionListView.getChildCount() - 1);
        Holder holder = (Holder) this.mentionListView.findContainingViewHolder(child);
        Holder holder2;
        RecyclerListView recyclerListView;
        if (this.mentionLayoutManager.getReverseLayout()) {
            if (holder != null) {
                this.mentionListViewLastViewPosition = holder.getAdapterPosition();
                this.mentionListViewLastViewTop = child.getBottom();
            } else {
                this.mentionListViewLastViewPosition = -1;
            }
            child = this.mentionListView.getChildAt(0);
            holder2 = (Holder) this.mentionListView.findContainingViewHolder(child);
            holder = (child.getBottom() >= this.mentionListView.getMeasuredHeight() || holder2 == null || holder2.getAdapterPosition() != null) ? this.mentionListView.getMeasuredHeight() : child.getBottom();
            if (this.mentionListViewScrollOffsetY != holder) {
                recyclerListView = this.mentionListView;
                this.mentionListViewScrollOffsetY = holder;
                recyclerListView.setBottomGlowOffset(holder);
                this.mentionListView.setTopGlowOffset(0);
                this.mentionListView.invalidate();
                this.mentionContainer.invalidate();
            }
        } else {
            if (holder != null) {
                this.mentionListViewLastViewPosition = holder.getAdapterPosition();
                this.mentionListViewLastViewTop = child.getTop();
            } else {
                this.mentionListViewLastViewPosition = -1;
            }
            child = this.mentionListView.getChildAt(0);
            holder2 = (Holder) this.mentionListView.findContainingViewHolder(child);
            int newOffset = (child.getTop() <= 0 || holder2 == null || holder2.getAdapterPosition() != 0) ? 0 : child.getTop();
            if (this.mentionListViewScrollOffsetY != newOffset) {
                recyclerListView = this.mentionListView;
                this.mentionListViewScrollOffsetY = newOffset;
                recyclerListView.setTopGlowOffset(newOffset);
                this.mentionListView.setBottomGlowOffset(0);
                this.mentionListView.invalidate();
                this.mentionContainer.invalidate();
            }
        }
    }

    private void checkBotCommands() {
        boolean a = false;
        URLSpanBotCommand.enabled = false;
        if (this.currentUser != null && this.currentUser.bot) {
            URLSpanBotCommand.enabled = true;
        } else if (this.info instanceof TL_chatFull) {
            int a2;
            while (a2 < this.info.participants.participants.size()) {
                User user = MessagesController.getInstance(this.currentAccount).getUser(Integer.valueOf(((ChatParticipant) this.info.participants.participants.get(a2)).user_id));
                if (user == null || !user.bot) {
                    a2++;
                } else {
                    URLSpanBotCommand.enabled = true;
                    return;
                }
            }
        } else if (this.info instanceof TL_channelFull) {
            if (!(this.info.bot_info.isEmpty() || this.currentChat == null || !this.currentChat.megagroup)) {
                a = true;
            }
            URLSpanBotCommand.enabled = a;
        }
    }

    private GroupedMessages getValidGroupedMessage(MessageObject message) {
        if (message.getGroupId() == 0) {
            return null;
        }
        GroupedMessages groupedMessages = (GroupedMessages) this.groupedMessagesMap.get(message.getGroupId());
        if (groupedMessages == null) {
            return groupedMessages;
        }
        if (groupedMessages.messages.size() <= 1 || groupedMessages.positions.get(message) == null) {
            return null;
        }
        return groupedMessages;
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void jumpToDate(int r21) {
        /*
        r20 = this;
        r6 = r20;
        r15 = r21;
        r0 = r6.messages;
        r0 = r0.isEmpty();
        if (r0 == 0) goto L_0x000d;
    L_0x000c:
        return;
    L_0x000d:
        r0 = r6.messages;
        r1 = 0;
        r0 = r0.get(r1);
        r14 = r0;
        r14 = (org.telegram.messenger.MessageObject) r14;
        r0 = r6.messages;
        r2 = r6.messages;
        r2 = r2.size();
        r3 = 1;
        r2 = r2 - r3;
        r0 = r0.get(r2);
        r13 = r0;
        r13 = (org.telegram.messenger.MessageObject) r13;
        r0 = r14.messageOwner;
        r0 = r0.date;
        if (r0 < r15) goto L_0x0077;
    L_0x002e:
        r0 = r13.messageOwner;
        r0 = r0.date;
        if (r0 > r15) goto L_0x0077;
    L_0x0034:
        r0 = r6.messages;
        r0 = r0.size();
        r0 = r0 - r3;
    L_0x003b:
        r7 = r0;
        if (r7 < 0) goto L_0x0074;
    L_0x003e:
        r0 = r6.messages;
        r0 = r0.get(r7);
        r8 = r0;
        r8 = (org.telegram.messenger.MessageObject) r8;
        r0 = r8.messageOwner;
        r0 = r0.date;
        if (r0 < r15) goto L_0x0071;
    L_0x004d:
        r0 = r8.getId();
        if (r0 == 0) goto L_0x0071;
    L_0x0053:
        r2 = r8.getId();
        r4 = 0;
        r5 = 0;
        r9 = r8.getDialogId();
        r11 = r6.mergeDialogId;
        r0 = (r9 > r11 ? 1 : (r9 == r11 ? 0 : -1));
        if (r0 != 0) goto L_0x0065;
    L_0x0063:
        r9 = r3;
        goto L_0x0066;
    L_0x0065:
        r9 = r1;
    L_0x0066:
        r10 = 0;
        r0 = r6;
        r1 = r2;
        r2 = r4;
        r3 = r5;
        r4 = r9;
        r5 = r10;
        r0.scrollToMessageId(r1, r2, r3, r4, r5);
        goto L_0x0074;
    L_0x0071:
        r0 = r7 + -1;
        goto L_0x003b;
    L_0x0074:
        r4 = r13;
        r0 = r14;
        goto L_0x00c3;
    L_0x0077:
        r0 = r6.dialog_id;
        r0 = (int) r0;
        if (r0 == 0) goto L_0x00c1;
    L_0x007c:
        r20.clearChatData();
        r0 = r6.waitingForLoad;
        r1 = r6.lastLoadIndex;
        r1 = java.lang.Integer.valueOf(r1);
        r0.add(r1);
        r0 = r6.currentAccount;
        r7 = org.telegram.messenger.MessagesController.getInstance(r0);
        r8 = r6.dialog_id;
        r10 = 30;
        r11 = 0;
        r0 = 1;
        r1 = 0;
        r2 = r6.classGuid;
        r16 = 4;
        r17 = 0;
        r3 = r6.currentChat;
        r18 = org.telegram.messenger.ChatObject.isChannel(r3);
        r3 = r6.lastLoadIndex;
        r4 = r3 + 1;
        r6.lastLoadIndex = r4;
        r12 = r15;
        r4 = r13;
        r13 = r0;
        r0 = r14;
        r14 = r1;
        r15 = r2;
        r19 = r3;
        r7.loadMessages(r8, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19);
        r1 = r6.floatingDateView;
        r2 = 0;
        r1.setAlpha(r2);
        r1 = r6.floatingDateView;
        r2 = 0;
        r1.setTag(r2);
        goto L_0x00c3;
    L_0x00c1:
        r4 = r13;
        r0 = r14;
    L_0x00c3:
        return;
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.jumpToDate(int):void");
    }

    public void processInlineBotContextPM(TL_inlineBotSwitchPM object) {
        if (object != null) {
            User user = this.mentionsAdapter.getContextBotUser();
            if (user != null) {
                this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
                if (this.dialog_id == ((long) user.id)) {
                    this.inlineReturn = this.dialog_id;
                    MessagesController.getInstance(this.currentAccount).sendBotStart(this.currentUser, object.start_param);
                } else {
                    Bundle args = new Bundle();
                    args.putInt("user_id", user.id);
                    args.putString("inline_query", object.start_param);
                    args.putLong("inline_return", this.dialog_id);
                    if (MessagesController.getInstance(this.currentAccount).checkCanOpenChat(args, this)) {
                        presentFragment(new ChatActivity(args));
                    }
                }
            }
        }
    }

    private void createChatAttachView() {
        if (getParentActivity() != null && this.chatAttachAlert == null) {
            this.chatAttachAlert = new ChatAttachAlert(getParentActivity(), this);
            this.chatAttachAlert.setDelegate(new ChatAttachViewDelegate() {
                public void didPressedButton(int button) {
                    int i = button;
                    if (ChatActivity.this.getParentActivity() != null) {
                        if (ChatActivity.this.chatAttachAlert != null) {
                            if (!(i == 8 || i == 7)) {
                                if (i != 4 || ChatActivity.this.chatAttachAlert.getSelectedPhotos().isEmpty()) {
                                    if (ChatActivity.this.chatAttachAlert != null) {
                                        ChatActivity.this.chatAttachAlert.dismissWithButtonClick(i);
                                    }
                                    ChatActivity.this.processSelectedAttach(i);
                                    return;
                                }
                            }
                            if (i != 8) {
                                ChatActivity.this.chatAttachAlert.dismiss();
                            }
                            HashMap<Object, Object> selectedPhotos = ChatActivity.this.chatAttachAlert.getSelectedPhotos();
                            ArrayList<Object> selectedPhotosOrder = ChatActivity.this.chatAttachAlert.getSelectedPhotosOrder();
                            if (!selectedPhotos.isEmpty()) {
                                ArrayList<SendingMediaInfo> photos = new ArrayList();
                                for (int a = 0; a < selectedPhotosOrder.size(); a++) {
                                    PhotoEntry photoEntry = (PhotoEntry) selectedPhotos.get(selectedPhotosOrder.get(a));
                                    SendingMediaInfo info = new SendingMediaInfo();
                                    if (photoEntry.imagePath != null) {
                                        info.path = photoEntry.imagePath;
                                    } else if (photoEntry.path != null) {
                                        info.path = photoEntry.path;
                                    }
                                    info.isVideo = photoEntry.isVideo;
                                    ArrayList arrayList = null;
                                    info.caption = photoEntry.caption != null ? photoEntry.caption.toString() : null;
                                    info.entities = photoEntry.entities;
                                    if (!photoEntry.stickers.isEmpty()) {
                                        arrayList = new ArrayList(photoEntry.stickers);
                                    }
                                    info.masks = arrayList;
                                    info.ttl = photoEntry.ttl;
                                    info.videoEditedInfo = photoEntry.editedInfo;
                                    photos.add(info);
                                    photoEntry.reset();
                                }
                                SendMessagesHelper.prepareSendingMedia(photos, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, null, i == 4, SharedConfig.groupPhotosEnabled);
                                ChatActivity.this.showReplyPanel(false, null, null, null, false);
                                DataQuery.getInstance(ChatActivity.this.currentAccount).cleanDraft(ChatActivity.this.dialog_id, true);
                            }
                        }
                    }
                }

                public View getRevealView() {
                    return ChatActivity.this.chatActivityEnterView.getAttachButton();
                }

                public void didSelectBot(User user) {
                    if (ChatActivity.this.chatActivityEnterView != null) {
                        if (!TextUtils.isEmpty(user.username)) {
                            ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("@");
                            stringBuilder.append(user.username);
                            stringBuilder.append(" ");
                            chatActivityEnterView.setFieldText(stringBuilder.toString());
                            ChatActivity.this.chatActivityEnterView.openKeyboard();
                        }
                    }
                }

                public void onCameraOpened() {
                    ChatActivity.this.chatActivityEnterView.closeKeyboard();
                }
            });
        }
    }

    public long getDialogId() {
        return this.dialog_id;
    }

    public void setBotUser(String value) {
        if (this.inlineReturn != 0) {
            MessagesController.getInstance(this.currentAccount).sendBotStart(this.currentUser, value);
            return;
        }
        this.botUser = value;
        updateBottomOverlay();
    }

    public boolean playFirstUnreadVoiceMessage() {
        if (this.chatActivityEnterView != null && this.chatActivityEnterView.isRecordingAudioVideo()) {
            return true;
        }
        for (int a = this.messages.size() - 1; a >= 0; a--) {
            MessageObject messageObject = (MessageObject) this.messages.get(a);
            if ((messageObject.isVoice() || messageObject.isRoundVideo()) && messageObject.isContentUnread() && !messageObject.isOut()) {
                MediaController.getInstance().setVoiceMessagesPlaylist(MediaController.getInstance().playMessage(messageObject) ? createVoiceMessagesPlaylist(messageObject, true) : null, true);
                return true;
            }
        }
        if (VERSION.SDK_INT < edit || getParentActivity() == null || getParentActivity().checkSelfPermission("android.permission.RECORD_AUDIO") == 0) {
            return false;
        }
        getParentActivity().requestPermissions(new String[]{"android.permission.RECORD_AUDIO"}, 3);
        return true;
    }

    private void initStickers() {
        if (!(this.chatActivityEnterView == null || getParentActivity() == null || this.stickersAdapter != null)) {
            if (this.currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(this.currentEncryptedChat.layer) >= edit) {
                if (this.stickersAdapter != null) {
                    this.stickersAdapter.onDestroy();
                }
                this.stickersListView.setPadding(AndroidUtilities.dp(18.0f), 0, AndroidUtilities.dp(18.0f), 0);
                RecyclerListView recyclerListView = this.stickersListView;
                Adapter stickersAdapter = new StickersAdapter(getParentActivity(), new StickersAdapterDelegate() {
                    public void needChangePanelVisibility(final boolean show) {
                        if (!(show && ChatActivity.this.stickersPanel.getVisibility() == 0) && (show || ChatActivity.this.stickersPanel.getVisibility() != 8)) {
                            if (show) {
                                ChatActivity.this.stickersListView.scrollToPosition(0);
                                ChatActivity.this.stickersPanel.setVisibility(ChatActivity.this.allowStickersPanel ? 0 : 4);
                            }
                            if (ChatActivity.this.runningAnimation != null) {
                                ChatActivity.this.runningAnimation.cancel();
                                ChatActivity.this.runningAnimation = null;
                            }
                            if (ChatActivity.this.stickersPanel.getVisibility() != 4) {
                                ChatActivity.this.runningAnimation = new AnimatorSet();
                                AnimatorSet access$22500 = ChatActivity.this.runningAnimation;
                                Animator[] animatorArr = new Animator[1];
                                FrameLayout access$18900 = ChatActivity.this.stickersPanel;
                                String str = "alpha";
                                float[] fArr = new float[2];
                                float f = 1.0f;
                                fArr[0] = show ? 0.0f : 1.0f;
                                if (!show) {
                                    f = 0.0f;
                                }
                                fArr[1] = f;
                                animatorArr[0] = ObjectAnimator.ofFloat(access$18900, str, fArr);
                                access$22500.playTogether(animatorArr);
                                ChatActivity.this.runningAnimation.setDuration(150);
                                ChatActivity.this.runningAnimation.addListener(new AnimatorListenerAdapter() {
                                    public void onAnimationEnd(Animator animation) {
                                        if (ChatActivity.this.runningAnimation != null && ChatActivity.this.runningAnimation.equals(animation)) {
                                            if (!show) {
                                                ChatActivity.this.stickersAdapter.clearStickers();
                                                ChatActivity.this.stickersPanel.setVisibility(8);
                                                if (StickerPreviewViewer.getInstance().isVisible()) {
                                                    StickerPreviewViewer.getInstance().close();
                                                }
                                                StickerPreviewViewer.getInstance().reset();
                                            }
                                            ChatActivity.this.runningAnimation = null;
                                        }
                                    }

                                    public void onAnimationCancel(Animator animation) {
                                        if (ChatActivity.this.runningAnimation != null && ChatActivity.this.runningAnimation.equals(animation)) {
                                            ChatActivity.this.runningAnimation = null;
                                        }
                                    }
                                });
                                ChatActivity.this.runningAnimation.start();
                            } else if (!show) {
                                ChatActivity.this.stickersPanel.setVisibility(8);
                            }
                        }
                    }
                });
                this.stickersAdapter = stickersAdapter;
                recyclerListView.setAdapter(stickersAdapter);
                recyclerListView = this.stickersListView;
                OnItemClickListener anonymousClass63 = new OnItemClickListener() {
                    public void onItemClick(View view, int position) {
                        Document document = ChatActivity.this.stickersAdapter.getItem(position);
                        if (document instanceof TL_document) {
                            SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendSticker(document, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject);
                            ChatActivity.this.showReplyPanel(false, null, null, null, false);
                            ChatActivity.this.chatActivityEnterView.addStickerToRecent(document);
                        }
                        ChatActivity.this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
                    }
                };
                this.stickersOnItemClickListener = anonymousClass63;
                recyclerListView.setOnItemClickListener(anonymousClass63);
            }
        }
    }

    public void shareMyContact(final MessageObject messageObject) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
        builder.setTitle(LocaleController.getString("ShareYouPhoneNumberTitle", R.string.ShareYouPhoneNumberTitle));
        if (this.currentUser == null) {
            builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", R.string.AreYouSureShareMyContactInfo));
        } else if (this.currentUser.bot) {
            builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfoBot", R.string.AreYouSureShareMyContactInfoBot));
        } else {
            Object[] objArr = new Object[2];
            PhoneFormat instance = PhoneFormat.getInstance();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("+");
            stringBuilder.append(UserConfig.getInstance(this.currentAccount).getCurrentUser().phone);
            objArr[0] = instance.format(stringBuilder.toString());
            objArr[1] = ContactsController.formatName(this.currentUser.first_name, this.currentUser.last_name);
            builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", R.string.AreYouSureShareMyContactInfoUser, objArr)));
        }
        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialogInterface, int i) {
                SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage(UserConfig.getInstance(ChatActivity.this.currentAccount).getCurrentUser(), ChatActivity.this.dialog_id, messageObject, null, null);
                ChatActivity.this.moveScrollToLastMessage();
                ChatActivity.this.showReplyPanel(false, null, null, null, false);
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
        showDialog(builder.create());
    }

    private void hideVoiceHint() {
        this.voiceHintAnimation = new AnimatorSet();
        AnimatorSet animatorSet = this.voiceHintAnimation;
        Animator[] animatorArr = new Animator[1];
        animatorArr[0] = ObjectAnimator.ofFloat(this.voiceHintTextView, "alpha", new float[]{0.0f});
        animatorSet.playTogether(animatorArr);
        this.voiceHintAnimation.addListener(new AnimatorListenerAdapter() {
            public void onAnimationEnd(Animator animation) {
                if (animation.equals(ChatActivity.this.voiceHintAnimation)) {
                    ChatActivity.this.voiceHintAnimation = null;
                    ChatActivity.this.voiceHintHideRunnable = null;
                    if (ChatActivity.this.voiceHintTextView != null) {
                        ChatActivity.this.voiceHintTextView.setVisibility(8);
                    }
                }
            }

            public void onAnimationCancel(Animator animation) {
                if (animation.equals(ChatActivity.this.voiceHintAnimation)) {
                    ChatActivity.this.voiceHintHideRunnable = null;
                    ChatActivity.this.voiceHintHideRunnable = null;
                }
            }
        });
        this.voiceHintAnimation.setDuration(300);
        this.voiceHintAnimation.start();
    }

    private void showVoiceHint(boolean hide, boolean video) {
        if (!(getParentActivity() == null || this.fragmentView == null)) {
            if (!hide || this.voiceHintTextView != null) {
                if (this.voiceHintTextView == null) {
                    SizeNotifierFrameLayout frameLayout = this.fragmentView;
                    int index = frameLayout.indexOfChild(this.chatActivityEnterView);
                    if (index != -1) {
                        this.voiceHintTextView = new TextView(getParentActivity());
                        this.voiceHintTextView.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(3.0f), Theme.getColor(Theme.key_chat_gifSaveHintBackground)));
                        this.voiceHintTextView.setTextColor(Theme.getColor(Theme.key_chat_gifSaveHintText));
                        this.voiceHintTextView.setTextSize(1, 14.0f);
                        this.voiceHintTextView.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f), AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f));
                        this.voiceHintTextView.setGravity(16);
                        this.voiceHintTextView.setAlpha(0.0f);
                        frameLayout.addView(this.voiceHintTextView, index + 1, LayoutHelper.createFrame(-2, -2.0f, 85, 5.0f, 0.0f, 5.0f, 3.0f));
                    } else {
                        return;
                    }
                }
                if (hide) {
                    if (this.voiceHintAnimation != null) {
                        this.voiceHintAnimation.cancel();
                        this.voiceHintAnimation = null;
                    }
                    AndroidUtilities.cancelRunOnUIThread(this.voiceHintHideRunnable);
                    this.voiceHintHideRunnable = null;
                    hideVoiceHint();
                    return;
                }
                String str;
                int i;
                TextView textView = this.voiceHintTextView;
                if (video) {
                    str = "HoldToVideo";
                    i = R.string.HoldToVideo;
                } else {
                    str = "HoldToAudio";
                    i = R.string.HoldToAudio;
                }
                textView.setText(LocaleController.getString(str, i));
                if (this.voiceHintHideRunnable != null) {
                    if (this.voiceHintAnimation != null) {
                        this.voiceHintAnimation.cancel();
                        this.voiceHintAnimation = null;
                    } else {
                        AndroidUtilities.cancelRunOnUIThread(this.voiceHintHideRunnable);
                        Runnable anonymousClass66 = new Runnable() {
                            public void run() {
                                ChatActivity.this.hideVoiceHint();
                            }
                        };
                        this.voiceHintHideRunnable = anonymousClass66;
                        AndroidUtilities.runOnUIThread(anonymousClass66, AdaptiveTrackSelection.DEFAULT_MIN_TIME_BETWEEN_BUFFER_REEVALUTATION_MS);
                        return;
                    }
                } else if (this.voiceHintAnimation != null) {
                    return;
                }
                this.voiceHintTextView.setVisibility(0);
                this.voiceHintAnimation = new AnimatorSet();
                AnimatorSet animatorSet = this.voiceHintAnimation;
                Animator[] animatorArr = new Animator[1];
                animatorArr[0] = ObjectAnimator.ofFloat(this.voiceHintTextView, "alpha", new float[]{1.0f});
                animatorSet.playTogether(animatorArr);
                this.voiceHintAnimation.addListener(new AnimatorListenerAdapter() {
                    public void onAnimationEnd(Animator animation) {
                        if (animation.equals(ChatActivity.this.voiceHintAnimation)) {
                            ChatActivity.this.voiceHintAnimation = null;
                            AndroidUtilities.runOnUIThread(ChatActivity.this.voiceHintHideRunnable = new Runnable() {
                                public void run() {
                                    ChatActivity.this.hideVoiceHint();
                                }
                            }, AdaptiveTrackSelection.DEFAULT_MIN_TIME_BETWEEN_BUFFER_REEVALUTATION_MS);
                        }
                    }

                    public void onAnimationCancel(Animator animation) {
                        if (animation.equals(ChatActivity.this.voiceHintAnimation)) {
                            ChatActivity.this.voiceHintAnimation = null;
                        }
                    }
                });
                this.voiceHintAnimation.setDuration(300);
                this.voiceHintAnimation.start();
            }
        }
    }

    private void showMediaBannedHint() {
        if (!(getParentActivity() == null || this.currentChat == null || this.currentChat.banned_rights == null || this.fragmentView == null)) {
            if (this.mediaBanTooltip == null || this.mediaBanTooltip.getVisibility() != 0) {
                SizeNotifierFrameLayout frameLayout = this.fragmentView;
                int index = frameLayout.indexOfChild(this.chatActivityEnterView);
                if (index != -1) {
                    if (this.mediaBanTooltip == null) {
                        this.mediaBanTooltip = new CorrectlyMeasuringTextView(getParentActivity());
                        this.mediaBanTooltip.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(3.0f), Theme.getColor(Theme.key_chat_gifSaveHintBackground)));
                        this.mediaBanTooltip.setTextColor(Theme.getColor(Theme.key_chat_gifSaveHintText));
                        this.mediaBanTooltip.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f), AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f));
                        this.mediaBanTooltip.setGravity(16);
                        this.mediaBanTooltip.setTextSize(1, 14.0f);
                        frameLayout.addView(this.mediaBanTooltip, index + 1, LayoutHelper.createFrame(-2, -2.0f, 85, 30.0f, 0.0f, 5.0f, 3.0f));
                    }
                    if (AndroidUtilities.isBannedForever(this.currentChat.banned_rights.until_date)) {
                        this.mediaBanTooltip.setText(LocaleController.getString("AttachMediaRestrictedForever", R.string.AttachMediaRestrictedForever));
                    } else {
                        this.mediaBanTooltip.setText(LocaleController.formatString("AttachMediaRestricted", R.string.AttachMediaRestricted, LocaleController.formatDateForBan((long) this.currentChat.banned_rights.until_date)));
                    }
                    this.mediaBanTooltip.setVisibility(0);
                    AnimatorSet AnimatorSet = new AnimatorSet();
                    AnimatorSet.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.mediaBanTooltip, "alpha", new float[]{0.0f, 1.0f})});
                    AnimatorSet.addListener(new AnimatorListenerAdapter() {
                        public void onAnimationEnd(Animator animation) {
                            AndroidUtilities.runOnUIThread(new Runnable() {
                                public void run() {
                                    if (ChatActivity.this.mediaBanTooltip != null) {
                                        AnimatorSet AnimatorSet = new AnimatorSet();
                                        Animator[] animatorArr = new Animator[1];
                                        animatorArr[0] = ObjectAnimator.ofFloat(ChatActivity.this.mediaBanTooltip, "alpha", new float[]{0.0f});
                                        AnimatorSet.playTogether(animatorArr);
                                        AnimatorSet.addListener(new AnimatorListenerAdapter() {
                                            public void onAnimationEnd(Animator animation) {
                                                if (ChatActivity.this.mediaBanTooltip != null) {
                                                    ChatActivity.this.mediaBanTooltip.setVisibility(8);
                                                }
                                            }
                                        });
                                        AnimatorSet.setDuration(300);
                                        AnimatorSet.start();
                                    }
                                }
                            }, DefaultRenderersFactory.DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS);
                        }
                    });
                    AnimatorSet.setDuration(300);
                    AnimatorSet.start();
                }
            }
        }
    }

    private void showGifHint() {
        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
        if (!preferences.getBoolean("gifhint", false)) {
            preferences.edit().putBoolean("gifhint", true).commit();
            if (!(getParentActivity() == null || this.fragmentView == null)) {
                if (this.gifHintTextView == null) {
                    if (this.allowContextBotPanelSecond) {
                        SizeNotifierFrameLayout frameLayout = this.fragmentView;
                        int index = frameLayout.indexOfChild(this.chatActivityEnterView);
                        if (index != -1) {
                            this.chatActivityEnterView.setOpenGifsTabFirst();
                            this.emojiButtonRed = new View(getParentActivity());
                            this.emojiButtonRed.setBackgroundResource(R.drawable.redcircle);
                            frameLayout.addView(this.emojiButtonRed, index + 1, LayoutHelper.createFrame(10, 10.0f, 83, 30.0f, 0.0f, 0.0f, 27.0f));
                            this.gifHintTextView = new TextView(getParentActivity());
                            this.gifHintTextView.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(3.0f), Theme.getColor(Theme.key_chat_gifSaveHintBackground)));
                            this.gifHintTextView.setTextColor(Theme.getColor(Theme.key_chat_gifSaveHintText));
                            this.gifHintTextView.setTextSize(1, 14.0f);
                            this.gifHintTextView.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f), AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f));
                            this.gifHintTextView.setText(LocaleController.getString("TapHereGifs", R.string.TapHereGifs));
                            this.gifHintTextView.setGravity(16);
                            frameLayout.addView(this.gifHintTextView, index + 1, LayoutHelper.createFrame(-2, -2.0f, 83, 5.0f, 0.0f, 5.0f, 3.0f));
                            AnimatorSet AnimatorSet = new AnimatorSet();
                            AnimatorSet.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.gifHintTextView, "alpha", new float[]{0.0f, 1.0f}), ObjectAnimator.ofFloat(this.emojiButtonRed, "alpha", new float[]{0.0f, 1.0f})});
                            AnimatorSet.addListener(new AnimatorListenerAdapter() {
                                public void onAnimationEnd(Animator animation) {
                                    AndroidUtilities.runOnUIThread(new Runnable() {
                                        public void run() {
                                            if (ChatActivity.this.gifHintTextView != null) {
                                                AnimatorSet AnimatorSet = new AnimatorSet();
                                                Animator[] animatorArr = new Animator[1];
                                                animatorArr[0] = ObjectAnimator.ofFloat(ChatActivity.this.gifHintTextView, "alpha", new float[]{0.0f});
                                                AnimatorSet.playTogether(animatorArr);
                                                AnimatorSet.addListener(new AnimatorListenerAdapter() {
                                                    public void onAnimationEnd(Animator animation) {
                                                        if (ChatActivity.this.gifHintTextView != null) {
                                                            ChatActivity.this.gifHintTextView.setVisibility(8);
                                                        }
                                                    }
                                                });
                                                AnimatorSet.setDuration(300);
                                                AnimatorSet.start();
                                            }
                                        }
                                    }, AdaptiveTrackSelection.DEFAULT_MIN_TIME_BETWEEN_BUFFER_REEVALUTATION_MS);
                                }
                            });
                            AnimatorSet.setDuration(300);
                            AnimatorSet.start();
                            return;
                        }
                        return;
                    }
                    if (this.chatActivityEnterView != null) {
                        this.chatActivityEnterView.setOpenGifsTabFirst();
                    }
                }
            }
        }
    }

    private void openAttachMenu() {
        if (getParentActivity() != null) {
            createChatAttachView();
            this.chatAttachAlert.loadGalleryPhotos();
            if (VERSION.SDK_INT == 21 || VERSION.SDK_INT == 22) {
                this.chatActivityEnterView.closeKeyboard();
            }
            this.chatAttachAlert.init();
            showDialog(this.chatAttachAlert);
        }
    }

    private void checkContextBotPanel() {
        if (!this.allowStickersPanel || this.mentionsAdapter == null || !this.mentionsAdapter.isBotContext()) {
            return;
        }
        if (this.allowContextBotPanel || this.allowContextBotPanelSecond) {
            if (this.mentionContainer.getVisibility() == 4 || this.mentionContainer.getTag() != null) {
                if (this.mentionListAnimation != null) {
                    this.mentionListAnimation.cancel();
                }
                this.mentionContainer.setTag(null);
                this.mentionContainer.setVisibility(0);
                this.mentionListAnimation = new AnimatorSet();
                this.mentionListAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.mentionContainer, "alpha", new float[]{0.0f, 1.0f})});
                this.mentionListAnimation.addListener(new AnimatorListenerAdapter() {
                    public void onAnimationEnd(Animator animation) {
                        if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                            ChatActivity.this.mentionListAnimation = null;
                        }
                    }

                    public void onAnimationCancel(Animator animation) {
                        if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                            ChatActivity.this.mentionListAnimation = null;
                        }
                    }
                });
                this.mentionListAnimation.setDuration(200);
                this.mentionListAnimation.start();
            }
        } else if (this.mentionContainer.getVisibility() == 0 && this.mentionContainer.getTag() == null) {
            if (this.mentionListAnimation != null) {
                this.mentionListAnimation.cancel();
            }
            this.mentionContainer.setTag(Integer.valueOf(1));
            this.mentionListAnimation = new AnimatorSet();
            AnimatorSet animatorSet = this.mentionListAnimation;
            Animator[] animatorArr = new Animator[1];
            animatorArr[0] = ObjectAnimator.ofFloat(this.mentionContainer, "alpha", new float[]{0.0f});
            animatorSet.playTogether(animatorArr);
            this.mentionListAnimation.addListener(new AnimatorListenerAdapter() {
                public void onAnimationEnd(Animator animation) {
                    if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                        ChatActivity.this.mentionContainer.setVisibility(4);
                        ChatActivity.this.mentionListAnimation = null;
                    }
                }

                public void onAnimationCancel(Animator animation) {
                    if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(animation)) {
                        ChatActivity.this.mentionListAnimation = null;
                    }
                }
            });
            this.mentionListAnimation.setDuration(200);
            this.mentionListAnimation.start();
        }
    }

    private void hideFloatingDateView(boolean animated) {
        if (this.floatingDateView.getTag() != null && !this.currentFloatingDateOnScreen) {
            if (!this.scrollingFloatingDate || this.currentFloatingTopIsNotMessage) {
                this.floatingDateView.setTag(null);
                if (animated) {
                    this.floatingDateAnimation = new AnimatorSet();
                    this.floatingDateAnimation.setDuration(150);
                    AnimatorSet animatorSet = this.floatingDateAnimation;
                    Animator[] animatorArr = new Animator[1];
                    animatorArr[0] = ObjectAnimator.ofFloat(this.floatingDateView, "alpha", new float[]{0.0f});
                    animatorSet.playTogether(animatorArr);
                    this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() {
                        public void onAnimationEnd(Animator animation) {
                            if (animation.equals(ChatActivity.this.floatingDateAnimation)) {
                                ChatActivity.this.floatingDateAnimation = null;
                            }
                        }
                    });
                    this.floatingDateAnimation.setStartDelay(500);
                    this.floatingDateAnimation.start();
                    return;
                }
                if (this.floatingDateAnimation != null) {
                    this.floatingDateAnimation.cancel();
                    this.floatingDateAnimation = null;
                }
                this.floatingDateView.setAlpha(0.0f);
            }
        }
    }

    protected void onRemoveFromParent() {
        MediaController.getInstance().setTextureView(this.videoTextureView, null, null, false);
    }

    protected void setIgnoreAttachOnPause(boolean value) {
        this.ignoreAttachOnPause = value;
    }

    private void checkScrollForLoad(boolean scroll) {
        if (this.chatLayoutManager != null) {
            if (!r0.paused) {
                int firstVisibleItem = r0.chatLayoutManager.findFirstVisibleItemPosition();
                int visibleItemCount = firstVisibleItem == -1 ? 0 : Math.abs(r0.chatLayoutManager.findLastVisibleItemPosition() - firstVisibleItem) + 1;
                if (visibleItemCount > 0 || r0.currentEncryptedChat != null) {
                    int checkLoadCount;
                    int i;
                    int i2;
                    MessagesController instance;
                    long j;
                    int i3;
                    boolean isChannel;
                    int i4;
                    int totalItemCount = r0.chatAdapter.getItemCount();
                    if (scroll) {
                        checkLoadCount = 25;
                    } else {
                        checkLoadCount = 5;
                    }
                    if ((totalItemCount - firstVisibleItem) - visibleItemCount <= checkLoadCount && !r0.loading) {
                        if (!r0.endReached[0]) {
                            r0.loading = true;
                            r0.waitingForLoad.add(Integer.valueOf(r0.lastLoadIndex));
                            int i5;
                            if (r0.messagesByDays.size() != 0) {
                                MessagesController instance2 = MessagesController.getInstance(r0.currentAccount);
                                long j2 = r0.dialog_id;
                                i = r0.maxMessageId[0];
                                boolean z = r0.cacheEndReached[0] ^ 1;
                                int i6 = r0.minDate[0];
                                i5 = r0.classGuid;
                                boolean isChannel2 = ChatObject.isChannel(r0.currentChat);
                                int i7 = r0.lastLoadIndex;
                                r0.lastLoadIndex = i7 + 1;
                                instance2.loadMessages(j2, 50, i, 0, z, i6, i5, 0, 0, isChannel2, i7);
                            } else {
                                MessagesController instance3 = MessagesController.getInstance(r0.currentAccount);
                                long j3 = r0.dialog_id;
                                boolean z2 = r0.cacheEndReached[0] ^ 1;
                                int i8 = r0.minDate[0];
                                i5 = r0.classGuid;
                                boolean isChannel3 = ChatObject.isChannel(r0.currentChat);
                                i2 = r0.lastLoadIndex;
                                r0.lastLoadIndex = i2 + 1;
                                instance3.loadMessages(j3, 50, 0, 0, z2, i8, i5, 0, 0, isChannel3, i2);
                            }
                        } else if (!(r0.mergeDialogId == 0 || r0.endReached[1])) {
                            r0.loading = true;
                            r0.waitingForLoad.add(Integer.valueOf(r0.lastLoadIndex));
                            instance = MessagesController.getInstance(r0.currentAccount);
                            j = r0.mergeDialogId;
                            i3 = r0.maxMessageId[1];
                            boolean z3 = r0.cacheEndReached[1] ^ 1;
                            i = r0.minDate[1];
                            i2 = r0.classGuid;
                            isChannel = ChatObject.isChannel(r0.currentChat);
                            i4 = r0.lastLoadIndex;
                            r0.lastLoadIndex = i4 + 1;
                            instance.loadMessages(j, 50, i3, 0, z3, i, i2, 0, 0, isChannel, i4);
                        }
                    }
                    if (visibleItemCount > 0 && !r0.loadingForward && firstVisibleItem <= 10) {
                        if (r0.mergeDialogId != 0 && !r0.forwardEndReached[1]) {
                            r0.waitingForLoad.add(Integer.valueOf(r0.lastLoadIndex));
                            instance = MessagesController.getInstance(r0.currentAccount);
                            j = r0.mergeDialogId;
                            i3 = r0.minMessageId[1];
                            i = r0.maxDate[1];
                            i2 = r0.classGuid;
                            isChannel = ChatObject.isChannel(r0.currentChat);
                            i4 = r0.lastLoadIndex;
                            r0.lastLoadIndex = i4 + 1;
                            instance.loadMessages(j, 50, i3, 0, true, i, i2, 1, 0, isChannel, i4);
                            r0.loadingForward = true;
                        } else if (!r0.forwardEndReached[0]) {
                            r0.waitingForLoad.add(Integer.valueOf(r0.lastLoadIndex));
                            instance = MessagesController.getInstance(r0.currentAccount);
                            j = r0.dialog_id;
                            i3 = r0.minMessageId[0];
                            i = r0.maxDate[0];
                            i2 = r0.classGuid;
                            isChannel = ChatObject.isChannel(r0.currentChat);
                            i4 = r0.lastLoadIndex;
                            r0.lastLoadIndex = i4 + 1;
                            instance.loadMessages(j, 50, i3, 0, true, i, i2, 1, 0, isChannel, i4);
                            r0.loadingForward = true;
                        }
                    }
                }
            }
        }
    }

    private void processSelectedAttach(int which) {
        int i = 0;
        Intent takePictureIntent;
        if (which == 0) {
            if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.CAMERA") == 0) {
                try {
                    takePictureIntent = new Intent("android.media.action.IMAGE_CAPTURE");
                    File image = AndroidUtilities.generatePicturePath();
                    if (image != null) {
                        if (VERSION.SDK_INT >= 24) {
                            takePictureIntent.putExtra("output", FileProvider.getUriForFile(getParentActivity(), "org.telegram.messenger.beta.provider", image));
                            takePictureIntent.addFlags(2);
                            takePictureIntent.addFlags(1);
                        } else {
                            takePictureIntent.putExtra("output", Uri.fromFile(image));
                        }
                        this.currentPicturePath = image.getAbsolutePath();
                    }
                    startActivityForResult(takePictureIntent, 0);
                } catch (Throwable e) {
                    FileLog.e(e);
                }
            } else {
                getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 19);
            }
        } else if (which == 1) {
            if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") == 0) {
                boolean z;
                PhotoAlbumPickerActivity fragment;
                if (this.currentEncryptedChat != null) {
                    if (AndroidUtilities.getPeerLayerVersion(this.currentEncryptedChat.layer) < 46) {
                        z = false;
                        fragment = new PhotoAlbumPickerActivity(false, z, true, this);
                        fragment.setDelegate(new PhotoAlbumPickerActivityDelegate() {
                            public void didSelectPhotos(ArrayList<SendingMediaInfo> photos) {
                                SendMessagesHelper.prepareSendingMedia(photos, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, null, false, SharedConfig.groupPhotosEnabled);
                                ChatActivity.this.showReplyPanel(false, null, null, null, false);
                                DataQuery.getInstance(ChatActivity.this.currentAccount).cleanDraft(ChatActivity.this.dialog_id, true);
                            }

                            public void startPhotoSelectActivity() {
                                try {
                                    Intent videoPickerIntent = new Intent();
                                    videoPickerIntent.setType("video/*");
                                    videoPickerIntent.setAction("android.intent.action.GET_CONTENT");
                                    videoPickerIntent.putExtra("android.intent.extra.sizeLimit", 1610612736);
                                    Intent photoPickerIntent = new Intent("android.intent.action.PICK");
                                    photoPickerIntent.setType("image/*");
                                    Intent chooserIntent = Intent.createChooser(photoPickerIntent, null);
                                    chooserIntent.putExtra("android.intent.extra.INITIAL_INTENTS", new Intent[]{videoPickerIntent});
                                    ChatActivity.this.startActivityForResult(chooserIntent, 1);
                                } catch (Throwable e) {
                                    FileLog.e(e);
                                }
                            }
                        });
                        presentFragment(fragment);
                    }
                }
                z = true;
                fragment = new PhotoAlbumPickerActivity(false, z, true, this);
                fragment.setDelegate(/* anonymous class already generated */);
                presentFragment(fragment);
            } else {
                getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
            }
        } else if (which == 2) {
            if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.CAMERA") == 0) {
                try {
                    takePictureIntent = new Intent("android.media.action.VIDEO_CAPTURE");
                    File video = AndroidUtilities.generateVideoPath();
                    if (video != null) {
                        if (VERSION.SDK_INT >= 24) {
                            takePictureIntent.putExtra("output", FileProvider.getUriForFile(getParentActivity(), "org.telegram.messenger.beta.provider", video));
                            takePictureIntent.addFlags(2);
                            takePictureIntent.addFlags(1);
                        } else if (VERSION.SDK_INT >= 18) {
                            takePictureIntent.putExtra("output", Uri.fromFile(video));
                        }
                        takePictureIntent.putExtra("android.intent.extra.sizeLimit", 1610612736);
                        this.currentPicturePath = video.getAbsolutePath();
                    }
                    startActivityForResult(takePictureIntent, 2);
                } catch (Throwable e2) {
                    FileLog.e(e2);
                }
            } else {
                getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 20);
            }
        } else if (which == 6) {
            if (AndroidUtilities.isGoogleMapsInstalled(this)) {
                if (this.currentEncryptedChat == null) {
                    i = 1;
                }
                LocationActivity fragment2 = new LocationActivity(i);
                fragment2.setDialogId(this.dialog_id);
                fragment2.setDelegate(this);
                presentFragment(fragment2);
            }
        } else if (which == 4) {
            if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") == 0) {
                DocumentSelectActivity fragment3 = new DocumentSelectActivity();
                fragment3.setDelegate(new DocumentSelectActivityDelegate() {
                    public void didSelectFiles(DocumentSelectActivity activity, ArrayList<String> files) {
                        activity.finishFragment();
                        SendMessagesHelper.prepareSendingDocuments(files, files, null, null, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, null);
                        ChatActivity.this.showReplyPanel(false, null, null, null, false);
                        DataQuery.getInstance(ChatActivity.this.currentAccount).cleanDraft(ChatActivity.this.dialog_id, true);
                    }

                    public void startDocumentSelectActivity() {
                        try {
                            Intent photoPickerIntent = new Intent("android.intent.action.GET_CONTENT");
                            if (VERSION.SDK_INT >= 18) {
                                photoPickerIntent.putExtra("android.intent.extra.ALLOW_MULTIPLE", true);
                            }
                            photoPickerIntent.setType("*/*");
                            ChatActivity.this.startActivityForResult(photoPickerIntent, 21);
                        } catch (Throwable e) {
                            FileLog.e(e);
                        }
                    }
                });
                presentFragment(fragment3);
            } else {
                getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
            }
        } else if (which == 3) {
            if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") == 0) {
                AudioSelectActivity fragment4 = new AudioSelectActivity();
                fragment4.setDelegate(new AudioSelectActivityDelegate() {
                    public void didSelectAudio(ArrayList<MessageObject> audios) {
                        SendMessagesHelper.prepareSendingAudioDocuments(audios, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject);
                        ChatActivity.this.showReplyPanel(false, null, null, null, false);
                        DataQuery.getInstance(ChatActivity.this.currentAccount).cleanDraft(ChatActivity.this.dialog_id, true);
                    }
                });
                presentFragment(fragment4);
            } else {
                getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
            }
        } else if (which == 5) {
            if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.READ_CONTACTS") == 0) {
                try {
                    Intent intent = new Intent("android.intent.action.PICK", Contacts.CONTENT_URI);
                    intent.setType("vnd.android.cursor.dir/phone_v2");
                    startActivityForResult(intent, bot_settings);
                } catch (Throwable e22) {
                    FileLog.e(e22);
                }
            } else {
                getParentActivity().requestPermissions(new String[]{"android.permission.READ_CONTACTS"}, 5);
            }
        }
    }

    public boolean dismissDialogOnPause(Dialog dialog) {
        return dialog != this.chatAttachAlert && super.dismissDialogOnPause(dialog);
    }

    private void searchLinks(final CharSequence charSequence, final boolean force) {
        if (this.currentEncryptedChat == null || (MessagesController.getInstance(this.currentAccount).secretWebpagePreview != 0 && AndroidUtilities.getPeerLayerVersion(this.currentEncryptedChat.layer) >= 46)) {
            if (force && this.foundWebPage != null) {
                if (this.foundWebPage.url != null) {
                    int index = TextUtils.indexOf(charSequence, this.foundWebPage.url);
                    char lastChar = '\u0000';
                    boolean lenEqual = false;
                    boolean z = true;
                    char c = '\u0000';
                    if (index != -1) {
                        if (this.foundWebPage.url.length() + index != charSequence.length()) {
                            z = false;
                        }
                        lenEqual = z;
                        if (!lenEqual) {
                            c = charSequence.charAt(this.foundWebPage.url.length() + index);
                        }
                        lastChar = c;
                    } else if (this.foundWebPage.display_url != null) {
                        index = TextUtils.indexOf(charSequence, this.foundWebPage.display_url);
                        if (index == -1 || this.foundWebPage.display_url.length() + index != charSequence.length()) {
                            z = false;
                        }
                        lenEqual = z;
                        if (!(index == -1 || lenEqual)) {
                            c = charSequence.charAt(this.foundWebPage.display_url.length() + index);
                        }
                        lastChar = c;
                    }
                    if (index != -1 && (lenEqual || lastChar == ' ' || lastChar == ',' || lastChar == '.' || lastChar == '!' || lastChar == '/')) {
                        return;
                    }
                }
                this.pendingLinkSearchString = null;
                showReplyPanel(false, null, null, this.foundWebPage, false);
            }
            final MessagesController messagesController = MessagesController.getInstance(this.currentAccount);
            Utilities.searchQueue.postRunnable(new Runnable() {
                public void run() {
                    int a = 0;
                    if (ChatActivity.this.linkSearchRequestId != 0) {
                        ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.linkSearchRequestId, true);
                        ChatActivity.this.linkSearchRequestId = 0;
                    }
                    ArrayList<CharSequence> urls = null;
                    Exception e;
                    final String text;
                    try {
                        Matcher m = AndroidUtilities.WEB_URL.matcher(charSequence);
                        while (m.find()) {
                            if (m.start() <= 0 || charSequence.charAt(m.start() - 1) != '@') {
                                if (urls == null) {
                                    urls = new ArrayList();
                                }
                                urls.add(charSequence.subSequence(m.start(), m.end()));
                            }
                        }
                        if (!(urls == null || ChatActivity.this.foundUrls == null || urls.size() != ChatActivity.this.foundUrls.size())) {
                            boolean clear = true;
                            while (a < urls.size()) {
                                if (!TextUtils.equals((CharSequence) urls.get(a), (CharSequence) ChatActivity.this.foundUrls.get(a))) {
                                    clear = false;
                                }
                                a++;
                            }
                            if (clear) {
                                return;
                            }
                        }
                        ChatActivity.this.foundUrls = urls;
                        if (urls == null) {
                            AndroidUtilities.runOnUIThread(new Runnable() {
                                public void run() {
                                    if (ChatActivity.this.foundWebPage != null) {
                                        ChatActivity.this.showReplyPanel(false, null, null, ChatActivity.this.foundWebPage, false);
                                        ChatActivity.this.foundWebPage = null;
                                    }
                                }
                            });
                            return;
                        }
                        e = TextUtils.join(" ", urls);
                        if (ChatActivity.this.currentEncryptedChat == null || messagesController.secretWebpagePreview != 2) {
                            text = new TL_messages_getWebPagePreview();
                            if (e instanceof String) {
                                text.message = (String) e;
                            } else {
                                text.message = e.toString();
                            }
                            ChatActivity.this.linkSearchRequestId = ConnectionsManager.getInstance(ChatActivity.this.currentAccount).sendRequest(text, new RequestDelegate() {
                                public void run(final TLObject response, final TL_error error) {
                                    AndroidUtilities.runOnUIThread(new Runnable() {
                                        public void run() {
                                            ChatActivity.this.linkSearchRequestId = 0;
                                            if (error != null) {
                                                return;
                                            }
                                            if (response instanceof TL_messageMediaWebPage) {
                                                ChatActivity.this.foundWebPage = ((TL_messageMediaWebPage) response).webpage;
                                                if (!(ChatActivity.this.foundWebPage instanceof TL_webPage)) {
                                                    if (!(ChatActivity.this.foundWebPage instanceof TL_webPagePending)) {
                                                        if (ChatActivity.this.foundWebPage != null) {
                                                            ChatActivity.this.showReplyPanel(false, null, null, ChatActivity.this.foundWebPage, false);
                                                            ChatActivity.this.foundWebPage = null;
                                                            return;
                                                        }
                                                        return;
                                                    }
                                                }
                                                if (ChatActivity.this.foundWebPage instanceof TL_webPagePending) {
                                                    ChatActivity.this.pendingLinkSearchString = text.message;
                                                }
                                                if (ChatActivity.this.currentEncryptedChat != null && (ChatActivity.this.foundWebPage instanceof TL_webPagePending)) {
                                                    ChatActivity.this.foundWebPage.url = text.message;
                                                }
                                                ChatActivity.this.showReplyPanel(true, null, null, ChatActivity.this.foundWebPage, false);
                                            } else if (ChatActivity.this.foundWebPage != null) {
                                                ChatActivity.this.showReplyPanel(false, null, null, ChatActivity.this.foundWebPage, false);
                                                ChatActivity.this.foundWebPage = null;
                                            }
                                        }
                                    });
                                }
                            });
                            ConnectionsManager.getInstance(ChatActivity.this.currentAccount).bindRequestToGuid(ChatActivity.this.linkSearchRequestId, ChatActivity.this.classGuid);
                            return;
                        }
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                AlertDialog.Builder builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity());
                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int which) {
                                        messagesController.secretWebpagePreview = 1;
                                        MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", MessagesController.getInstance(ChatActivity.this.currentAccount).secretWebpagePreview).commit();
                                        ChatActivity.this.foundUrls = null;
                                        ChatActivity.this.searchLinks(charSequence, force);
                                    }
                                });
                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                                builder.setMessage(LocaleController.getString("SecretLinkPreviewAlert", R.string.SecretLinkPreviewAlert));
                                ChatActivity.this.showDialog(builder.create());
                                messagesController.secretWebpagePreview = 0;
                                MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", messagesController.secretWebpagePreview).commit();
                            }
                        });
                    } catch (Throwable e2) {
                        FileLog.e(e2);
                        text = charSequence.toString().toLowerCase();
                        if (charSequence.length() >= 13) {
                            if (text.contains("http://") || text.contains("https://")) {
                                e = charSequence;
                            }
                        }
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                if (ChatActivity.this.foundWebPage != null) {
                                    ChatActivity.this.showReplyPanel(false, null, null, ChatActivity.this.foundWebPage, false);
                                    ChatActivity.this.foundWebPage = null;
                                }
                            }
                        });
                    }
                }
            });
        }
    }

    private void forwardMessages(ArrayList<MessageObject> arrayList, boolean fromMyName) {
        if (arrayList != null) {
            if (!arrayList.isEmpty()) {
                if (fromMyName) {
                    Iterator it = arrayList.iterator();
                    while (it.hasNext()) {
                        SendMessagesHelper.getInstance(this.currentAccount).processForwardFromMyName((MessageObject) it.next(), this.dialog_id);
                    }
                } else {
                    AlertsCreator.showSendMediaAlert(SendMessagesHelper.getInstance(this.currentAccount).sendMessage(arrayList, this.dialog_id), this);
                }
            }
        }
    }

    private void checkBotKeyboard() {
        if (!(this.chatActivityEnterView == null || this.botButtons == null)) {
            if (!this.userBlocked) {
                if (this.botButtons.messageOwner.reply_markup instanceof TL_replyKeyboardForceReply) {
                    SharedPreferences preferences = MessagesController.getMainSettings(this.currentAccount);
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("answered_");
                    stringBuilder.append(this.dialog_id);
                    if (preferences.getInt(stringBuilder.toString(), 0) != this.botButtons.getId() && (this.replyingMessageObject == null || this.chatActivityEnterView.getFieldText() == null)) {
                        this.botReplyButtons = this.botButtons;
                        this.chatActivityEnterView.setButtons(this.botButtons);
                        showReplyPanel(true, this.botButtons, null, null, false);
                    }
                } else {
                    if (this.replyingMessageObject != null && this.botReplyButtons == this.replyingMessageObject) {
                        this.botReplyButtons = null;
                        showReplyPanel(false, null, null, null, false);
                    }
                    this.chatActivityEnterView.setButtons(this.botButtons);
                }
            }
        }
    }

    public void showReplyPanel(boolean show, MessageObject messageObjectToReply, ArrayList<MessageObject> messageObjectsToForward, WebPage webPage, boolean cancel) {
        MessageObject messageObject = messageObjectToReply;
        WebPage webPage2 = webPage;
        if (this.chatActivityEnterView != null) {
            ArrayList<MessageObject> messageObjectsToForward2;
            MessageObject messageObjectToReply2;
            if (show) {
                if (messageObject != null || messageObjectsToForward != null || webPage2 != null) {
                    int dp;
                    if (r6.searchItem != null && r6.actionBar.isSearchFieldVisible()) {
                        r6.actionBar.closeSearchField(false);
                        r6.chatActivityEnterView.setFieldFocused();
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                if (ChatActivity.this.chatActivityEnterView != null) {
                                    ChatActivity.this.chatActivityEnterView.openKeyboard();
                                }
                            }
                        }, 100);
                    }
                    boolean openKeyboard = false;
                    if (messageObject == null || messageObjectToReply.getDialogId() == r6.dialog_id) {
                        messageObjectsToForward2 = messageObjectsToForward;
                        messageObjectToReply2 = messageObject;
                    } else {
                        ArrayList<MessageObject> messageObjectsToForward3 = new ArrayList();
                        messageObjectsToForward3.add(messageObject);
                        messageObjectToReply2 = null;
                        openKeyboard = true;
                        messageObjectsToForward2 = messageObjectsToForward3;
                    }
                    String mess;
                    if (messageObjectToReply2 != null) {
                        r6.forwardingMessages = null;
                        r6.replyingMessageObject = messageObjectToReply2;
                        r6.chatActivityEnterView.setReplyingMessageObject(messageObjectToReply2);
                        if (r6.foundWebPage == null) {
                            String name;
                            if (messageObjectToReply2.isFromUser()) {
                                name = MessagesController.getInstance(r6.currentAccount).getUser(Integer.valueOf(messageObjectToReply2.messageOwner.from_id));
                                if (name != null) {
                                    name = UserObject.getUserName(name);
                                } else {
                                    return;
                                }
                            }
                            name = MessagesController.getInstance(r6.currentAccount).getChat(Integer.valueOf(messageObjectToReply2.messageOwner.to_id.channel_id));
                            if (name != null) {
                                name = name.title;
                            } else {
                                return;
                            }
                            r6.replyIconImageView.setImageResource(R.drawable.msg_panel_reply);
                            r6.replyNameTextView.setText(name);
                            if (messageObjectToReply2.messageOwner.media instanceof TL_messageMediaGame) {
                                r6.replyObjectTextView.setText(Emoji.replaceEmoji(messageObjectToReply2.messageOwner.media.game.title, r6.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                            } else if (messageObjectToReply2.messageText != null) {
                                mess = messageObjectToReply2.messageText.toString();
                                if (mess.length() > 150) {
                                    mess = mess.substring(0, 150);
                                }
                                r6.replyObjectTextView.setText(Emoji.replaceEmoji(mess.replace('\n', ' '), r6.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                            }
                        } else {
                            return;
                        }
                    }
                    boolean z = true;
                    if (messageObjectsToForward2 == null) {
                        r6.replyIconImageView.setImageResource(R.drawable.msg_panel_link);
                        if (webPage2 instanceof TL_webPagePending) {
                            r6.replyNameTextView.setText(LocaleController.getString("GettingLinkInfo", R.string.GettingLinkInfo));
                            r6.replyObjectTextView.setText(r6.pendingLinkSearchString);
                        } else {
                            if (webPage2.site_name != null) {
                                r6.replyNameTextView.setText(webPage2.site_name);
                            } else if (webPage2.title != null) {
                                r6.replyNameTextView.setText(webPage2.title);
                            } else {
                                r6.replyNameTextView.setText(LocaleController.getString("LinkPreview", R.string.LinkPreview));
                            }
                            if (webPage2.title != null) {
                                r6.replyObjectTextView.setText(webPage2.title);
                            } else if (webPage2.description != null) {
                                r6.replyObjectTextView.setText(webPage2.description);
                            } else if (webPage2.author != null) {
                                r6.replyObjectTextView.setText(webPage2.author);
                            } else {
                                r6.replyObjectTextView.setText(webPage2.display_url);
                            }
                            r6.chatActivityEnterView.setWebPage(webPage2, true);
                        }
                    } else if (!messageObjectsToForward2.isEmpty()) {
                        r6.replyingMessageObject = null;
                        r6.chatActivityEnterView.setReplyingMessageObject(null);
                        r6.forwardingMessages = messageObjectsToForward2;
                        if (r6.foundWebPage == null) {
                            r6.chatActivityEnterView.setForceShowSendButton(true, false);
                            ArrayList<Integer> uids = new ArrayList();
                            r6.replyIconImageView.setImageResource(R.drawable.msg_panel_forward);
                            MessageObject object = (MessageObject) messageObjectsToForward2.get(0);
                            if (object.isFromUser()) {
                                uids.add(Integer.valueOf(object.messageOwner.from_id));
                            } else {
                                uids.add(Integer.valueOf(-object.messageOwner.to_id.channel_id));
                            }
                            int type = ((MessageObject) messageObjectsToForward2.get(0)).type;
                            for (int a = 1; a < messageObjectsToForward2.size(); a++) {
                                Integer uid;
                                MessageObject object2 = (MessageObject) messageObjectsToForward2.get(a);
                                if (object2.isFromUser()) {
                                    uid = Integer.valueOf(object2.messageOwner.from_id);
                                } else {
                                    uid = Integer.valueOf(-object2.messageOwner.to_id.channel_id);
                                }
                                if (!uids.contains(uid)) {
                                    uids.add(uid);
                                }
                                if (((MessageObject) messageObjectsToForward2.get(a)).type != type) {
                                    type = -1;
                                }
                            }
                            StringBuilder userNames = new StringBuilder();
                            int a2 = 0;
                            while (a2 < uids.size()) {
                                Integer uid2 = (Integer) uids.get(a2);
                                Chat chat = null;
                                User user = null;
                                if (uid2.intValue() > 0) {
                                    user = MessagesController.getInstance(r6.currentAccount).getUser(uid2);
                                } else {
                                    chat = MessagesController.getInstance(r6.currentAccount).getChat(Integer.valueOf(-uid2.intValue()));
                                }
                                Chat chat2 = chat;
                                User user2 = user;
                                if (user2 != null || chat2 != null) {
                                    if (uids.size() != z) {
                                        if (uids.size() != 2) {
                                            if (userNames.length() != 0) {
                                                userNames.append(" ");
                                                userNames.append(LocaleController.formatPluralString("AndOther", uids.size() - 1));
                                                break;
                                            }
                                        }
                                        if (userNames.length() > 0) {
                                            userNames.append(", ");
                                        }
                                        if (user2 == null) {
                                            userNames.append(chat2.title);
                                        } else if (!TextUtils.isEmpty(user2.first_name)) {
                                            userNames.append(user2.first_name);
                                        } else if (TextUtils.isEmpty(user2.last_name)) {
                                            userNames.append(" ");
                                        } else {
                                            userNames.append(user2.last_name);
                                        }
                                    } else if (user2 != null) {
                                        userNames.append(UserObject.getUserName(user2));
                                    } else {
                                        userNames.append(chat2.title);
                                    }
                                }
                                a2++;
                                z = true;
                            }
                            r6.replyNameTextView.setText(userNames);
                            if (!(type == -1 || type == 0 || type == 10)) {
                                if (type != 11) {
                                    if (type == 1) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedPhoto", messageObjectsToForward2.size()));
                                        if (messageObjectsToForward2.size() == 1) {
                                            messageObjectToReply2 = (MessageObject) messageObjectsToForward2.get(0);
                                        }
                                    } else if (type == 4) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedLocation", messageObjectsToForward2.size()));
                                    } else if (type == 3) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedVideo", messageObjectsToForward2.size()));
                                        if (messageObjectsToForward2.size() == 1) {
                                            messageObjectToReply2 = (MessageObject) messageObjectsToForward2.get(0);
                                        }
                                    } else if (type == 12) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedContact", messageObjectsToForward2.size()));
                                    } else if (type == 2) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedAudio", messageObjectsToForward2.size()));
                                    } else if (type == 5) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedRound", messageObjectsToForward2.size()));
                                    } else if (type == 14) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedMusic", messageObjectsToForward2.size()));
                                    } else if (type == 13) {
                                        r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedSticker", messageObjectsToForward2.size()));
                                    } else if (type == 8 || type == 9) {
                                        if (messageObjectsToForward2.size() != 1) {
                                            r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedFile", messageObjectsToForward2.size()));
                                        } else if (type == 8) {
                                            r6.replyObjectTextView.setText(LocaleController.getString("AttachGif", R.string.AttachGif));
                                        } else {
                                            String documentFileName = FileLoader.getDocumentFileName(((MessageObject) messageObjectsToForward2.get(0)).getDocument());
                                            mess = documentFileName;
                                            if (documentFileName.length() != 0) {
                                                r6.replyObjectTextView.setText(mess);
                                            }
                                            messageObjectToReply2 = (MessageObject) messageObjectsToForward2.get(0);
                                        }
                                    }
                                }
                            }
                            if (messageObjectsToForward2.size() != 1 || ((MessageObject) messageObjectsToForward2.get(0)).messageText == null) {
                                r6.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedMessageCount", messageObjectsToForward2.size()));
                            } else {
                                MessageObject messageObject2 = (MessageObject) messageObjectsToForward2.get(0);
                                if (messageObject2.messageOwner.media instanceof TL_messageMediaGame) {
                                    r6.replyObjectTextView.setText(Emoji.replaceEmoji(messageObject2.messageOwner.media.game.title, r6.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                                } else {
                                    mess = messageObject2.messageText.toString();
                                    if (mess.length() > 150) {
                                        mess = mess.substring(0, 150);
                                    }
                                    r6.replyObjectTextView.setText(Emoji.replaceEmoji(mess.replace('\n', ' '), r6.replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                                }
                            }
                        } else {
                            return;
                        }
                    } else {
                        return;
                    }
                    FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) r6.replyNameTextView.getLayoutParams();
                    FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) r6.replyObjectTextView.getLayoutParams();
                    PhotoSize photoSize = null;
                    if (messageObjectToReply2 != null) {
                        photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObjectToReply2.photoThumbs2, 80);
                        if (photoSize == null) {
                            photoSize = FileLoader.getClosestPhotoSizeWithSize(messageObjectToReply2.photoThumbs, 80);
                        }
                    }
                    if (!(photoSize == null || (photoSize instanceof TL_photoSizeEmpty) || (photoSize.location instanceof TL_fileLocationUnavailable) || messageObjectToReply2.type == 13)) {
                        if (messageObjectToReply2 == null || !messageObjectToReply2.isSecretMedia()) {
                            if (messageObjectToReply2.isRoundVideo()) {
                                r6.replyImageView.setRoundRadius(AndroidUtilities.dp(17.0f));
                            } else {
                                r6.replyImageView.setRoundRadius(0);
                            }
                            r6.replyImageLocation = photoSize.location;
                            r6.replyImageView.setImage(r6.replyImageLocation, "50_50", (Drawable) null);
                            r6.replyImageView.setVisibility(0);
                            dp = AndroidUtilities.dp(96.0f);
                            layoutParams2.leftMargin = dp;
                            layoutParams1.leftMargin = dp;
                            r6.replyNameTextView.setLayoutParams(layoutParams1);
                            r6.replyObjectTextView.setLayoutParams(layoutParams2);
                            r6.chatActivityEnterView.showTopView(false, openKeyboard);
                        }
                    }
                    r6.replyImageView.setImageBitmap(null);
                    r6.replyImageLocation = null;
                    r6.replyImageView.setVisibility(4);
                    dp = AndroidUtilities.dp(52.0f);
                    layoutParams2.leftMargin = dp;
                    layoutParams1.leftMargin = dp;
                    r6.replyNameTextView.setLayoutParams(layoutParams1);
                    r6.replyObjectTextView.setLayoutParams(layoutParams2);
                    r6.chatActivityEnterView.showTopView(false, openKeyboard);
                }
            } else if (r6.replyingMessageObject != null || r6.forwardingMessages != null || r6.foundWebPage != null) {
                boolean z2;
                if (r6.replyingMessageObject != null && (r6.replyingMessageObject.messageOwner.reply_markup instanceof TL_replyKeyboardForceReply)) {
                    Editor edit = MessagesController.getMainSettings(r6.currentAccount).edit();
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("answered_");
                    stringBuilder.append(r6.dialog_id);
                    edit.putInt(stringBuilder.toString(), r6.replyingMessageObject.getId()).commit();
                }
                if (r6.foundWebPage != null) {
                    r6.foundWebPage = null;
                    r6.chatActivityEnterView.setWebPage(null, cancel ^ 1);
                    if (!(webPage2 == null || (r6.replyingMessageObject == null && r6.forwardingMessages == null))) {
                        showReplyPanel(true, r6.replyingMessageObject, r6.forwardingMessages, null, false);
                        return;
                    }
                }
                if (r6.forwardingMessages != null) {
                    z2 = false;
                    forwardMessages(r6.forwardingMessages, false);
                } else {
                    z2 = false;
                }
                r6.chatActivityEnterView.setForceShowSendButton(z2, z2);
                r6.chatActivityEnterView.hideTopView(z2);
                r6.chatActivityEnterView.setReplyingMessageObject(null);
                r6.replyingMessageObject = null;
                r6.forwardingMessages = null;
                r6.replyImageLocation = null;
                messageObjectsToForward2 = messageObjectsToForward;
                messageObjectToReply2 = messageObject;
            }
        }
    }

    private void moveScrollToLastMessage() {
        if (this.chatListView != null && !this.messages.isEmpty()) {
            this.chatLayoutManager.scrollToPositionWithOffset(0, 0);
        }
    }

    private boolean sendSecretMessageRead(MessageObject messageObject) {
        int i = 0;
        if (messageObject != null && !messageObject.isOut() && messageObject.isSecretMedia() && messageObject.messageOwner.destroyTime == 0) {
            if (messageObject.messageOwner.ttl > 0) {
                if (this.currentEncryptedChat != null) {
                    MessagesController.getInstance(this.currentAccount).markMessageAsRead(this.dialog_id, messageObject.messageOwner.random_id, messageObject.messageOwner.ttl);
                } else {
                    MessagesController instance = MessagesController.getInstance(this.currentAccount);
                    int id = messageObject.getId();
                    if (ChatObject.isChannel(this.currentChat)) {
                        i = this.currentChat.id;
                    }
                    instance.markMessageAsRead(id, i, messageObject.messageOwner.ttl);
                }
                messageObject.messageOwner.destroyTime = messageObject.messageOwner.ttl + ConnectionsManager.getInstance(this.currentAccount).getCurrentTime();
                return true;
            }
        }
        return false;
    }

    private void clearChatData() {
        this.messages.clear();
        this.messagesByDays.clear();
        this.waitingForLoad.clear();
        this.groupedMessagesMap.clear();
        this.progressView.setVisibility(this.chatAdapter.botInfoRow == -1 ? 0 : 4);
        this.chatListView.setEmptyView(null);
        for (int a = 0; a < 2; a++) {
            this.messagesDict[a].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[a] = ConnectionsManager.DEFAULT_DATACENTER_ID;
                this.minMessageId[a] = Integer.MIN_VALUE;
            } else {
                this.maxMessageId[a] = Integer.MIN_VALUE;
                this.minMessageId[a] = ConnectionsManager.DEFAULT_DATACENTER_ID;
            }
            this.maxDate[a] = Integer.MIN_VALUE;
            this.minDate[a] = 0;
            this.endReached[a] = false;
            this.cacheEndReached[a] = false;
            this.forwardEndReached[a] = true;
        }
        this.first = true;
        this.firstLoading = true;
        this.loading = true;
        this.loadingForward = false;
        this.waitingForReplyMessageLoad = false;
        this.startLoadFromMessageId = 0;
        this.last_message_id = 0;
        this.unreadMessageObject = null;
        this.createUnreadMessageAfterId = 0;
        this.createUnreadMessageAfterIdLoading = false;
        this.needSelectFromMessageId = false;
        this.chatAdapter.notifyDataSetChanged();
    }

    private void scrollToLastMessage(boolean pagedown) {
        if (!this.forwardEndReached[0] || this.first_unread_id != 0 || this.startLoadFromMessageId != 0) {
            clearChatData();
            this.waitingForLoad.add(Integer.valueOf(this.lastLoadIndex));
            MessagesController instance = MessagesController.getInstance(this.currentAccount);
            long j = this.dialog_id;
            int i = this.classGuid;
            boolean isChannel = ChatObject.isChannel(this.currentChat);
            int i2 = this.lastLoadIndex;
            this.lastLoadIndex = i2 + 1;
            instance.loadMessages(j, bot_help, 0, 0, true, 0, i, 0, 0, isChannel, i2);
        } else if (pagedown && this.chatLayoutManager.findFirstCompletelyVisibleItemPosition() == 0) {
            showPagedownButton(false, true);
            this.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
            updateVisibleRows();
        } else {
            this.chatLayoutManager.scrollToPositionWithOffset(0, 0);
        }
    }

    private void updateTextureViewPosition() {
        if (this.fragmentView != null) {
            boolean foundTextureViewMessage = false;
            int count = this.chatListView.getChildCount();
            int additionalTop = this.chatActivityEnterView.isTopViewVisible() ? AndroidUtilities.dp(48.0f) : 0;
            for (int a = 0; a < count; a++) {
                View view = this.chatListView.getChildAt(a);
                if (view instanceof ChatMessageCell) {
                    ChatMessageCell messageCell = (ChatMessageCell) view;
                    MessageObject messageObject = messageCell.getMessageObject();
                    if (this.roundVideoContainer != null && messageObject.isRoundVideo() && MediaController.getInstance().isPlayingMessage(messageObject)) {
                        ImageReceiver imageReceiver = messageCell.getPhotoImage();
                        this.roundVideoContainer.setTranslationX(((float) imageReceiver.getImageX()) + messageCell.getTranslationX());
                        this.roundVideoContainer.setTranslationY((float) (((this.fragmentView.getPaddingTop() + messageCell.getTop()) + imageReceiver.getImageY()) - additionalTop));
                        this.fragmentView.invalidate();
                        this.roundVideoContainer.invalidate();
                        foundTextureViewMessage = true;
                        break;
                    }
                }
            }
            if (this.roundVideoContainer != null) {
                MessageObject messageObject2 = MediaController.getInstance().getPlayingMessageObject();
                if (messageObject2 != null && messageObject2.eventId == 0) {
                    if (foundTextureViewMessage) {
                        MediaController.getInstance().setCurrentRoundVisible(true);
                        scrollToMessageId(messageObject2.getId(), 0, false, 0, true);
                    } else {
                        this.roundVideoContainer.setTranslationY((float) ((-AndroidUtilities.roundMessageSize) - 100));
                        this.fragmentView.invalidate();
                        if (messageObject2 != null && messageObject2.isRoundVideo()) {
                            if (!this.checkTextureViewPosition) {
                                if (PipRoundVideoView.getInstance() == null) {
                                    scrollToMessageId(messageObject2.getId(), 0, false, 0, true);
                                }
                            }
                            MediaController.getInstance().setCurrentRoundVisible(false);
                        }
                    }
                }
            }
        }
    }

    private void updateMessagesVisisblePart() {
        if (this.chatListView != null) {
            View view;
            View view2;
            int height;
            MessageObject messageObject;
            int count = r0.chatListView.getChildCount();
            int additionalTop = r0.chatActivityEnterView.isTopViewVisible() ? AndroidUtilities.dp(48.0f) : 0;
            int height2 = r0.chatListView.getMeasuredHeight();
            View minDateChild = null;
            View minChild = null;
            View minMessageChild = null;
            boolean foundTextureViewMessage = false;
            int maxNegativeUnreadId = ConnectionsManager.DEFAULT_DATACENTER_ID;
            int maxUnreadDate = Integer.MIN_VALUE;
            int minPositionHolder = ConnectionsManager.DEFAULT_DATACENTER_ID;
            int minPositionDateHolder = ConnectionsManager.DEFAULT_DATACENTER_ID;
            int maxPositiveUnreadId = Integer.MIN_VALUE;
            int a = 0;
            while (a < count) {
                int count2;
                View view3 = r0.chatListView.getChildAt(a);
                MessageObject messageObject2 = null;
                if (view3 instanceof ChatMessageCell) {
                    int viewTop;
                    MessageObject messageObject3;
                    ChatMessageCell messageCell = (ChatMessageCell) view3;
                    count2 = count;
                    count = messageCell.getTop();
                    int bottom = messageCell.getBottom();
                    if (count >= 0) {
                        view = minDateChild;
                        viewTop = 0;
                    } else {
                        view = minDateChild;
                        viewTop = -count;
                    }
                    view2 = minChild;
                    int viewBottom = messageCell.getMeasuredHeight();
                    if (viewBottom > height2) {
                        viewBottom = viewTop + height2;
                    }
                    height = height2;
                    messageCell.setVisiblePart(viewTop, viewBottom - viewTop);
                    height2 = messageCell.getMessageObject();
                    if (r0.roundVideoContainer != 0 && height2.isRoundVideo() && MediaController.getInstance().isPlayingMessage(height2)) {
                        minDateChild = messageCell.getPhotoImage();
                        messageObject3 = height2;
                        r0.roundVideoContainer.setTranslationX(((float) minDateChild.getImageX()) + messageCell.getTranslationX());
                        r0.roundVideoContainer.setTranslationY((float) (((r0.fragmentView.getPaddingTop() + count) + minDateChild.getImageY()) - additionalTop));
                        r0.fragmentView.invalidate();
                        r0.roundVideoContainer.invalidate();
                        foundTextureViewMessage = true;
                    } else {
                        messageObject3 = height2;
                    }
                    count = messageObject3;
                } else {
                    count2 = count;
                    height = height2;
                    view = minDateChild;
                    view2 = minChild;
                    if ((view3 instanceof ChatActionCell) != 0) {
                        messageObject2 = ((ChatActionCell) view3).getMessageObject();
                    }
                    count = messageObject2;
                }
                if (!(count == 0 || count.isOut() || !count.isUnread())) {
                    height2 = count.getId();
                    if (height2 > 0) {
                        maxPositiveUnreadId = Math.max(maxPositiveUnreadId, count.getId());
                    }
                    if (height2 < 0) {
                        maxNegativeUnreadId = Math.min(maxNegativeUnreadId, count.getId());
                    }
                    maxUnreadDate = Math.max(maxUnreadDate, count.messageOwner.date);
                }
                if (view3.getBottom() > r0.chatListView.getPaddingTop()) {
                    height2 = view3.getBottom();
                    if (height2 < minPositionHolder) {
                        minPositionHolder = height2;
                        if ((view3 instanceof ChatMessageCell) || (view3 instanceof ChatActionCell)) {
                            minMessageChild = view3;
                        }
                        view2 = view3;
                    }
                    if ((view3 instanceof ChatActionCell) && ((ChatActionCell) view3).getMessageObject().isDateObject) {
                        if (view3.getAlpha() != 1.0f) {
                            view3.setAlpha(1.0f);
                        }
                        if (height2 < minPositionDateHolder) {
                            minPositionDateHolder = height2;
                            minChild = view2;
                            minDateChild = view3;
                            a++;
                            count = count2;
                            height2 = height;
                        }
                    }
                }
                minDateChild = view;
                minChild = view2;
                a++;
                count = count2;
                height2 = height;
            }
            height = height2;
            view = minDateChild;
            view2 = minChild;
            if (r0.roundVideoContainer != null) {
                if (foundTextureViewMessage) {
                    MediaController.getInstance().setCurrentRoundVisible(true);
                } else {
                    r0.roundVideoContainer.setTranslationY((float) ((-AndroidUtilities.roundMessageSize) - 100));
                    r0.fragmentView.invalidate();
                    messageObject = MediaController.getInstance().getPlayingMessageObject();
                    if (messageObject != null && messageObject.isRoundVideo() && messageObject.eventId == 0 && r0.checkTextureViewPosition) {
                        MediaController.getInstance().setCurrentRoundVisible(false);
                    }
                }
            }
            if (minMessageChild != null) {
                if (minMessageChild instanceof ChatMessageCell) {
                    messageObject = ((ChatMessageCell) minMessageChild).getMessageObject();
                } else {
                    messageObject = ((ChatActionCell) minMessageChild).getMessageObject();
                }
                r0.floatingDateView.setCustomDate(messageObject.messageOwner.date);
            }
            r0.currentFloatingDateOnScreen = false;
            minChild = view2;
            boolean z = ((minChild instanceof ChatMessageCell) || (minChild instanceof ChatActionCell)) ? false : true;
            r0.currentFloatingTopIsNotMessage = z;
            if (view != null) {
                minDateChild = view;
                if (minDateChild.getTop() <= r0.chatListView.getPaddingTop()) {
                    if (!r0.currentFloatingTopIsNotMessage) {
                        if (minDateChild.getAlpha() != 0.0f) {
                            minDateChild.setAlpha(0.0f);
                        }
                        if (r0.floatingDateAnimation != null) {
                            r0.floatingDateAnimation.cancel();
                            r0.floatingDateAnimation = null;
                        }
                        if (r0.floatingDateView.getTag() == null) {
                            r0.floatingDateView.setTag(Integer.valueOf(1));
                        }
                        if (r0.floatingDateView.getAlpha() != 1.0f) {
                            r0.floatingDateView.setAlpha(1.0f);
                        }
                        r0.currentFloatingDateOnScreen = true;
                        height2 = minDateChild.getBottom() - r0.chatListView.getPaddingTop();
                        if (height2 > r0.floatingDateView.getMeasuredHeight() || height2 >= r0.floatingDateView.getMeasuredHeight() * 2) {
                            r0.floatingDateView.setTranslationY(0.0f);
                        } else {
                            r0.floatingDateView.setTranslationY((float) (((-r0.floatingDateView.getMeasuredHeight()) * 2) + height2));
                        }
                    }
                }
                if (minDateChild.getAlpha() != 1.0f) {
                    minDateChild.setAlpha(1.0f);
                }
                hideFloatingDateView(r0.currentFloatingTopIsNotMessage ^ true);
                height2 = minDateChild.getBottom() - r0.chatListView.getPaddingTop();
                if (height2 > r0.floatingDateView.getMeasuredHeight()) {
                }
                r0.floatingDateView.setTranslationY(0.0f);
            } else {
                hideFloatingDateView(true);
                r0.floatingDateView.setTranslationY(0.0f);
            }
            int i;
            int i2;
            if (r0.firstLoading) {
                i = minPositionDateHolder;
                i2 = maxUnreadDate;
                height2 = maxNegativeUnreadId;
            } else {
                MessagesController instance;
                long j;
                boolean z2;
                height2 = Integer.MIN_VALUE;
                if (maxPositiveUnreadId == Integer.MIN_VALUE) {
                    if (maxNegativeUnreadId == ConnectionsManager.DEFAULT_DATACENTER_ID) {
                        if (!r0.firstUnreadSent) {
                            r0.newUnreadMessageCount = 0;
                            r0.pagedownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(r0.newUnreadMessageCount)}));
                            if (r0.pagedownButtonCounter.getVisibility() != 4) {
                                r0.pagedownButtonCounter.setVisibility(4);
                            }
                            if (r0.chatLayoutManager.findFirstVisibleItemPosition() == 0) {
                                MessagesController.getInstance(r0.currentAccount).markDialogAsRead(r0.dialog_id, r0.minMessageId[0], r0.minMessageId[0], r0.maxDate[0], false, 0, true);
                                r0.firstUnreadSent = true;
                            }
                        }
                    }
                }
                a = 0;
                i2 = 0;
                while (i2 < r0.messages.size()) {
                    MessageObject messageObject4 = (MessageObject) r0.messages.get(i2);
                    count = messageObject4.getId();
                    if (maxPositiveUnreadId != height2 && count > 0 && count <= maxPositiveUnreadId && messageObject4.isUnread()) {
                        messageObject4.setIsRead();
                        a++;
                    }
                    if (maxNegativeUnreadId != ConnectionsManager.DEFAULT_DATACENTER_ID && count < 0 && count >= maxNegativeUnreadId && messageObject4.isUnread()) {
                        messageObject4.setIsRead();
                        a++;
                    }
                    i2++;
                    count = Integer.MAX_VALUE;
                    height2 = Integer.MIN_VALUE;
                }
                if (maxPositiveUnreadId != r0.minMessageId[0]) {
                    if (maxNegativeUnreadId != r0.minMessageId[0]) {
                        r0.newUnreadMessageCount -= a;
                        if (r0.newUnreadMessageCount < 0) {
                            r0.newUnreadMessageCount = 0;
                        }
                        r0.pagedownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(r0.newUnreadMessageCount)}));
                        if (r0.newUnreadMessageCount > 0) {
                            if (r0.pagedownButtonCounter.getVisibility() != 4) {
                                r0.pagedownButtonCounter.setVisibility(4);
                            }
                        } else if (r0.pagedownButtonCounter.getVisibility() != 0) {
                            r0.pagedownButtonCounter.setVisibility(0);
                            instance = MessagesController.getInstance(r0.currentAccount);
                            j = r0.dialog_id;
                            if (maxPositiveUnreadId != r0.minMessageId[0]) {
                                if (maxNegativeUnreadId != r0.minMessageId[0]) {
                                    z2 = false;
                                    i = minPositionDateHolder;
                                    height2 = maxNegativeUnreadId;
                                    instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                                    r0.firstUnreadSent = true;
                                }
                            }
                            z2 = true;
                            i = minPositionDateHolder;
                            height2 = maxNegativeUnreadId;
                            instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                            r0.firstUnreadSent = true;
                        }
                        instance = MessagesController.getInstance(r0.currentAccount);
                        j = r0.dialog_id;
                        if (maxPositiveUnreadId != r0.minMessageId[0]) {
                            if (maxNegativeUnreadId != r0.minMessageId[0]) {
                                z2 = false;
                                i = minPositionDateHolder;
                                height2 = maxNegativeUnreadId;
                                instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                                r0.firstUnreadSent = true;
                            }
                        }
                        z2 = true;
                        i = minPositionDateHolder;
                        height2 = maxNegativeUnreadId;
                        instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                        r0.firstUnreadSent = true;
                    }
                }
                r0.newUnreadMessageCount = 0;
                r0.pagedownButtonCounter.setText(String.format("%d", new Object[]{Integer.valueOf(r0.newUnreadMessageCount)}));
                if (r0.newUnreadMessageCount > 0) {
                    if (r0.pagedownButtonCounter.getVisibility() != 0) {
                        r0.pagedownButtonCounter.setVisibility(0);
                        instance = MessagesController.getInstance(r0.currentAccount);
                        j = r0.dialog_id;
                        if (maxPositiveUnreadId != r0.minMessageId[0]) {
                            if (maxNegativeUnreadId != r0.minMessageId[0]) {
                                z2 = false;
                                i = minPositionDateHolder;
                                height2 = maxNegativeUnreadId;
                                instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                                r0.firstUnreadSent = true;
                            }
                        }
                        z2 = true;
                        i = minPositionDateHolder;
                        height2 = maxNegativeUnreadId;
                        instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                        r0.firstUnreadSent = true;
                    }
                } else if (r0.pagedownButtonCounter.getVisibility() != 4) {
                    r0.pagedownButtonCounter.setVisibility(4);
                }
                instance = MessagesController.getInstance(r0.currentAccount);
                j = r0.dialog_id;
                if (maxPositiveUnreadId != r0.minMessageId[0]) {
                    if (maxNegativeUnreadId != r0.minMessageId[0]) {
                        z2 = false;
                        i = minPositionDateHolder;
                        height2 = maxNegativeUnreadId;
                        instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                        r0.firstUnreadSent = true;
                    }
                }
                z2 = true;
                i = minPositionDateHolder;
                height2 = maxNegativeUnreadId;
                instance.markDialogAsRead(j, maxPositiveUnreadId, maxNegativeUnreadId, maxUnreadDate, false, a, z2);
                r0.firstUnreadSent = true;
            }
        }
    }

    private void toggleMute(boolean instant) {
        Editor editor;
        StringBuilder stringBuilder;
        if (MessagesController.getInstance(this.currentAccount).isDialogMuted(this.dialog_id)) {
            editor = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            stringBuilder = new StringBuilder();
            stringBuilder.append("notify2_");
            stringBuilder.append(this.dialog_id);
            editor.putInt(stringBuilder.toString(), 0);
            MessagesStorage.getInstance(this.currentAccount).setDialogFlags(this.dialog_id, 0);
            editor.commit();
            TL_dialog dialog = (TL_dialog) MessagesController.getInstance(this.currentAccount).dialogs_dict.get(this.dialog_id);
            if (dialog != null) {
                dialog.notify_settings = new TL_peerNotifySettings();
            }
            NotificationsController.getInstance(this.currentAccount).updateServerNotificationsSettings(this.dialog_id);
        } else if (instant) {
            editor = MessagesController.getNotificationsSettings(this.currentAccount).edit();
            stringBuilder = new StringBuilder();
            stringBuilder.append("notify2_");
            stringBuilder.append(this.dialog_id);
            editor.putInt(stringBuilder.toString(), 2);
            MessagesStorage.getInstance(this.currentAccount).setDialogFlags(this.dialog_id, 1);
            editor.commit();
            TL_dialog dialog2 = (TL_dialog) MessagesController.getInstance(this.currentAccount).dialogs_dict.get(this.dialog_id);
            if (dialog2 != null) {
                dialog2.notify_settings = new TL_peerNotifySettings();
                dialog2.notify_settings.mute_until = ConnectionsManager.DEFAULT_DATACENTER_ID;
            }
            NotificationsController.getInstance(this.currentAccount).updateServerNotificationsSettings(this.dialog_id);
            NotificationsController.getInstance(this.currentAccount).removeNotificationsForDialog(this.dialog_id);
        } else {
            showDialog(AlertsCreator.createMuteAlert(getParentActivity(), this.dialog_id));
        }
    }

    private int getScrollOffsetForMessage(MessageObject object) {
        int offset = ConnectionsManager.DEFAULT_DATACENTER_ID;
        GroupedMessages groupedMessages = getValidGroupedMessage(object);
        if (groupedMessages != null) {
            float itemHeight;
            GroupedMessagePosition currentPosition = (GroupedMessagePosition) groupedMessages.positions.get(object);
            float maxH = ((float) Math.max(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y)) * 0.5f;
            if (currentPosition.siblingHeights != null) {
                itemHeight = currentPosition.siblingHeights[0];
            } else {
                itemHeight = currentPosition.ph;
            }
            SparseBooleanArray array = new SparseBooleanArray();
            float moveDiff = 0.0f;
            float totalHeight = 0.0f;
            for (int a = 0; a < groupedMessages.posArray.size(); a++) {
                GroupedMessagePosition pos = (GroupedMessagePosition) groupedMessages.posArray.get(a);
                if (array.indexOfKey(pos.minY) < 0 && pos.siblingHeights == null) {
                    array.put(pos.minY, true);
                    if (pos.minY < currentPosition.minY) {
                        moveDiff -= pos.ph;
                    } else if (pos.minY > currentPosition.minY) {
                        moveDiff += pos.ph;
                    }
                    totalHeight += pos.ph;
                }
            }
            if (Math.abs(totalHeight - itemHeight) < 0.02f) {
                offset = ((((int) (((float) this.chatListView.getMeasuredHeight()) - (totalHeight * maxH))) / 2) - this.chatListView.getPaddingTop()) - AndroidUtilities.dp(7.0f);
            } else {
                offset = ((((int) (((float) this.chatListView.getMeasuredHeight()) - ((itemHeight + moveDiff) * maxH))) / 2) - this.chatListView.getPaddingTop()) - AndroidUtilities.dp(7.0f);
            }
        }
        return Math.max(0, offset == ConnectionsManager.DEFAULT_DATACENTER_ID ? (this.chatListView.getMeasuredHeight() - object.getApproximateHeight()) / 2 : offset);
    }

    public void scrollToMessageId(int id, int fromMessageId, boolean select, int loadIndex, boolean smooth) {
        boolean query;
        int i = id;
        boolean z = select;
        int i2 = loadIndex;
        this.wasManualScroll = true;
        MessageObject object = (MessageObject) this.messagesDict[i2].get(i);
        boolean query2 = false;
        if (object == null) {
            query = false;
            query = true;
        } else if (r0.messages.indexOf(object) != -1) {
            if (z) {
                r0.highlightMessageId = i;
            } else {
                r0.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
            }
            int yOffset = getScrollOffsetForMessage(object);
            int a = 0;
            if (smooth) {
                if (r0.messages.get(r0.messages.size() - 1) == object) {
                    r0.chatListView.smoothScrollToPosition(r0.chatAdapter.getItemCount() - 1);
                } else {
                    r0.chatListView.smoothScrollToPosition(r0.chatAdapter.messagesStartRow + r0.messages.indexOf(object));
                }
            } else if (r0.messages.get(r0.messages.size() - 1) == object) {
                r0.chatLayoutManager.scrollToPositionWithOffset(r0.chatAdapter.getItemCount() - 1, yOffset, false);
            } else {
                r0.chatLayoutManager.scrollToPositionWithOffset(r0.chatAdapter.messagesStartRow + r0.messages.indexOf(object), yOffset, false);
            }
            updateVisibleRows();
            boolean found = false;
            int count = r0.chatListView.getChildCount();
            while (a < count) {
                View view = r0.chatListView.getChildAt(a);
                if (view instanceof ChatMessageCell) {
                    MessageObject messageObject = ((ChatMessageCell) view).getMessageObject();
                    if (messageObject != null) {
                        query = query2;
                        if (messageObject.getId() == object.getId()) {
                            found = true;
                            break;
                        }
                    }
                    query = query2;
                } else {
                    query = query2;
                    if (view instanceof ChatActionCell) {
                        query2 = ((ChatActionCell) view).getMessageObject();
                        if (query2 && query2.getId() == object.getId()) {
                            found = true;
                            break;
                        }
                    }
                    continue;
                }
                a++;
                query2 = query;
            }
            query = query2;
            if (!found) {
                showPagedownButton(true, true);
            }
        } else {
            query = false;
            query = true;
        }
        if (query) {
            if (r0.currentEncryptedChat == null || MessagesStorage.getInstance(r0.currentAccount).checkMessageId(r0.dialog_id, r0.startLoadFromMessageId)) {
                r0.waitingForLoad.clear();
                r0.waitingForReplyMessageLoad = true;
                r0.highlightMessageId = ConnectionsManager.DEFAULT_DATACENTER_ID;
                r0.scrollToMessagePosition = -10000;
                r0.startLoadFromMessageId = i;
                if (i == r0.createUnreadMessageAfterId) {
                    r0.createUnreadMessageAfterIdLoading = true;
                }
                r0.waitingForLoad.add(Integer.valueOf(r0.lastLoadIndex));
                MessagesController instance = MessagesController.getInstance(r0.currentAccount);
                long j = i2 == 0 ? r0.dialog_id : r0.mergeDialogId;
                int i3 = AndroidUtilities.isTablet() ? bot_help : 20;
                int i4 = r0.startLoadFromMessageId;
                int i5 = r0.classGuid;
                boolean isChannel = ChatObject.isChannel(r0.currentChat);
                int i6 = r0.lastLoadIndex;
                r0.lastLoadIndex = i6 + 1;
                instance.loadMessages(j, i3, i4, 0, true, 0, i5, 3, 0, isChannel, i6);
            } else {
                return;
            }
        }
        r0.returnToMessageId = fromMessageId;
        r0.returnToLoadIndex = i2;
        r0.needSelectFromMessageId = z;
    }

    private void showPagedownButton(boolean show, boolean animated) {
        if (this.pagedownButton != null) {
            Animator[] animatorArr;
            AnimatorSet animatorSet;
            if (show) {
                this.pagedownButtonShowedByScroll = false;
                if (this.pagedownButton.getTag() == null) {
                    if (this.pagedownButtonAnimation != null) {
                        this.pagedownButtonAnimation.cancel();
                        this.pagedownButtonAnimation = null;
                    }
                    if (animated) {
                        if (this.pagedownButton.getTranslationY() == 0.0f) {
                            this.pagedownButton.setTranslationY((float) AndroidUtilities.dp(100.0f));
                        }
                        this.pagedownButton.setVisibility(0);
                        this.pagedownButton.setTag(Integer.valueOf(1));
                        this.pagedownButtonAnimation = new AnimatorSet();
                        if (this.mentiondownButton.getVisibility() == 0) {
                            AnimatorSet animatorSet2 = this.pagedownButtonAnimation;
                            animatorArr = new Animator[2];
                            animatorArr[0] = ObjectAnimator.ofFloat(this.pagedownButton, "translationY", new float[]{0.0f});
                            animatorArr[1] = ObjectAnimator.ofFloat(this.mentiondownButton, "translationY", new float[]{(float) (-AndroidUtilities.dp(72.0f))});
                            animatorSet2.playTogether(animatorArr);
                        } else {
                            animatorSet = this.pagedownButtonAnimation;
                            Animator[] animatorArr2 = new Animator[1];
                            animatorArr2[0] = ObjectAnimator.ofFloat(this.pagedownButton, "translationY", new float[]{0.0f});
                            animatorSet.playTogether(animatorArr2);
                        }
                        this.pagedownButtonAnimation.setDuration(200);
                        this.pagedownButtonAnimation.start();
                    } else {
                        this.pagedownButton.setVisibility(0);
                    }
                }
            } else {
                this.returnToMessageId = 0;
                this.newUnreadMessageCount = 0;
                if (this.pagedownButton.getTag() != null) {
                    this.pagedownButton.setTag(null);
                    if (this.pagedownButtonAnimation != null) {
                        this.pagedownButtonAnimation.cancel();
                        this.pagedownButtonAnimation = null;
                    }
                    if (animated) {
                        this.pagedownButtonAnimation = new AnimatorSet();
                        if (this.mentiondownButton.getVisibility() == 0) {
                            AnimatorSet animatorSet3 = this.pagedownButtonAnimation;
                            animatorArr = new Animator[2];
                            animatorArr[0] = ObjectAnimator.ofFloat(this.pagedownButton, "translationY", new float[]{(float) AndroidUtilities.dp(100.0f)});
                            animatorArr[1] = ObjectAnimator.ofFloat(this.mentiondownButton, "translationY", new float[]{0.0f});
                            animatorSet3.playTogether(animatorArr);
                        } else {
                            animatorSet = this.pagedownButtonAnimation;
                            Animator[] animatorArr3 = new Animator[1];
                            animatorArr3[0] = ObjectAnimator.ofFloat(this.pagedownButton, "translationY", new float[]{(float) AndroidUtilities.dp(100.0f)});
                            animatorSet.playTogether(animatorArr3);
                        }
                        this.pagedownButtonAnimation.setDuration(200);
                        this.pagedownButtonAnimation.addListener(new AnimatorListenerAdapter() {
                            public void onAnimationEnd(Animator animation) {
                                ChatActivity.this.pagedownButtonCounter.setVisibility(4);
                                ChatActivity.this.pagedownButton.setVisibility(4);
                            }
                        });
                        this.pagedownButtonAnimation.start();
                    } else {
                        this.pagedownButton.setVisibility(4);
                    }
                }
            }
        }
    }

    private void showMentiondownButton(boolean show, boolean animated) {
        if (this.mentiondownButton != null) {
            if (!show) {
                this.returnToMessageId = 0;
                if (this.mentiondownButton.getTag() != null) {
                    this.mentiondownButton.setTag(null);
                    if (this.mentiondownButtonAnimation != null) {
                        this.mentiondownButtonAnimation.cancel();
                        this.mentiondownButtonAnimation = null;
                    }
                    if (animated) {
                        if (this.pagedownButton.getVisibility() == 0) {
                            this.mentiondownButtonAnimation = ObjectAnimator.ofFloat(this.mentiondownButton, "alpha", new float[]{1.0f, 0.0f}).setDuration(200);
                        } else {
                            this.mentiondownButtonAnimation = ObjectAnimator.ofFloat(this.mentiondownButton, "translationY", new float[]{(float) AndroidUtilities.dp(100.0f)}).setDuration(200);
                        }
                        this.mentiondownButtonAnimation.addListener(new AnimatorListenerAdapter() {
                            public void onAnimationEnd(Animator animation) {
                                ChatActivity.this.mentiondownButtonCounter.setVisibility(4);
                                ChatActivity.this.mentiondownButton.setVisibility(4);
                            }
                        });
                        this.mentiondownButtonAnimation.start();
                    } else {
                        this.mentiondownButton.setVisibility(4);
                    }
                }
            } else if (this.mentiondownButton.getTag() == null) {
                if (this.mentiondownButtonAnimation != null) {
                    this.mentiondownButtonAnimation.cancel();
                    this.mentiondownButtonAnimation = null;
                }
                if (animated) {
                    this.mentiondownButton.setVisibility(0);
                    this.mentiondownButton.setTag(Integer.valueOf(1));
                    if (this.pagedownButton.getVisibility() == 0) {
                        this.mentiondownButton.setTranslationY((float) (-AndroidUtilities.dp(72.0f)));
                        this.mentiondownButtonAnimation = ObjectAnimator.ofFloat(this.mentiondownButton, "alpha", new float[]{0.0f, 1.0f}).setDuration(200);
                    } else {
                        if (this.mentiondownButton.getTranslationY() == 0.0f) {
                            this.mentiondownButton.setTranslationY((float) AndroidUtilities.dp(100.0f));
                        }
                        this.mentiondownButtonAnimation = ObjectAnimator.ofFloat(this.mentiondownButton, "translationY", new float[]{0.0f}).setDuration(200);
                    }
                    this.mentiondownButtonAnimation.start();
                } else {
                    this.mentiondownButton.setVisibility(0);
                }
            }
        }
    }

    private void updateSecretStatus() {
        if (this.bottomOverlay != null) {
            boolean hideKeyboard = false;
            if (ChatObject.isChannel(this.currentChat) && this.currentChat.banned_rights != null && this.currentChat.banned_rights.send_messages) {
                if (AndroidUtilities.isBannedForever(this.currentChat.banned_rights.until_date)) {
                    this.bottomOverlayText.setText(LocaleController.getString("SendMessageRestrictedForever", R.string.SendMessageRestrictedForever));
                } else {
                    this.bottomOverlayText.setText(LocaleController.formatString("SendMessageRestricted", R.string.SendMessageRestricted, LocaleController.formatDateForBan((long) this.currentChat.banned_rights.until_date)));
                }
                this.bottomOverlay.setVisibility(0);
                if (this.mentionListAnimation != null) {
                    this.mentionListAnimation.cancel();
                    this.mentionListAnimation = null;
                }
                this.mentionContainer.setVisibility(8);
                this.mentionContainer.setTag(null);
                hideKeyboard = true;
            } else {
                if (this.currentEncryptedChat != null) {
                    if (this.bigEmptyView != null) {
                        if (this.currentEncryptedChat instanceof TL_encryptedChatRequested) {
                            this.bottomOverlayText.setText(LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing));
                            this.bottomOverlay.setVisibility(0);
                            hideKeyboard = true;
                        } else if (this.currentEncryptedChat instanceof TL_encryptedChatWaiting) {
                            TextView textView = this.bottomOverlayText;
                            Object[] objArr = new Object[1];
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("<b>");
                            stringBuilder.append(this.currentUser.first_name);
                            stringBuilder.append("</b>");
                            objArr[0] = stringBuilder.toString();
                            textView.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, objArr)));
                            this.bottomOverlay.setVisibility(0);
                            hideKeyboard = true;
                        } else if (this.currentEncryptedChat instanceof TL_encryptedChatDiscarded) {
                            this.bottomOverlayText.setText(LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected));
                            this.bottomOverlay.setVisibility(0);
                            this.chatActivityEnterView.setFieldText(TtmlNode.ANONYMOUS_REGION_ID);
                            DataQuery.getInstance(this.currentAccount).cleanDraft(this.dialog_id, false);
                            hideKeyboard = true;
                        } else if (this.currentEncryptedChat instanceof TL_encryptedChat) {
                            this.bottomOverlay.setVisibility(4);
                        }
                        checkRaiseSensors();
                        checkActionBarMenu();
                    }
                }
                this.bottomOverlay.setVisibility(4);
                return;
            }
            if (hideKeyboard) {
                this.chatActivityEnterView.hidePopup(false);
                if (getParentActivity() != null) {
                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
                }
            }
        }
    }

    public void onRequestPermissionsResultFragment(int requestCode, String[] permissions, int[] grantResults) {
        if (this.chatActivityEnterView != null) {
            this.chatActivityEnterView.onRequestPermissionsResultFragment(requestCode, permissions, grantResults);
        }
        if (this.mentionsAdapter != null) {
            this.mentionsAdapter.onRequestPermissionsResultFragment(requestCode, permissions, grantResults);
        }
        if (requestCode == 17 && this.chatAttachAlert != null) {
            this.chatAttachAlert.checkCamera(false);
        } else if (requestCode == 21) {
            if (!(getParentActivity() == null || grantResults == null || grantResults.length == 0 || grantResults[0] == 0)) {
                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                builder.setMessage(LocaleController.getString("PermissionNoAudioVideo", R.string.PermissionNoAudioVideo));
                builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", R.string.PermissionOpenSettings), new DialogInterface.OnClickListener() {
                    @TargetApi(9)
                    public void onClick(DialogInterface dialog, int which) {
                        try {
                            Intent intent = new Intent("android.settings.APPLICATION_DETAILS_SETTINGS");
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("package:");
                            stringBuilder.append(ApplicationLoader.applicationContext.getPackageName());
                            intent.setData(Uri.parse(stringBuilder.toString()));
                            ChatActivity.this.getParentActivity().startActivity(intent);
                        } catch (Throwable e) {
                            FileLog.e(e);
                        }
                    }
                });
                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                builder.show();
            }
        } else if (requestCode == 19 && grantResults != null && grantResults.length > 0 && grantResults[0] == 0) {
            processSelectedAttach(0);
        } else if (requestCode == 20 && grantResults != null && grantResults.length > 0 && grantResults[0] == 0) {
            processSelectedAttach(2);
        } else if (requestCode == 101 && this.currentUser != null) {
            if (grantResults.length <= 0 || grantResults[0] != 0) {
                VoIPHelper.permissionDenied(getParentActivity(), null);
            } else {
                VoIPHelper.startCall(this.currentUser, getParentActivity(), MessagesController.getInstance(this.currentAccount).getUserFull(this.currentUser.id));
            }
        }
    }

    private void checkActionBarMenu() {
        if ((this.currentEncryptedChat == null || (this.currentEncryptedChat instanceof TL_encryptedChat)) && ((this.currentChat == null || !ChatObject.isNotInChat(this.currentChat)) && (this.currentUser == null || !UserObject.isDeleted(this.currentUser)))) {
            if (this.timeItem2 != null) {
                this.timeItem2.setVisibility(0);
            }
            if (this.avatarContainer != null) {
                this.avatarContainer.showTimeItem();
            }
        } else {
            if (this.timeItem2 != null) {
                this.timeItem2.setVisibility(8);
            }
            if (this.avatarContainer != null) {
                this.avatarContainer.hideTimeItem();
            }
        }
        if (!(this.avatarContainer == null || this.currentEncryptedChat == null)) {
            this.avatarContainer.setTime(this.currentEncryptedChat.ttl);
        }
        checkAndUpdateAvatar();
    }

    private void addToSelectedMessages(MessageObject messageObject, boolean outside) {
        addToSelectedMessages(messageObject, outside, true);
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void addToSelectedMessages(org.telegram.messenger.MessageObject r23, boolean r24, boolean r25) {
        /*
        r22 = this;
        r0 = r22;
        r1 = r23;
        r2 = 0;
        r3 = 1;
        if (r1 == 0) goto L_0x0189;
    L_0x0008:
        r4 = r23.getDialogId();
        r6 = r0.dialog_id;
        r8 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1));
        if (r8 != 0) goto L_0x0014;
    L_0x0012:
        r4 = r2;
        goto L_0x0015;
    L_0x0014:
        r4 = r3;
    L_0x0015:
        r5 = 0;
        if (r24 == 0) goto L_0x0095;
    L_0x0019:
        r8 = r23.getGroupId();
        r10 = (r8 > r5 ? 1 : (r8 == r5 ? 0 : -1));
        if (r10 == 0) goto L_0x0095;
    L_0x0021:
        r5 = 0;
        r6 = r0.groupedMessagesMap;
        r8 = r23.getGroupId();
        r6 = r6.get(r8);
        r6 = (org.telegram.messenger.MessageObject.GroupedMessages) r6;
        if (r6 == 0) goto L_0x0094;
    L_0x0030:
        r8 = 0;
        r9 = r8;
        r8 = r5;
        r5 = r2;
    L_0x0034:
        r10 = r6.messages;
        r10 = r10.size();
        if (r5 >= r10) goto L_0x0057;
    L_0x003c:
        r10 = r6.messages;
        r10 = r10.get(r5);
        r10 = (org.telegram.messenger.MessageObject) r10;
        r11 = r0.selectedMessagesIds;
        r11 = r11[r4];
        r12 = r10.getId();
        r11 = r11.indexOfKey(r12);
        if (r11 >= 0) goto L_0x0054;
    L_0x0052:
        r8 = 1;
        r9 = r5;
    L_0x0054:
        r5 = r5 + 1;
        goto L_0x0034;
    L_0x0057:
        r5 = r2;
    L_0x0058:
        r10 = r6.messages;
        r10 = r10.size();
        if (r5 >= r10) goto L_0x0093;
    L_0x0060:
        r10 = r6.messages;
        r10 = r10.get(r5);
        r10 = (org.telegram.messenger.MessageObject) r10;
        if (r8 == 0) goto L_0x0081;
    L_0x006a:
        r11 = r0.selectedMessagesIds;
        r11 = r11[r4];
        r12 = r10.getId();
        r11 = r11.indexOfKey(r12);
        if (r11 >= 0) goto L_0x0090;
    L_0x0078:
        if (r5 != r9) goto L_0x007c;
    L_0x007a:
        r11 = r3;
        goto L_0x007d;
    L_0x007c:
        r11 = r2;
    L_0x007d:
        r0.addToSelectedMessages(r10, r2, r11);
        goto L_0x0090;
    L_0x0081:
        r11 = r6.messages;
        r11 = r11.size();
        r11 = r11 - r3;
        if (r5 != r11) goto L_0x008c;
    L_0x008a:
        r11 = r3;
        goto L_0x008d;
    L_0x008c:
        r11 = r2;
    L_0x008d:
        r0.addToSelectedMessages(r10, r2, r11);
    L_0x0090:
        r5 = r5 + 1;
        goto L_0x0058;
    L_0x0093:
        r5 = r8;
    L_0x0094:
        return;
    L_0x0095:
        r8 = r0.selectedMessagesIds;
        r8 = r8[r4];
        r9 = r23.getId();
        r8 = r8.indexOfKey(r9);
        if (r8 < 0) goto L_0x010c;
    L_0x00a3:
        r8 = r0.selectedMessagesIds;
        r8 = r8[r4];
        r9 = r23.getId();
        r8.remove(r9);
        r8 = r1.type;
        if (r8 == 0) goto L_0x00b6;
    L_0x00b2:
        r8 = r1.caption;
        if (r8 == 0) goto L_0x00c1;
    L_0x00b6:
        r8 = r0.selectedMessagesCanCopyIds;
        r8 = r8[r4];
        r9 = r23.getId();
        r8.remove(r9);
    L_0x00c1:
        r8 = r23.isSticker();
        if (r8 == 0) goto L_0x00d2;
    L_0x00c7:
        r8 = r0.selectedMessagesCanStarIds;
        r8 = r8[r4];
        r9 = r23.getId();
        r8.remove(r9);
    L_0x00d2:
        r8 = r0.currentChat;
        r8 = r1.canEditMessage(r8);
        if (r8 == 0) goto L_0x00fd;
    L_0x00da:
        r8 = r23.getGroupId();
        r10 = (r8 > r5 ? 1 : (r8 == r5 ? 0 : -1));
        if (r10 == 0) goto L_0x00fd;
    L_0x00e2:
        r5 = r0.groupedMessagesMap;
        r8 = r23.getGroupId();
        r5 = r5.get(r8);
        r5 = (org.telegram.messenger.MessageObject.GroupedMessages) r5;
        if (r5 == 0) goto L_0x00fd;
    L_0x00f0:
        r6 = r5.messages;
        r6 = r6.size();
        if (r6 <= r3) goto L_0x00fd;
    L_0x00f8:
        r6 = r0.canEditMessagesCount;
        r6 = r6 - r3;
        r0.canEditMessagesCount = r6;
    L_0x00fd:
        r5 = r0.currentChat;
        r5 = r1.canDeleteMessage(r5);
        if (r5 != 0) goto L_0x0189;
    L_0x0105:
        r5 = r0.cantDeleteMessagesCount;
        r5 = r5 - r3;
        r0.cantDeleteMessagesCount = r5;
        goto L_0x0189;
    L_0x010c:
        r8 = r0.selectedMessagesIds;
        r8 = r8[r2];
        r8 = r8.size();
        r9 = r0.selectedMessagesIds;
        r9 = r9[r3];
        r9 = r9.size();
        r8 = r8 + r9;
        r9 = 100;
        if (r8 < r9) goto L_0x0122;
    L_0x0121:
        return;
    L_0x0122:
        r8 = r0.selectedMessagesIds;
        r8 = r8[r4];
        r9 = r23.getId();
        r8.put(r9, r1);
        r8 = r1.type;
        if (r8 == 0) goto L_0x0135;
    L_0x0131:
        r8 = r1.caption;
        if (r8 == 0) goto L_0x0140;
    L_0x0135:
        r8 = r0.selectedMessagesCanCopyIds;
        r8 = r8[r4];
        r9 = r23.getId();
        r8.put(r9, r1);
    L_0x0140:
        r8 = r23.isSticker();
        if (r8 == 0) goto L_0x0151;
    L_0x0146:
        r8 = r0.selectedMessagesCanStarIds;
        r8 = r8[r4];
        r9 = r23.getId();
        r8.put(r9, r1);
    L_0x0151:
        r8 = r0.currentChat;
        r8 = r1.canEditMessage(r8);
        if (r8 == 0) goto L_0x017c;
    L_0x0159:
        r8 = r23.getGroupId();
        r10 = (r8 > r5 ? 1 : (r8 == r5 ? 0 : -1));
        if (r10 == 0) goto L_0x017c;
    L_0x0161:
        r5 = r0.groupedMessagesMap;
        r8 = r23.getGroupId();
        r5 = r5.get(r8);
        r5 = (org.telegram.messenger.MessageObject.GroupedMessages) r5;
        if (r5 == 0) goto L_0x017c;
    L_0x016f:
        r6 = r5.messages;
        r6 = r6.size();
        if (r6 <= r3) goto L_0x017c;
    L_0x0177:
        r6 = r0.canEditMessagesCount;
        r6 = r6 + r3;
        r0.canEditMessagesCount = r6;
    L_0x017c:
        r5 = r0.currentChat;
        r5 = r1.canDeleteMessage(r5);
        if (r5 != 0) goto L_0x0189;
    L_0x0184:
        r5 = r0.cantDeleteMessagesCount;
        r5 = r5 + r3;
        r0.cantDeleteMessagesCount = r5;
    L_0x0189:
        if (r25 == 0) goto L_0x042c;
    L_0x018b:
        r5 = r0.actionBar;
        r5 = r5.isActionModeShowed();
        if (r5 == 0) goto L_0x042c;
    L_0x0193:
        r5 = r0.selectedMessagesIds;
        r5 = r5[r2];
        r5 = r5.size();
        r6 = r0.selectedMessagesIds;
        r6 = r6[r3];
        r6 = r6.size();
        r5 = r5 + r6;
        if (r5 != 0) goto L_0x01b2;
    L_0x01a6:
        r6 = r0.actionBar;
        r6.hideActionMode();
        r0.updatePinnedMessageView(r3);
        r0.startReplyOnTextChange = r2;
        goto L_0x042c;
    L_0x01b2:
        r6 = r0.actionBar;
        r6 = r6.createActionMode();
        r8 = 10;
        r6 = r6.getItem(r8);
        r8 = r0.actionBar;
        r8 = r8.createActionMode();
        r9 = 22;
        r8 = r8.getItem(r9);
        r9 = r0.actionBar;
        r9 = r9.createActionMode();
        r10 = 23;
        r9 = r9.getItem(r10);
        r10 = r0.actionBar;
        r10 = r10.createActionMode();
        r11 = 19;
        r10 = r10.getItem(r11);
        r11 = r6.getVisibility();
        r12 = r8.getVisibility();
        r13 = r0.selectedMessagesCanCopyIds;
        r13 = r13[r2];
        r13 = r13.size();
        r14 = r0.selectedMessagesCanCopyIds;
        r14 = r14[r3];
        r14 = r14.size();
        r13 = r13 + r14;
        if (r13 == 0) goto L_0x01ff;
    L_0x01fd:
        r13 = r2;
        goto L_0x0201;
    L_0x01ff:
        r13 = 8;
    L_0x0201:
        r6.setVisibility(r13);
        r13 = r0.currentAccount;
        r13 = org.telegram.messenger.DataQuery.getInstance(r13);
        r13 = r13.canAddStickerToFavorites();
        if (r13 == 0) goto L_0x0225;
    L_0x0210:
        r13 = r0.selectedMessagesCanStarIds;
        r13 = r13[r2];
        r13 = r13.size();
        r15 = r0.selectedMessagesCanStarIds;
        r15 = r15[r3];
        r15 = r15.size();
        r13 = r13 + r15;
        if (r13 != r5) goto L_0x0225;
    L_0x0223:
        r13 = r2;
        goto L_0x0227;
    L_0x0225:
        r13 = 8;
    L_0x0227:
        r8.setVisibility(r13);
        r13 = r6.getVisibility();
        r15 = r8.getVisibility();
        r14 = r0.actionBar;
        r14 = r14.createActionMode();
        r2 = 12;
        r2 = r14.getItem(r2);
        r14 = r0.cantDeleteMessagesCount;
        if (r14 != 0) goto L_0x0244;
    L_0x0242:
        r14 = 0;
        goto L_0x0246;
    L_0x0244:
        r14 = 8;
    L_0x0246:
        r2.setVisibility(r14);
        if (r9 == 0) goto L_0x026a;
    L_0x024b:
        r2 = r0.canEditMessagesCount;
        if (r2 != r3) goto L_0x0265;
    L_0x024f:
        r2 = r0.selectedMessagesIds;
        r14 = 0;
        r2 = r2[r14];
        r2 = r2.size();
        r14 = r0.selectedMessagesIds;
        r14 = r14[r3];
        r14 = r14.size();
        r2 = r2 + r14;
        if (r2 != r3) goto L_0x0265;
    L_0x0263:
        r2 = 0;
        goto L_0x0267;
    L_0x0265:
        r2 = 8;
    L_0x0267:
        r9.setVisibility(r2);
    L_0x026a:
        r2 = 0;
        r0.hasUnfavedSelected = r2;
        r2 = 0;
    L_0x026e:
        r14 = 2;
        if (r2 >= r14) goto L_0x02b1;
    L_0x0271:
        r17 = 0;
    L_0x0273:
        r18 = r17;
        r14 = r0.selectedMessagesCanStarIds;
        r14 = r14[r2];
        r14 = r14.size();
        r3 = r18;
        if (r3 >= r14) goto L_0x02a6;
    L_0x0281:
        r14 = r0.selectedMessagesCanStarIds;
        r14 = r14[r2];
        r14 = r14.valueAt(r3);
        r14 = (org.telegram.messenger.MessageObject) r14;
        r1 = r0.currentAccount;
        r1 = org.telegram.messenger.DataQuery.getInstance(r1);
        r4 = r14.getDocument();
        r1 = r1.isStickerInFavorites(r4);
        if (r1 != 0) goto L_0x029f;
    L_0x029b:
        r1 = 1;
        r0.hasUnfavedSelected = r1;
        goto L_0x02a6;
    L_0x029f:
        r17 = r3 + 1;
        r1 = r23;
        r3 = 1;
        r14 = 2;
        goto L_0x0273;
    L_0x02a6:
        r1 = r0.hasUnfavedSelected;
        if (r1 == 0) goto L_0x02ab;
    L_0x02aa:
        goto L_0x02b1;
    L_0x02ab:
        r2 = r2 + 1;
        r1 = r23;
        r3 = 1;
        goto L_0x026e;
    L_0x02b1:
        r1 = r0.hasUnfavedSelected;
        if (r1 == 0) goto L_0x02b9;
    L_0x02b5:
        r1 = 2131165350; // 0x7f0700a6 float:1.7944915E38 double:1.052935585E-314;
        goto L_0x02bc;
    L_0x02b9:
        r1 = 2131165357; // 0x7f0700ad float:1.7944929E38 double:1.0529355885E-314;
    L_0x02bc:
        r8.setIcon(r1);
        if (r10 == 0) goto L_0x042c;
    L_0x02c1:
        r1 = 1;
        r2 = r0.currentEncryptedChat;
        if (r2 == 0) goto L_0x02d2;
    L_0x02c6:
        r2 = r0.currentEncryptedChat;
        r2 = r2.layer;
        r2 = org.telegram.messenger.AndroidUtilities.getPeerLayerVersion(r2);
        r3 = 46;
        if (r2 < r3) goto L_0x030c;
    L_0x02d2:
        r2 = r0.isBroadcast;
        if (r2 != 0) goto L_0x030c;
    L_0x02d6:
        r2 = r0.bottomOverlayChat;
        if (r2 == 0) goto L_0x02e2;
    L_0x02da:
        r2 = r0.bottomOverlayChat;
        r2 = r2.getVisibility();
        if (r2 == 0) goto L_0x030c;
    L_0x02e2:
        r2 = r0.currentChat;
        if (r2 == 0) goto L_0x030d;
    L_0x02e6:
        r2 = r0.currentChat;
        r2 = org.telegram.messenger.ChatObject.isNotInChat(r2);
        if (r2 != 0) goto L_0x030c;
    L_0x02ee:
        r2 = r0.currentChat;
        r2 = org.telegram.messenger.ChatObject.isChannel(r2);
        if (r2 == 0) goto L_0x0304;
    L_0x02f6:
        r2 = r0.currentChat;
        r2 = org.telegram.messenger.ChatObject.canPost(r2);
        if (r2 != 0) goto L_0x0304;
    L_0x02fe:
        r2 = r0.currentChat;
        r2 = r2.megagroup;
        if (r2 == 0) goto L_0x030c;
    L_0x0304:
        r2 = r0.currentChat;
        r2 = org.telegram.messenger.ChatObject.canSendMessages(r2);
        if (r2 != 0) goto L_0x030d;
    L_0x030c:
        r1 = 0;
    L_0x030d:
        if (r1 == 0) goto L_0x0327;
    L_0x030f:
        r2 = r0.selectedMessagesIds;
        r3 = 0;
        r2 = r2[r3];
        r2 = r2.size();
        r3 = r0.selectedMessagesIds;
        r4 = 1;
        r3 = r3[r4];
        r3 = r3.size();
        r2 = r2 + r3;
        if (r2 != r4) goto L_0x0327;
    L_0x0324:
        r16 = 0;
        goto L_0x0329;
    L_0x0327:
        r16 = 8;
    L_0x0329:
        r2 = r16;
        if (r2 != 0) goto L_0x0337;
    L_0x032d:
        r3 = r0.chatActivityEnterView;
        r3 = r3.hasText();
        if (r3 != 0) goto L_0x0337;
    L_0x0335:
        r3 = 1;
        goto L_0x0338;
    L_0x0337:
        r3 = 0;
    L_0x0338:
        r0.startReplyOnTextChange = r3;
        r3 = r10.getVisibility();
        if (r3 == r2) goto L_0x042c;
    L_0x0340:
        r3 = r0.replyButtonAnimation;
        if (r3 == 0) goto L_0x0349;
    L_0x0344:
        r3 = r0.replyButtonAnimation;
        r3.cancel();
    L_0x0349:
        r4 = 1065353216; // 0x3f800000 float:1.0 double:5.263544247E-315;
        if (r11 != r13) goto L_0x0413;
    L_0x034d:
        if (r12 == r15) goto L_0x0357;
    L_0x034f:
        r19 = r1;
        r20 = r5;
        r21 = r6;
        goto L_0x0419;
    L_0x0357:
        r14 = new android.animation.AnimatorSet;
        r14.<init>();
        r0.replyButtonAnimation = r14;
        r14 = 1113063424; // 0x42580000 float:54.0 double:5.499263994E-315;
        r3 = org.telegram.messenger.AndroidUtilities.dp(r14);
        r3 = (float) r3;
        r10.setPivotX(r3);
        r3 = org.telegram.messenger.AndroidUtilities.dp(r14);
        r3 = (float) r3;
        r9.setPivotX(r3);
        r14 = 4;
        if (r2 != 0) goto L_0x03b9;
    L_0x0373:
        r10.setVisibility(r2);
        r3 = r0.replyButtonAnimation;
        r14 = new android.animation.Animator[r14];
        r19 = r1;
        r1 = "alpha";
        r20 = r5;
        r21 = r6;
        r5 = 1;
        r6 = new float[r5];
        r16 = 0;
        r6[r16] = r4;
        r1 = android.animation.ObjectAnimator.ofFloat(r10, r1, r6);
        r14[r16] = r1;
        r1 = "scaleX";
        r6 = new float[r5];
        r6[r16] = r4;
        r1 = android.animation.ObjectAnimator.ofFloat(r10, r1, r6);
        r14[r5] = r1;
        r1 = "alpha";
        r6 = new float[r5];
        r6[r16] = r4;
        r1 = android.animation.ObjectAnimator.ofFloat(r9, r1, r6);
        r6 = 2;
        r14[r6] = r1;
        r1 = "scaleX";
        r5 = new float[r5];
        r5[r16] = r4;
        r1 = android.animation.ObjectAnimator.ofFloat(r9, r1, r5);
        r4 = 3;
        r14[r4] = r1;
        r3.playTogether(r14);
        goto L_0x03fc;
    L_0x03b9:
        r19 = r1;
        r20 = r5;
        r21 = r6;
        r1 = r0.replyButtonAnimation;
        r3 = new android.animation.Animator[r14];
        r4 = "alpha";
        r5 = 1;
        r6 = new float[r5];
        r14 = 0;
        r16 = 0;
        r6[r14] = r16;
        r4 = android.animation.ObjectAnimator.ofFloat(r10, r4, r6);
        r3[r14] = r4;
        r4 = "scaleX";
        r6 = new float[r5];
        r6[r14] = r16;
        r4 = android.animation.ObjectAnimator.ofFloat(r10, r4, r6);
        r3[r5] = r4;
        r4 = "alpha";
        r6 = new float[r5];
        r6[r14] = r16;
        r4 = android.animation.ObjectAnimator.ofFloat(r9, r4, r6);
        r6 = 2;
        r3[r6] = r4;
        r4 = "scaleX";
        r5 = new float[r5];
        r5[r14] = r16;
        r4 = android.animation.ObjectAnimator.ofFloat(r9, r4, r5);
        r5 = 3;
        r3[r5] = r4;
        r1.playTogether(r3);
    L_0x03fc:
        r1 = r0.replyButtonAnimation;
        r3 = 100;
        r1.setDuration(r3);
        r1 = r0.replyButtonAnimation;
        r3 = new org.telegram.ui.ChatActivity$81;
        r3.<init>(r2, r10);
        r1.addListener(r3);
        r1 = r0.replyButtonAnimation;
        r1.start();
        goto L_0x042c;
    L_0x0413:
        r19 = r1;
        r20 = r5;
        r21 = r6;
    L_0x0419:
        if (r2 != 0) goto L_0x0422;
    L_0x041b:
        r10.setAlpha(r4);
        r10.setScaleX(r4);
        goto L_0x0429;
    L_0x0422:
        r1 = 0;
        r10.setAlpha(r1);
        r10.setScaleX(r1);
    L_0x0429:
        r10.setVisibility(r2);
    L_0x042c:
        return;
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.ui.ChatActivity.addToSelectedMessages(org.telegram.messenger.MessageObject, boolean, boolean):void");
    }

    private void processRowSelect(View view, boolean outside) {
        MessageObject message = null;
        if (view instanceof ChatMessageCell) {
            message = ((ChatMessageCell) view).getMessageObject();
        } else if (view instanceof ChatActionCell) {
            message = ((ChatActionCell) view).getMessageObject();
        }
        int type = getMessageType(message);
        if (type >= 2) {
            if (type != 20) {
                addToSelectedMessages(message, outside);
                updateActionModeTitle();
                updateVisibleRows();
            }
        }
    }

    private void updateActionModeTitle() {
        if (this.actionBar.isActionModeShowed()) {
            if (!(this.selectedMessagesIds[0].size() == 0 && this.selectedMessagesIds[1].size() == 0)) {
                this.selectedMessagesCountTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), true);
            }
        }
    }

    private void updateTitle() {
        if (this.avatarContainer != null) {
            if (this.currentChat != null) {
                this.avatarContainer.setTitle(this.currentChat.title);
            } else if (this.currentUser != null) {
                if (this.currentUser.self) {
                    this.avatarContainer.setTitle(LocaleController.getString("SavedMessages", R.string.SavedMessages));
                } else if (MessagesController.isSupportId(this.currentUser.id) || ContactsController.getInstance(this.currentAccount).contactsDict.get(Integer.valueOf(this.currentUser.id)) != null || (ContactsController.getInstance(this.currentAccount).contactsDict.size() == 0 && ContactsController.getInstance(this.currentAccount).isLoadingContacts())) {
                    this.avatarContainer.setTitle(UserObject.getUserName(this.currentUser));
                } else if (TextUtils.isEmpty(this.currentUser.phone)) {
                    this.avatarContainer.setTitle(UserObject.getUserName(this.currentUser));
                } else {
                    ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
                    PhoneFormat instance = PhoneFormat.getInstance();
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("+");
                    stringBuilder.append(this.currentUser.phone);
                    chatAvatarContainer.setTitle(instance.format(stringBuilder.toString()));
                }
            }
        }
    }

    private void updateBotButtons() {
        if (!(this.headerItem == null || this.currentUser == null || this.currentEncryptedChat != null)) {
            if (this.currentUser.bot) {
                boolean hasHelp = false;
                boolean hasSettings = false;
                if (this.botInfo.size() != 0) {
                    boolean hasSettings2 = false;
                    hasSettings = false;
                    for (int b = 0; b < this.botInfo.size(); b++) {
                        BotInfo info = (BotInfo) this.botInfo.valueAt(b);
                        boolean hasSettings3 = hasSettings2;
                        hasSettings2 = hasSettings;
                        for (int a = 0; a < info.commands.size(); a++) {
                            TL_botCommand command = (TL_botCommand) info.commands.get(a);
                            if (command.command.toLowerCase().equals("help")) {
                                hasSettings2 = true;
                            } else if (command.command.toLowerCase().equals("settings")) {
                                hasSettings3 = true;
                            }
                            if (hasSettings3 && hasSettings) {
                                break;
                            }
                        }
                        hasSettings = hasSettings2;
                        hasSettings2 = hasSettings3;
                    }
                    hasHelp = hasSettings;
                    hasSettings = hasSettings2;
                }
                if (hasHelp) {
                    this.headerItem.showSubItem(bot_help);
                } else {
                    this.headerItem.hideSubItem(bot_help);
                }
                if (hasSettings) {
                    this.headerItem.showSubItem(bot_settings);
                } else {
                    this.headerItem.hideSubItem(bot_settings);
                }
            }
        }
    }

    private void updateTitleIcons() {
        if (this.avatarContainer != null) {
            Drawable drawable = null;
            Drawable rightIcon = MessagesController.getInstance(this.currentAccount).isDialogMuted(this.dialog_id) ? Theme.chat_muteIconDrawable : null;
            ChatAvatarContainer chatAvatarContainer = this.avatarContainer;
            if (this.currentEncryptedChat != null) {
                drawable = Theme.chat_lockIconDrawable;
            }
            chatAvatarContainer.setTitleIcons(drawable, rightIcon);
            if (this.muteItem != null) {
                if (rightIcon != null) {
                    this.muteItem.setText(LocaleController.getString("UnmuteNotifications", R.string.UnmuteNotifications));
                } else {
                    this.muteItem.setText(LocaleController.getString("MuteNotifications", R.string.MuteNotifications));
                }
            }
        }
    }

    private void checkAndUpdateAvatar() {
        if (this.currentUser != null) {
            User user = MessagesController.getInstance(this.currentAccount).getUser(Integer.valueOf(this.currentUser.id));
            if (user != null) {
                this.currentUser = user;
            } else {
                return;
            }
        } else if (this.currentChat != null) {
            Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Integer.valueOf(this.currentChat.id));
            if (chat != null) {
                this.currentChat = chat;
            } else {
                return;
            }
        }
        if (this.avatarContainer != null) {
            this.avatarContainer.checkAndUpdateAvatar();
        }
    }

    public void openVideoEditor(String videoPath, String caption) {
        ChatActivity chatActivity = this;
        if (getParentActivity() != null) {
            String str = videoPath;
            final Bitmap thumb = ThumbnailUtils.createVideoThumbnail(str, 1);
            PhotoViewer.getInstance().setParentActivity(getParentActivity());
            final ArrayList<Object> cameraPhoto = new ArrayList();
            PhotoEntry entry = new PhotoEntry(0, 0, 0, str, 0, true);
            entry.caption = caption;
            cameraPhoto.add(entry);
            PhotoViewer.getInstance().openPhotoForSelect(cameraPhoto, 0, 2, new EmptyPhotoViewerProvider() {
                public BitmapHolder getThumbForPhoto(MessageObject messageObject, FileLocation fileLocation, int index) {
                    return new BitmapHolder(thumb, null);
                }

                public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
                    ChatActivity.this.sendMedia((PhotoEntry) cameraPhoto.get(0), videoEditedInfo);
                }

                public boolean canScrollAway() {
                    return false;
                }
            }, chatActivity);
            return;
        }
        String str2 = caption;
        SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, chatActivity.dialog_id, chatActivity.replyingMessageObject, null, null, 0);
        showReplyPanel(false, null, null, null, false);
        DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
    }

    private void showAttachmentError() {
        if (getParentActivity() != null) {
            Toast.makeText(getParentActivity(), LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment), 0).show();
        }
    }

    private void sendUriAsDocument(Uri uri) {
        if (uri != null) {
            String firstExtraction;
            String extractUriFrom = uri.toString();
            if (extractUriFrom.contains("com.google.android.apps.photos.contentprovider")) {
                try {
                    firstExtraction = extractUriFrom.split("/1/")[1];
                    int index = firstExtraction.indexOf("/ACTUAL");
                    if (index != -1) {
                        uri = Uri.parse(URLDecoder.decode(firstExtraction.substring(0, index), C.UTF8_NAME));
                    }
                } catch (Throwable e) {
                    FileLog.e(e);
                }
            }
            firstExtraction = AndroidUtilities.getPath(uri);
            String originalPath = firstExtraction;
            if (firstExtraction == null) {
                originalPath = uri.toString();
                firstExtraction = MediaController.copyFileToCache(uri, "file");
            }
            if (firstExtraction == null) {
                showAttachmentError();
                return;
            }
            SendMessagesHelper.prepareSendingDocument(firstExtraction, originalPath, null, null, this.dialog_id, this.replyingMessageObject, null);
        }
    }

    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
        Throwable e;
        ChatActivity chatActivity = this;
        int i = requestCode;
        Intent intent = data;
        if (resultCode == -1) {
            if (i != 0) {
                if (i != 2) {
                    String videoPath;
                    if (i == 1) {
                        if (intent != null) {
                            if (data.getData() != null) {
                                Uri uri = data.getData();
                                if (uri.toString().contains(MimeTypes.BASE_TYPE_VIDEO)) {
                                    videoPath = null;
                                    try {
                                        videoPath = AndroidUtilities.getPath(uri);
                                    } catch (Throwable e2) {
                                        FileLog.e(e2);
                                    }
                                    if (videoPath == null) {
                                        showAttachmentError();
                                    }
                                    if (chatActivity.paused) {
                                        chatActivity.startVideoEdit = videoPath;
                                    } else {
                                        openVideoEditor(videoPath, null);
                                    }
                                } else {
                                    SendMessagesHelper.prepareSendingPhoto(null, uri, chatActivity.dialog_id, chatActivity.replyingMessageObject, null, null, null, null, 0);
                                }
                                showReplyPanel(false, null, null, null, null);
                                DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
                            }
                        }
                        showAttachmentError();
                        return;
                    }
                    int i2 = 0;
                    if (i == 21) {
                        if (intent == null) {
                            showAttachmentError();
                            return;
                        }
                        if (data.getData() != null) {
                            sendUriAsDocument(data.getData());
                        } else if (data.getClipData() != null) {
                            ClipData clipData = data.getClipData();
                            while (true) {
                                int i3 = i2;
                                if (i3 >= clipData.getItemCount()) {
                                    break;
                                }
                                sendUriAsDocument(clipData.getItemAt(i3).getUri());
                                i2 = i3 + 1;
                            }
                        } else {
                            showAttachmentError();
                        }
                        showReplyPanel(false, null, null, null, false);
                        DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
                    } else if (i == bot_settings) {
                        if (intent != null) {
                            if (data.getData() != null) {
                                Uri uri2 = data.getData();
                                Cursor c;
                                try {
                                    c = getParentActivity().getContentResolver().query(uri2, new String[]{"display_name", "data1"}, null, null, null);
                                    if (c != null) {
                                        boolean sent;
                                        boolean sent2 = false;
                                        while (true) {
                                            sent = sent2;
                                            try {
                                                if (!c.moveToNext()) {
                                                    break;
                                                }
                                                sent2 = true;
                                                videoPath = c.getString(0);
                                                String number = c.getString(1);
                                                User user = new TL_user();
                                                user.first_name = videoPath;
                                                user.last_name = TtmlNode.ANONYMOUS_REGION_ID;
                                                user.phone = number;
                                                SendMessagesHelper.getInstance(chatActivity.currentAccount).sendMessage(user, chatActivity.dialog_id, chatActivity.replyingMessageObject, null, null);
                                            } catch (Throwable th) {
                                                e2 = th;
                                            }
                                        }
                                        if (sent) {
                                            showReplyPanel(false, null, null, null, false);
                                            DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
                                        }
                                    }
                                    if (c != null) {
                                        try {
                                            if (!c.isClosed()) {
                                                c.close();
                                            }
                                        } catch (Throwable e22) {
                                            FileLog.e(e22);
                                        }
                                    }
                                } catch (Throwable th2) {
                                    e22 = th2;
                                    c = null;
                                    Throwable th3 = e22;
                                    if (c != null) {
                                        try {
                                            if (!c.isClosed()) {
                                                c.close();
                                            }
                                        } catch (Throwable e222) {
                                            FileLog.e(e222);
                                        }
                                    }
                                    throw th3;
                                }
                            }
                        }
                        showAttachmentError();
                        return;
                    }
                }
            }
            createChatAttachView();
            if (chatActivity.chatAttachAlert != null) {
                chatActivity.chatAttachAlert.onActivityResultFragment(i, intent, chatActivity.currentPicturePath);
            }
            chatActivity.currentPicturePath = null;
        }
    }

    public void saveSelfArgs(Bundle args) {
        if (this.currentPicturePath != null) {
            args.putString("path", this.currentPicturePath);
        }
    }

    public void restoreSelfArgs(Bundle args) {
        this.currentPicturePath = args.getString("path");
    }

    private void removeUnreadPlane(boolean scrollToEnd) {
        if (this.unreadMessageObject != null) {
            if (scrollToEnd) {
                boolean[] zArr = this.forwardEndReached;
                this.forwardEndReached[1] = true;
                zArr[0] = true;
                this.first_unread_id = 0;
                this.last_message_id = 0;
            }
            this.createUnreadMessageAfterId = 0;
            this.createUnreadMessageAfterIdLoading = false;
            removeMessageObject(this.unreadMessageObject);
            this.unreadMessageObject = null;
        }
    }

    public boolean processSendingText(String text) {
        return this.chatActivityEnterView.processSendingText(text);
    }

    public boolean processSwitchButton(TL_keyboardButtonSwitchInline button) {
        if (!(this.inlineReturn == 0 || button.same_peer)) {
            if (this.parentLayout != null) {
                String query = new StringBuilder();
                query.append("@");
                query.append(this.currentUser.username);
                query.append(" ");
                query.append(button.query);
                query = query.toString();
                if (this.inlineReturn == this.dialog_id) {
                    this.inlineReturn = 0;
                    this.chatActivityEnterView.setFieldText(query);
                } else {
                    DataQuery.getInstance(this.currentAccount).saveDraft(this.inlineReturn, query, null, null, false);
                    if (this.parentLayout.fragmentsStack.size() > 1) {
                        BaseFragment prevFragment = (BaseFragment) this.parentLayout.fragmentsStack.get(this.parentLayout.fragmentsStack.size() - 2);
                        if ((prevFragment instanceof ChatActivity) && ((ChatActivity) prevFragment).dialog_id == this.inlineReturn) {
                            finishFragment();
                        } else {
                            Bundle bundle = new Bundle();
                            int lower_part = (int) this.inlineReturn;
                            int high_part = (int) (this.inlineReturn >> 32);
                            if (lower_part == 0) {
                                bundle.putInt("enc_id", high_part);
                            } else if (lower_part > 0) {
                                bundle.putInt("user_id", lower_part);
                            } else if (lower_part < 0) {
                                bundle.putInt("chat_id", -lower_part);
                            }
                            presentFragment(new ChatActivity(bundle), true);
                        }
                    }
                }
                return true;
            }
        }
        return false;
    }

    private void updateSearchButtons(int mask, int num, int count) {
        if (this.searchUpButton != null) {
            this.searchUpButton.setEnabled((mask & 1) != 0);
            this.searchDownButton.setEnabled((mask & 2) != 0);
            float f = 0.5f;
            this.searchUpButton.setAlpha(this.searchUpButton.isEnabled() ? 1.0f : 0.5f);
            ImageView imageView = this.searchDownButton;
            if (this.searchDownButton.isEnabled()) {
                f = 1.0f;
            }
            imageView.setAlpha(f);
            if (count < 0) {
                this.searchCountText.setText(TtmlNode.ANONYMOUS_REGION_ID);
            } else if (count == 0) {
                this.searchCountText.setText(LocaleController.getString("NoResult", R.string.NoResult));
            } else {
                this.searchCountText.setText(LocaleController.formatString("Of", R.string.Of, Integer.valueOf(num + 1), Integer.valueOf(count)));
            }
        }
    }

    public boolean needDelayOpenAnimation() {
        return this.firstLoading;
    }

    public void onTransitionAnimationStart(boolean isOpen, boolean backward) {
        NotificationCenter.getInstance(this.currentAccount).setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoaded, NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.messagesDidLoaded, NotificationCenter.botKeyboardDidLoaded});
        NotificationCenter.getInstance(this.currentAccount).setAnimationInProgress(true);
        if (isOpen) {
            this.openAnimationEnded = false;
        }
    }

    public void onTransitionAnimationEnd(boolean isOpen, boolean backward) {
        NotificationCenter.getInstance(this.currentAccount).setAnimationInProgress(false);
        if (isOpen) {
            this.openAnimationEnded = true;
            if (this.currentUser != null) {
                MessagesController.getInstance(this.currentAccount).loadFullUser(this.currentUser, this.classGuid, false);
            }
            if (VERSION.SDK_INT >= 21) {
                createChatAttachView();
            }
            if (this.chatActivityEnterView.hasRecordVideo() && !this.chatActivityEnterView.isSendButtonVisible()) {
                boolean isChannel = false;
                if (this.currentChat != null) {
                    boolean z = ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup;
                    isChannel = z;
                }
                SharedPreferences preferences = MessagesController.getGlobalMainSettings();
                String key = isChannel ? "needShowRoundHintChannel" : "needShowRoundHint";
                if (preferences.getBoolean(key, true) && Utilities.random.nextFloat() < 0.2f) {
                    showVoiceHint(false, this.chatActivityEnterView.isInVideoMode());
                    preferences.edit().putBoolean(key, false).commit();
                }
            }
        }
    }

    protected void onDialogDismiss(Dialog dialog) {
        if (this.closeChatDialog != null && dialog == this.closeChatDialog) {
            MessagesController.getInstance(this.currentAccount).deleteDialog(this.dialog_id, 0);
            if (this.parentLayout == null || this.parentLayout.fragmentsStack.isEmpty() || this.parentLayout.fragmentsStack.get(this.parentLayout.fragmentsStack.size() - 1) == this) {
                finishFragment();
                return;
            }
            BaseFragment fragment = (BaseFragment) this.parentLayout.fragmentsStack.get(this.parentLayout.fragmentsStack.size() - 1);
            removeSelfFromStack();
            fragment.finishFragment();
        }
    }

    public boolean extendActionMode(Menu menu) {
        if (!PhotoViewer.hasInstance() || !PhotoViewer.getInstance().isVisible()) {
            if (this.chatActivityEnterView.getSelectionLength() != 0) {
                if (menu.findItem(16908321) == null) {
                }
            }
            return true;
        } else if (PhotoViewer.getInstance().getSelectiongLength() == 0 || menu.findItem(16908321) == null) {
            return true;
        }
        if (VERSION.SDK_INT >= edit) {
            menu.removeItem(16908341);
        }
        SpannableStringBuilder stringBuilder = new SpannableStringBuilder(LocaleController.getString("Bold", R.string.Bold));
        stringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")), 0, stringBuilder.length(), 33);
        menu.add(R.id.menu_groupbolditalic, R.id.menu_bold, 6, stringBuilder);
        stringBuilder = new SpannableStringBuilder(LocaleController.getString("Italic", R.string.Italic));
        stringBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, stringBuilder.length(), 33);
        menu.add(R.id.menu_groupbolditalic, R.id.menu_italic, 7, stringBuilder);
        menu.add(R.id.menu_groupbolditalic, R.id.menu_regular, 8, LocaleController.getString("Regular", R.string.Regular));
        return true;
    }

    private void updateBottomOverlay() {
        if (this.bottomOverlayChatText != null) {
            if (this.currentChat != null) {
                if (!ChatObject.isChannel(this.currentChat) || (this.currentChat instanceof TL_channelForbidden)) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("DeleteThisGroup", R.string.DeleteThisGroup));
                } else if (ChatObject.isNotInChat(this.currentChat)) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelJoin", R.string.ChannelJoin));
                } else if (MessagesController.getInstance(this.currentAccount).isDialogMuted(this.dialog_id)) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelUnmute", R.string.ChannelUnmute));
                } else {
                    this.bottomOverlayChatText.setText(LocaleController.getString("ChannelMute", R.string.ChannelMute));
                }
            } else if (this.userBlocked) {
                if (this.currentUser.bot) {
                    this.bottomOverlayChatText.setText(LocaleController.getString("BotUnblock", R.string.BotUnblock));
                } else {
                    this.bottomOverlayChatText.setText(LocaleController.getString("Unblock", R.string.Unblock));
                }
                if (this.botButtons != null) {
                    this.botButtons = null;
                    if (this.chatActivityEnterView != null) {
                        if (this.replyingMessageObject != null && this.botReplyButtons == this.replyingMessageObject) {
                            this.botReplyButtons = null;
                            showReplyPanel(false, null, null, null, false);
                        }
                        this.chatActivityEnterView.setButtons(this.botButtons, false);
                    }
                }
            } else if (this.botUser == null || !this.currentUser.bot) {
                this.bottomOverlayChatText.setText(LocaleController.getString("DeleteThisChat", R.string.DeleteThisChat));
            } else {
                this.bottomOverlayChatText.setText(LocaleController.getString("BotStart", R.string.BotStart));
                this.chatActivityEnterView.hidePopup(false);
                if (getParentActivity() != null) {
                    AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
                }
            }
            if (this.searchItem == null || this.searchItem.getVisibility() != 0) {
                this.searchContainer.setVisibility(4);
                if ((this.currentChat == null || (!ChatObject.isNotInChat(this.currentChat) && ChatObject.canWriteToChat(this.currentChat))) && (this.currentUser == null || !(UserObject.isDeleted(this.currentUser) || this.userBlocked))) {
                    if (this.botUser == null || !this.currentUser.bot) {
                        this.chatActivityEnterView.setVisibility(0);
                        this.bottomOverlayChat.setVisibility(4);
                    } else {
                        this.bottomOverlayChat.setVisibility(0);
                        this.chatActivityEnterView.setVisibility(4);
                    }
                    if (this.muteItem != null) {
                        this.muteItem.setVisibility(0);
                    }
                } else {
                    if (this.chatActivityEnterView.isEditingMessage()) {
                        this.chatActivityEnterView.setVisibility(0);
                        this.bottomOverlayChat.setVisibility(4);
                        this.chatActivityEnterView.setFieldFocused();
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                ChatActivity.this.chatActivityEnterView.openKeyboard();
                            }
                        }, 100);
                    } else {
                        this.bottomOverlayChat.setVisibility(0);
                        this.chatActivityEnterView.setFieldFocused(false);
                        this.chatActivityEnterView.setVisibility(4);
                        this.chatActivityEnterView.closeKeyboard();
                    }
                    if (this.muteItem != null) {
                        this.muteItem.setVisibility(8);
                    }
                    this.attachItem.setVisibility(8);
                    this.headerItem.setVisibility(0);
                }
                if (this.topViewWasVisible == 1) {
                    this.chatActivityEnterView.showTopView(false, false);
                    this.topViewWasVisible = 0;
                }
            } else {
                this.searchContainer.setVisibility(0);
                this.bottomOverlayChat.setVisibility(4);
                this.chatActivityEnterView.setFieldFocused(false);
                this.chatActivityEnterView.setVisibility(4);
                if (this.chatActivityEnterView.isTopViewVisible()) {
                    this.topViewWasVisible = 1;
                    this.chatActivityEnterView.hideTopView(false);
                } else {
                    this.topViewWasVisible = 2;
                }
            }
            checkRaiseSensors();
        }
    }

    public void showAlert(String name, String message) {
        if (!(this.alertView == null || name == null)) {
            if (message != null) {
                if (this.alertView.getTag() != null) {
                    this.alertView.setTag(null);
                    if (this.alertViewAnimator != null) {
                        this.alertViewAnimator.cancel();
                        this.alertViewAnimator = null;
                    }
                    this.alertView.setVisibility(0);
                    this.alertViewAnimator = new AnimatorSet();
                    AnimatorSet animatorSet = this.alertViewAnimator;
                    Animator[] animatorArr = new Animator[1];
                    animatorArr[0] = ObjectAnimator.ofFloat(this.alertView, "translationY", new float[]{0.0f});
                    animatorSet.playTogether(animatorArr);
                    this.alertViewAnimator.setDuration(200);
                    this.alertViewAnimator.addListener(new AnimatorListenerAdapter() {
                        public void onAnimationEnd(Animator animation) {
                            if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(animation)) {
                                ChatActivity.this.alertViewAnimator = null;
                            }
                        }

                        public void onAnimationCancel(Animator animation) {
                            if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(animation)) {
                                ChatActivity.this.alertViewAnimator = null;
                            }
                        }
                    });
                    this.alertViewAnimator.start();
                }
                this.alertNameTextView.setText(name);
                this.alertTextView.setText(Emoji.replaceEmoji(message.replace('\n', ' '), this.alertTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                if (this.hideAlertViewRunnable != null) {
                    AndroidUtilities.cancelRunOnUIThread(this.hideAlertViewRunnable);
                }
                Runnable anonymousClass88 = new Runnable() {
                    public void run() {
                        if (ChatActivity.this.hideAlertViewRunnable == this && ChatActivity.this.alertView.getTag() == null) {
                            ChatActivity.this.alertView.setTag(Integer.valueOf(1));
                            if (ChatActivity.this.alertViewAnimator != null) {
                                ChatActivity.this.alertViewAnimator.cancel();
                                ChatActivity.this.alertViewAnimator = null;
                            }
                            ChatActivity.this.alertViewAnimator = new AnimatorSet();
                            AnimatorSet access$25700 = ChatActivity.this.alertViewAnimator;
                            Animator[] animatorArr = new Animator[1];
                            animatorArr[0] = ObjectAnimator.ofFloat(ChatActivity.this.alertView, "translationY", new float[]{(float) (-AndroidUtilities.dp(50.0f))});
                            access$25700.playTogether(animatorArr);
                            ChatActivity.this.alertViewAnimator.setDuration(200);
                            ChatActivity.this.alertViewAnimator.addListener(new AnimatorListenerAdapter() {
                                public void onAnimationEnd(Animator animation) {
                                    if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(animation)) {
                                        ChatActivity.this.alertView.setVisibility(8);
                                        ChatActivity.this.alertViewAnimator = null;
                                    }
                                }

                                public void onAnimationCancel(Animator animation) {
                                    if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(animation)) {
                                        ChatActivity.this.alertViewAnimator = null;
                                    }
                                }
                            });
                            ChatActivity.this.alertViewAnimator.start();
                        }
                    }
                };
                this.hideAlertViewRunnable = anonymousClass88;
                AndroidUtilities.runOnUIThread(anonymousClass88, 3000);
            }
        }
    }

    private void hidePinnedMessageView(boolean animated) {
        if (this.pinnedMessageView.getTag() == null) {
            this.pinnedMessageView.setTag(Integer.valueOf(1));
            if (this.pinnedMessageViewAnimator != null) {
                this.pinnedMessageViewAnimator.cancel();
                this.pinnedMessageViewAnimator = null;
            }
            if (animated) {
                this.pinnedMessageViewAnimator = new AnimatorSet();
                AnimatorSet animatorSet = this.pinnedMessageViewAnimator;
                Animator[] animatorArr = new Animator[1];
                animatorArr[0] = ObjectAnimator.ofFloat(this.pinnedMessageView, "translationY", new float[]{(float) (-AndroidUtilities.dp(50.0f))});
                animatorSet.playTogether(animatorArr);
                this.pinnedMessageViewAnimator.setDuration(200);
                this.pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapter() {
                    public void onAnimationEnd(Animator animation) {
                        if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(animation)) {
                            ChatActivity.this.pinnedMessageView.setVisibility(8);
                            ChatActivity.this.pinnedMessageViewAnimator = null;
                        }
                    }

                    public void onAnimationCancel(Animator animation) {
                        if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(animation)) {
                            ChatActivity.this.pinnedMessageViewAnimator = null;
                        }
                    }
                });
                this.pinnedMessageViewAnimator.start();
                return;
            }
            this.pinnedMessageView.setTranslationY((float) (-AndroidUtilities.dp(50.0f)));
            this.pinnedMessageView.setVisibility(8);
        }
    }

    private void updatePinnedMessageView(boolean animated) {
        if (this.pinnedMessageView != null) {
            if (this.info != null) {
                if (!(this.pinnedMessageObject == null || this.info.pinned_msg_id == this.pinnedMessageObject.getId())) {
                    this.pinnedMessageObject = null;
                }
                if (this.info.pinned_msg_id != 0 && this.pinnedMessageObject == null) {
                    this.pinnedMessageObject = (MessageObject) this.messagesDict[0].get(this.info.pinned_msg_id);
                }
            }
            SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
            if (!(this.info == null || this.info.pinned_msg_id == 0)) {
                int i = this.info.pinned_msg_id;
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("pin_");
                stringBuilder.append(this.dialog_id);
                if (i != preferences.getInt(stringBuilder.toString(), 0)) {
                    if (this.actionBar != null) {
                        if (!this.actionBar.isActionModeShowed()) {
                            if (this.actionBar.isSearchFieldVisible()) {
                            }
                        }
                    }
                    if (this.pinnedMessageObject != null) {
                        int dp;
                        String mess;
                        if (this.pinnedMessageView.getTag() != null) {
                            this.pinnedMessageView.setTag(null);
                            if (this.pinnedMessageViewAnimator != null) {
                                this.pinnedMessageViewAnimator.cancel();
                                this.pinnedMessageViewAnimator = null;
                            }
                            if (animated) {
                                this.pinnedMessageView.setVisibility(0);
                                this.pinnedMessageViewAnimator = new AnimatorSet();
                                AnimatorSet animatorSet = this.pinnedMessageViewAnimator;
                                Animator[] animatorArr = new Animator[1];
                                animatorArr[0] = ObjectAnimator.ofFloat(this.pinnedMessageView, "translationY", new float[]{0.0f});
                                animatorSet.playTogether(animatorArr);
                                this.pinnedMessageViewAnimator.setDuration(200);
                                this.pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapter() {
                                    public void onAnimationEnd(Animator animation) {
                                        if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(animation)) {
                                            ChatActivity.this.pinnedMessageViewAnimator = null;
                                        }
                                    }

                                    public void onAnimationCancel(Animator animation) {
                                        if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(animation)) {
                                            ChatActivity.this.pinnedMessageViewAnimator = null;
                                        }
                                    }
                                });
                                this.pinnedMessageViewAnimator.start();
                            } else {
                                this.pinnedMessageView.setTranslationY(0.0f);
                                this.pinnedMessageView.setVisibility(0);
                            }
                        }
                        FrameLayout.LayoutParams layoutParams1 = (FrameLayout.LayoutParams) this.pinnedMessageNameTextView.getLayoutParams();
                        FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) this.pinnedMessageTextView.getLayoutParams();
                        PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(this.pinnedMessageObject.photoThumbs2, AndroidUtilities.dp(50.0f));
                        if (photoSize == null) {
                            photoSize = FileLoader.getClosestPhotoSizeWithSize(this.pinnedMessageObject.photoThumbs, AndroidUtilities.dp(50.0f));
                        }
                        if (!(photoSize == null || (photoSize instanceof TL_photoSizeEmpty) || (photoSize.location instanceof TL_fileLocationUnavailable))) {
                            if (this.pinnedMessageObject.type != 13) {
                                if (this.pinnedMessageObject.isRoundVideo()) {
                                    this.pinnedMessageImageView.setRoundRadius(AndroidUtilities.dp(16.0f));
                                } else {
                                    this.pinnedMessageImageView.setRoundRadius(0);
                                }
                                this.pinnedImageLocation = photoSize.location;
                                this.pinnedMessageImageView.setImage(this.pinnedImageLocation, "50_50", (Drawable) null);
                                this.pinnedMessageImageView.setVisibility(0);
                                dp = AndroidUtilities.dp(55.0f);
                                layoutParams2.leftMargin = dp;
                                layoutParams1.leftMargin = dp;
                                this.pinnedMessageNameTextView.setLayoutParams(layoutParams1);
                                this.pinnedMessageTextView.setLayoutParams(layoutParams2);
                                this.pinnedMessageNameTextView.setText(LocaleController.getString("PinnedMessage", R.string.PinnedMessage));
                                if (this.pinnedMessageObject.type == 14) {
                                    this.pinnedMessageTextView.setText(String.format("%s - %s", new Object[]{this.pinnedMessageObject.getMusicAuthor(), this.pinnedMessageObject.getMusicTitle()}));
                                } else if (this.pinnedMessageObject.messageOwner.media instanceof TL_messageMediaGame) {
                                    this.pinnedMessageTextView.setText(Emoji.replaceEmoji(this.pinnedMessageObject.messageOwner.media.game.title, this.pinnedMessageTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                                } else if (this.pinnedMessageObject.messageText != null) {
                                    mess = this.pinnedMessageObject.messageText.toString();
                                    if (mess.length() > 150) {
                                        mess = mess.substring(0, 150);
                                    }
                                    this.pinnedMessageTextView.setText(Emoji.replaceEmoji(mess.replace('\n', ' '), this.pinnedMessageTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                                }
                            }
                        }
                        this.pinnedMessageImageView.setImageBitmap(null);
                        this.pinnedImageLocation = null;
                        this.pinnedMessageImageView.setVisibility(4);
                        dp = AndroidUtilities.dp(18.0f);
                        layoutParams2.leftMargin = dp;
                        layoutParams1.leftMargin = dp;
                        this.pinnedMessageNameTextView.setLayoutParams(layoutParams1);
                        this.pinnedMessageTextView.setLayoutParams(layoutParams2);
                        this.pinnedMessageNameTextView.setText(LocaleController.getString("PinnedMessage", R.string.PinnedMessage));
                        if (this.pinnedMessageObject.type == 14) {
                            this.pinnedMessageTextView.setText(String.format("%s - %s", new Object[]{this.pinnedMessageObject.getMusicAuthor(), this.pinnedMessageObject.getMusicTitle()}));
                        } else if (this.pinnedMessageObject.messageOwner.media instanceof TL_messageMediaGame) {
                            this.pinnedMessageTextView.setText(Emoji.replaceEmoji(this.pinnedMessageObject.messageOwner.media.game.title, this.pinnedMessageTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                        } else if (this.pinnedMessageObject.messageText != null) {
                            mess = this.pinnedMessageObject.messageText.toString();
                            if (mess.length() > 150) {
                                mess = mess.substring(0, 150);
                            }
                            this.pinnedMessageTextView.setText(Emoji.replaceEmoji(mess.replace('\n', ' '), this.pinnedMessageTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                        }
                    } else {
                        this.pinnedImageLocation = null;
                        hidePinnedMessageView(animated);
                        if (this.loadingPinnedMessage != this.info.pinned_msg_id) {
                            this.loadingPinnedMessage = this.info.pinned_msg_id;
                            DataQuery.getInstance(this.currentAccount).loadPinnedMessage(this.currentChat.id, this.info.pinned_msg_id, true);
                        }
                    }
                    checkListViewPaddings();
                }
            }
            hidePinnedMessageView(animated);
            checkListViewPaddings();
        }
    }

    private void updateSpamView() {
        if (this.reportSpamView == null) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("no spam view found");
            }
            return;
        }
        boolean show;
        SharedPreferences preferences = MessagesController.getNotificationsSettings(this.currentAccount);
        if (this.currentEncryptedChat != null) {
            show = (this.currentEncryptedChat.admin_id == UserConfig.getInstance(this.currentAccount).getClientUserId() || ContactsController.getInstance(this.currentAccount).isLoadingContacts() || ContactsController.getInstance(this.currentAccount).contactsDict.get(Integer.valueOf(this.currentUser.id)) != null) ? false : true;
            if (show) {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.append("spam3_");
                stringBuilder.append(this.dialog_id);
                if (preferences.getInt(stringBuilder.toString(), 0) == 1) {
                    show = false;
                }
            }
        } else {
            StringBuilder stringBuilder2 = new StringBuilder();
            stringBuilder2.append("spam3_");
            stringBuilder2.append(this.dialog_id);
            show = preferences.getInt(stringBuilder2.toString(), 0) == 2;
        }
        AnimatorSet animatorSet;
        Animator[] animatorArr;
        if (show) {
            if (this.reportSpamView.getTag() != null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("show spam button");
                }
                this.reportSpamView.setTag(null);
                this.reportSpamView.setVisibility(0);
                if (this.reportSpamViewAnimator != null) {
                    this.reportSpamViewAnimator.cancel();
                }
                this.reportSpamViewAnimator = new AnimatorSet();
                animatorSet = this.reportSpamViewAnimator;
                animatorArr = new Animator[1];
                animatorArr[0] = ObjectAnimator.ofFloat(this.reportSpamView, "translationY", new float[]{0.0f});
                animatorSet.playTogether(animatorArr);
                this.reportSpamViewAnimator.setDuration(200);
                this.reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() {
                    public void onAnimationEnd(Animator animation) {
                        if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animation)) {
                            ChatActivity.this.reportSpamViewAnimator = null;
                        }
                    }

                    public void onAnimationCancel(Animator animation) {
                        if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animation)) {
                            ChatActivity.this.reportSpamViewAnimator = null;
                        }
                    }
                });
                this.reportSpamViewAnimator.start();
            }
        } else if (this.reportSpamView.getTag() == null) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("hide spam button");
            }
            this.reportSpamView.setTag(Integer.valueOf(1));
            if (this.reportSpamViewAnimator != null) {
                this.reportSpamViewAnimator.cancel();
            }
            this.reportSpamViewAnimator = new AnimatorSet();
            animatorSet = this.reportSpamViewAnimator;
            animatorArr = new Animator[1];
            animatorArr[0] = ObjectAnimator.ofFloat(this.reportSpamView, "translationY", new float[]{(float) (-AndroidUtilities.dp(50.0f))});
            animatorSet.playTogether(animatorArr);
            this.reportSpamViewAnimator.setDuration(200);
            this.reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() {
                public void onAnimationEnd(Animator animation) {
                    if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animation)) {
                        ChatActivity.this.reportSpamView.setVisibility(8);
                        ChatActivity.this.reportSpamViewAnimator = null;
                    }
                }

                public void onAnimationCancel(Animator animation) {
                    if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(animation)) {
                        ChatActivity.this.reportSpamViewAnimator = null;
                    }
                }
            });
            this.reportSpamViewAnimator.start();
        }
        checkListViewPaddings();
    }

    private void updateContactStatus() {
        if (this.addContactItem != null) {
            if (this.currentUser == null) {
                this.addContactItem.setVisibility(8);
            } else {
                User user = MessagesController.getInstance(this.currentAccount).getUser(Integer.valueOf(this.currentUser.id));
                if (user != null) {
                    this.currentUser = user;
                }
                if (!((this.currentEncryptedChat != null && !(this.currentEncryptedChat instanceof TL_encryptedChat)) || MessagesController.isSupportId(this.currentUser.id) || UserObject.isDeleted(this.currentUser) || ContactsController.getInstance(this.currentAccount).isLoadingContacts())) {
                    if (!(TextUtils.isEmpty(this.currentUser.phone) || ContactsController.getInstance(this.currentAccount).contactsDict.get(Integer.valueOf(this.currentUser.id)) == null)) {
                        if (ContactsController.getInstance(this.currentAccount).contactsDict.size() == 0) {
                            if (!ContactsController.getInstance(this.currentAccount).isLoadingContacts()) {
                            }
                        }
                    }
                    this.addContactItem.setVisibility(0);
                    if (TextUtils.isEmpty(this.currentUser.phone)) {
                        this.addContactItem.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
                        this.addToContactsButton.setVisibility(8);
                        this.reportSpamButton.setPadding(AndroidUtilities.dp(50.0f), 0, AndroidUtilities.dp(50.0f), 0);
                        this.reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(-1, -1, 1.0f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
                    } else {
                        this.addContactItem.setText(LocaleController.getString("AddToContacts", R.string.AddToContacts));
                        this.reportSpamButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(50.0f), 0);
                        this.addToContactsButton.setVisibility(0);
                        this.reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(-1, -1, 0.5f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
                    }
                }
                this.addContactItem.setVisibility(8);
            }
            checkListViewPaddings();
        }
    }

    private void checkListViewPaddingsInternal() {
        if (this.chatLayoutManager != null) {
            try {
                int pos;
                int firstVisPos = this.chatLayoutManager.findFirstVisibleItemPosition();
                int lastVisPos = -1;
                if (!(this.wasManualScroll || this.unreadMessageObject == null)) {
                    pos = this.messages.indexOf(this.unreadMessageObject);
                    if (pos >= 0) {
                        lastVisPos = pos + this.chatAdapter.messagesStartRow;
                        firstVisPos = -1;
                    }
                }
                pos = 0;
                if (firstVisPos != -1) {
                    View firstVisView = this.chatLayoutManager.findViewByPosition(firstVisPos);
                    pos = firstVisView == null ? 0 : (this.chatListView.getMeasuredHeight() - firstVisView.getBottom()) - this.chatListView.getPaddingBottom();
                }
                if (this.chatListView.getPaddingTop() != AndroidUtilities.dp(52.0f) && ((this.pinnedMessageView != null && this.pinnedMessageView.getTag() == null) || (this.reportSpamView != null && this.reportSpamView.getTag() == null))) {
                    this.chatListView.setPadding(0, AndroidUtilities.dp(52.0f), 0, AndroidUtilities.dp(3.0f));
                    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) this.floatingDateView.getLayoutParams();
                    layoutParams.topMargin = AndroidUtilities.dp(52.0f);
                    this.floatingDateView.setLayoutParams(layoutParams);
                    this.chatListView.setTopGlowOffset(AndroidUtilities.dp(48.0f));
                } else if (this.chatListView.getPaddingTop() == AndroidUtilities.dp(4.0f) || ((this.pinnedMessageView != null && this.pinnedMessageView.getTag() == null) || (this.reportSpamView != null && this.reportSpamView.getTag() == null))) {
                    firstVisPos = -1;
                } else {
                    this.chatListView.setPadding(0, AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(3.0f));
                    FrameLayout.LayoutParams layoutParams2 = (FrameLayout.LayoutParams) this.floatingDateView.getLayoutParams();
                    layoutParams2.topMargin = AndroidUtilities.dp(4.0f);
                    this.floatingDateView.setLayoutParams(layoutParams2);
                    this.chatListView.setTopGlowOffset(0);
                }
                if (firstVisPos != -1) {
                    this.chatLayoutManager.scrollToPositionWithOffset(firstVisPos, pos);
                } else if (lastVisPos != -1) {
                    this.chatLayoutManager.scrollToPositionWithOffset(lastVisPos, ((this.chatListView.getMeasuredHeight() - this.chatListView.getPaddingBottom()) - this.chatListView.getPaddingTop()) - AndroidUtilities.dp(29.0f));
                }
            } catch (Throwable e) {
                FileLog.e(e);
            }
        }
    }

    private void checkListViewPaddings() {
        if (this.wasManualScroll || this.unreadMessageObject == null) {
            AndroidUtilities.runOnUIThread(new Runnable() {
                public void run() {
                    ChatActivity.this.checkListViewPaddingsInternal();
                }
            });
            return;
        }
        if (this.messages.indexOf(this.unreadMessageObject) >= 0) {
            this.fixPaddingsInLayout = true;
            if (this.fragmentView != null) {
                this.fragmentView.requestLayout();
            }
        }
    }

    private void checkRaiseSensors() {
        if (this.chatActivityEnterView != null && this.chatActivityEnterView.isStickersExpanded()) {
            MediaController.getInstance().setAllowStartRecord(false);
        } else if (ChatObject.isChannel(this.currentChat) && this.currentChat.banned_rights != null && this.currentChat.banned_rights.send_media) {
            MediaController.getInstance().setAllowStartRecord(false);
        } else if (ApplicationLoader.mainInterfacePaused || ((this.bottomOverlayChat != null && this.bottomOverlayChat.getVisibility() == 0) || ((this.bottomOverlay != null && this.bottomOverlay.getVisibility() == 0) || (this.searchContainer != null && this.searchContainer.getVisibility() == 0)))) {
            MediaController.getInstance().setAllowStartRecord(false);
        } else {
            MediaController.getInstance().setAllowStartRecord(true);
        }
    }

    public void dismissCurrentDialig() {
        if (this.chatAttachAlert == null || this.visibleDialog != this.chatAttachAlert) {
            super.dismissCurrentDialig();
            return;
        }
        this.chatAttachAlert.closeCamera(false);
        this.chatAttachAlert.dismissInternal();
        this.chatAttachAlert.hideCamera(true);
    }

    public void onResume() {
        super.onResume();
        AndroidUtilities.requestAdjustResize(getParentActivity(), this.classGuid);
        MediaController.getInstance().startRaiseToEarSensors(this);
        checkRaiseSensors();
        if (this.chatAttachAlert != null) {
            this.chatAttachAlert.onResume();
        }
        checkActionBarMenu();
        if (!(this.replyImageLocation == null || this.replyImageView == null)) {
            this.replyImageView.setImage(this.replyImageLocation, "50_50", (Drawable) null);
        }
        if (!(this.pinnedImageLocation == null || this.pinnedMessageImageView == null)) {
            this.pinnedMessageImageView.setImage(this.pinnedImageLocation, "50_50", (Drawable) null);
        }
        NotificationsController.getInstance(this.currentAccount).setOpenedDialogId(this.dialog_id);
        if (this.scrollToTopOnResume) {
            if (!this.scrollToTopUnReadOnResume || this.scrollToMessage == null) {
                moveScrollToLastMessage();
            } else if (this.chatListView != null) {
                int yOffset;
                boolean bottom = true;
                if (this.scrollToMessagePosition == -9000) {
                    yOffset = getScrollOffsetForMessage(this.scrollToMessage);
                    bottom = false;
                } else if (this.scrollToMessagePosition == -10000) {
                    yOffset = -AndroidUtilities.dp(11.0f);
                    bottom = false;
                } else {
                    yOffset = this.scrollToMessagePosition;
                }
                this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), yOffset, bottom);
            }
            this.scrollToTopUnReadOnResume = false;
            this.scrollToTopOnResume = false;
            this.scrollToMessage = null;
        }
        this.paused = false;
        this.pausedOnLastMessage = false;
        checkScrollForLoad(false);
        if (this.wasPaused) {
            this.wasPaused = false;
            if (this.chatAdapter != null) {
                this.chatAdapter.notifyDataSetChanged();
            }
        }
        fixLayout();
        applyDraftMaybe(false);
        if (!(this.bottomOverlayChat == null || this.bottomOverlayChat.getVisibility() == 0)) {
            this.chatActivityEnterView.setFieldFocused(true);
        }
        if (this.chatActivityEnterView != null) {
            this.chatActivityEnterView.onResume();
        }
        if (this.currentUser != null) {
            this.chatEnterTime = System.currentTimeMillis();
            this.chatLeaveTime = 0;
        }
        if (this.startVideoEdit != null) {
            AndroidUtilities.runOnUIThread(new Runnable() {
                public void run() {
                    ChatActivity.this.openVideoEditor(ChatActivity.this.startVideoEdit, null);
                    ChatActivity.this.startVideoEdit = null;
                }
            });
        }
        if (this.chatListView != null && (this.chatActivityEnterView == null || !this.chatActivityEnterView.isEditingMessage())) {
            this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
            this.chatListView.setOnItemClickListener(this.onItemClickListener);
            this.chatListView.setLongClickable(true);
        }
        checkBotCommands();
    }

    public void onPause() {
        super.onPause();
        MessagesController.getInstance(this.currentAccount).markDialogAsReadNow(this.dialog_id);
        MediaController.getInstance().stopRaiseToEarSensors(this);
        this.paused = true;
        this.wasPaused = true;
        NotificationsController.getInstance(this.currentAccount).setOpenedDialogId(0);
        CharSequence draftMessage = null;
        MessageObject replyMessage = null;
        boolean searchWebpage = true;
        if (!(this.ignoreAttachOnPause || r0.chatActivityEnterView == null || r0.bottomOverlayChat.getVisibility() == 0)) {
            r0.chatActivityEnterView.onPause();
            replyMessage = r0.replyingMessageObject;
            if (!r0.chatActivityEnterView.isEditingMessage()) {
                CharSequence text = AndroidUtilities.getTrimmedString(r0.chatActivityEnterView.getFieldText());
                if (!(TextUtils.isEmpty(text) || TextUtils.equals(text, "@gif"))) {
                    draftMessage = text;
                }
            }
            searchWebpage = r0.chatActivityEnterView.isMessageWebPageSearchEnabled();
            r0.chatActivityEnterView.setFieldFocused(false);
        }
        if (r0.chatAttachAlert != null) {
            if (r0.ignoreAttachOnPause) {
                r0.ignoreAttachOnPause = false;
            } else {
                r0.chatAttachAlert.onPause();
            }
        }
        CharSequence[] message = new CharSequence[]{draftMessage};
        DataQuery.getInstance(r0.currentAccount).saveDraft(r0.dialog_id, message[0], DataQuery.getInstance(r0.currentAccount).getEntities(message), replyMessage != null ? replyMessage.messageOwner : null, !searchWebpage);
        MessagesController.getInstance(r0.currentAccount).cancelTyping(0, r0.dialog_id);
        if (!r0.pausedOnLastMessage) {
            StringBuilder stringBuilder;
            Editor editor = MessagesController.getNotificationsSettings(r0.currentAccount).edit();
            int messageId = 0;
            int offset = 0;
            if (r0.chatLayoutManager != null) {
                int position = r0.chatLayoutManager.findFirstVisibleItemPosition();
                if (position != 0) {
                    Holder holder = (Holder) r0.chatListView.findViewHolderForAdapterPosition(position);
                    if (holder != null) {
                        int messageId2;
                        int mid = 0;
                        if (holder.itemView instanceof ChatMessageCell) {
                            mid = ((ChatMessageCell) holder.itemView).getMessageObject().getId();
                        } else if (holder.itemView instanceof ChatActionCell) {
                            mid = ((ChatActionCell) holder.itemView).getMessageObject().getId();
                        }
                        if (mid == 0) {
                            holder = (Holder) r0.chatListView.findViewHolderForAdapterPosition(position + 1);
                        }
                        boolean ignore = false;
                        int a = position - 1;
                        while (a >= r0.chatAdapter.messagesStartRow) {
                            MessageObject messageObject = (MessageObject) r0.messages.get(a - r0.chatAdapter.messagesStartRow);
                            if (messageObject.getId() == 0) {
                                a--;
                            } else {
                                if (!messageObject.isOut() && messageObject.isUnread()) {
                                    ignore = true;
                                    messageId = 0;
                                }
                                if (!(holder == null || ignore)) {
                                    if (holder.itemView instanceof ChatMessageCell) {
                                        if (holder.itemView instanceof ChatActionCell) {
                                            messageId2 = ((ChatActionCell) holder.itemView).getMessageObject().getId();
                                        }
                                        if ((messageId > 0 || r0.currentEncryptedChat != null) && (messageId >= 0 || r0.currentEncryptedChat == null)) {
                                            messageId = 0;
                                        } else {
                                            offset = holder.itemView.getBottom() - r0.chatListView.getMeasuredHeight();
                                            if (BuildVars.LOGS_ENABLED) {
                                                stringBuilder = new StringBuilder();
                                                stringBuilder.append("save offset = ");
                                                stringBuilder.append(offset);
                                                stringBuilder.append(" for mid ");
                                                stringBuilder.append(messageId);
                                                FileLog.d(stringBuilder.toString());
                                            }
                                        }
                                    } else {
                                        messageId2 = ((ChatMessageCell) holder.itemView).getMessageObject().getId();
                                    }
                                    messageId = messageId2;
                                    if (messageId > 0) {
                                    }
                                    messageId = 0;
                                }
                            }
                        }
                        if (holder.itemView instanceof ChatMessageCell) {
                            if (holder.itemView instanceof ChatActionCell) {
                                messageId2 = ((ChatActionCell) holder.itemView).getMessageObject().getId();
                            }
                            if (messageId > 0) {
                            }
                            messageId = 0;
                        } else {
                            messageId2 = ((ChatMessageCell) holder.itemView).getMessageObject().getId();
                        }
                        messageId = messageId2;
                        if (messageId > 0) {
                        }
                        messageId = 0;
                    }
                }
            }
            if (messageId != 0) {
                stringBuilder = new StringBuilder();
                stringBuilder.append("diditem");
                stringBuilder.append(r0.dialog_id);
                editor.putInt(stringBuilder.toString(), messageId);
                stringBuilder = new StringBuilder();
                stringBuilder.append("diditemo");
                stringBuilder.append(r0.dialog_id);
                editor.putInt(stringBuilder.toString(), offset);
            } else {
                r0.pausedOnLastMessage = true;
                stringBuilder = new StringBuilder();
                stringBuilder.append("diditem");
                stringBuilder.append(r0.dialog_id);
                editor.remove(stringBuilder.toString());
                stringBuilder = new StringBuilder();
                stringBuilder.append("diditemo");
                stringBuilder.append(r0.dialog_id);
                editor.remove(stringBuilder.toString());
            }
            editor.commit();
        }
        if (r0.currentUser != null) {
            r0.chatLeaveTime = System.currentTimeMillis();
            updateInformationForScreenshotDetector();
        }
    }

    private void updateInformationForScreenshotDetector() {
        if (this.currentUser != null) {
            if (this.currentEncryptedChat != null) {
                ArrayList<Long> visibleMessages = new ArrayList();
                if (this.chatListView != null) {
                    int count = this.chatListView.getChildCount();
                    for (int a = 0; a < count; a++) {
                        View view = this.chatListView.getChildAt(a);
                        MessageObject object = null;
                        if (view instanceof ChatMessageCell) {
                            object = ((ChatMessageCell) view).getMessageObject();
                        }
                        if (!(object == null || object.getId() >= 0 || object.messageOwner.random_id == 0)) {
                            visibleMessages.add(Long.valueOf(object.messageOwner.random_id));
                        }
                    }
                }
                MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, this.chatEnterTime, this.chatLeaveTime, this.currentUser, this.currentEncryptedChat, visibleMessages, 0);
            } else {
                SecretMediaViewer viewer = SecretMediaViewer.getInstance();
                MessageObject messageObject = viewer.getCurrentMessageObject();
                if (!(messageObject == null || messageObject.isOut())) {
                    MediaController.getInstance().setLastVisibleMessageIds(this.currentAccount, viewer.getOpenTime(), viewer.getCloseTime(), this.currentUser, null, null, messageObject.getId());
                }
            }
        }
    }

    private boolean fixLayoutInternal() {
        if (AndroidUtilities.isTablet() || ApplicationLoader.applicationContext.getResources().getConfiguration().orientation != 2) {
            this.selectedMessagesCountTextView.setTextSize(20);
        } else {
            this.selectedMessagesCountTextView.setTextSize(18);
        }
        int count = this.chatListView.getChildCount();
        HashMap<Long, GroupedMessages> newGroups = null;
        int a = 0;
        while (true) {
            boolean z = true;
            if (a >= count) {
                break;
            }
            View child = this.chatListView.getChildAt(a);
            if (child instanceof ChatMessageCell) {
                GroupedMessages groupedMessages = ((ChatMessageCell) child).getCurrentMessagesGroup();
                if (groupedMessages != null && groupedMessages.hasSibling) {
                    if (newGroups == null) {
                        newGroups = new HashMap();
                    }
                    if (!newGroups.containsKey(Long.valueOf(groupedMessages.groupId))) {
                        newGroups.put(Long.valueOf(groupedMessages.groupId), groupedMessages);
                        int idx = this.messages.indexOf((MessageObject) groupedMessages.messages.get(groupedMessages.messages.size() - 1));
                        if (idx >= 0) {
                            this.chatAdapter.notifyItemRangeChanged(this.chatAdapter.messagesStartRow + idx, groupedMessages.messages.size());
                        }
                    }
                }
            }
            a++;
        }
        if (!AndroidUtilities.isTablet()) {
            return true;
        }
        if (AndroidUtilities.isSmallTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 1) {
            this.actionBar.setBackButtonDrawable(new BackDrawable(false));
            if (this.fragmentContextView != null && this.fragmentContextView.getParent() == null) {
                ((ViewGroup) this.fragmentView).addView(this.fragmentContextView, LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
            }
        } else {
            ActionBar actionBar = this.actionBar;
            if (!(this.parentLayout == null || this.parentLayout.fragmentsStack.isEmpty() || this.parentLayout.fragmentsStack.get(0) == this)) {
                if (this.parentLayout.fragmentsStack.size() != 1) {
                    z = false;
                }
            }
            actionBar.setBackButtonDrawable(new BackDrawable(z));
            if (!(this.fragmentContextView == null || this.fragmentContextView.getParent() == null)) {
                this.fragmentView.setPadding(0, 0, 0, 0);
                ((ViewGroup) this.fragmentView).removeView(this.fragmentContextView);
            }
        }
        return false;
    }

    private void fixLayout() {
        if (this.avatarContainer != null) {
            this.avatarContainer.getViewTreeObserver().addOnPreDrawListener(new OnPreDrawListener() {
                public boolean onPreDraw() {
                    if (ChatActivity.this.avatarContainer != null) {
                        ChatActivity.this.avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
                    }
                    return ChatActivity.this.fixLayoutInternal();
                }
            });
        }
    }

    public void onConfigurationChanged(Configuration newConfig) {
        fixLayout();
        if (this.visibleDialog instanceof DatePickerDialog) {
            this.visibleDialog.dismiss();
        }
    }

    private void createDeleteMessagesAlert(MessageObject finalSelectedObject, GroupedMessages selectedGroup) {
        createDeleteMessagesAlert(finalSelectedObject, selectedGroup, 1);
    }

    private void createMenu(View v, boolean single, boolean listView) {
        createMenu(v, single, listView, true);
    }

    private void startEditingMessageObject(MessageObject messageObject) {
        if (messageObject != null) {
            if (getParentActivity() != null) {
                if (this.searchItem != null && this.actionBar.isSearchFieldVisible()) {
                    this.actionBar.closeSearchField();
                    this.chatActivityEnterView.setFieldFocused();
                }
                this.mentionsAdapter.setNeedBotContext(false);
                this.chatListView.setOnItemLongClickListener((OnItemLongClickListenerExtended) null);
                this.chatListView.setOnItemClickListener((OnItemClickListenerExtended) null);
                this.chatListView.setClickable(false);
                this.chatListView.setLongClickable(false);
                this.chatActivityEnterView.setEditingMessageObject(messageObject, messageObject.isMediaEmpty() ^ true);
                updateBottomOverlay();
                this.actionModeTitleContainer.setVisibility(0);
                this.selectedMessagesCountTextView.setVisibility(8);
                checkEditTimer();
                this.chatActivityEnterView.setAllowStickersAndGifs(false, false);
                ActionBarMenu actionMode = this.actionBar.createActionMode();
                actionMode.getItem(19).setVisibility(8);
                actionMode.getItem(10).setVisibility(8);
                if (actionMode.getItem(11) != null) {
                    actionMode.getItem(11).setVisibility(8);
                }
                actionMode.getItem(12).setVisibility(8);
                actionMode.getItem(edit).setVisibility(8);
                actionMode.getItem(22).setVisibility(8);
                this.actionBar.showActionMode();
                updatePinnedMessageView(true);
                updateVisibleRows();
                TL_messages_getMessageEditData req = new TL_messages_getMessageEditData();
                req.peer = MessagesController.getInstance(this.currentAccount).getInputPeer((int) this.dialog_id);
                req.id = messageObject.getId();
                this.editingMessageObjectReqId = ConnectionsManager.getInstance(this.currentAccount).sendRequest(req, new RequestDelegate() {
                    public void run(final TLObject response, TL_error error) {
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                ChatActivity.this.editingMessageObjectReqId = 0;
                                if (response == null) {
                                    AlertDialog.Builder builder = new AlertDialog.Builder(ChatActivity.this.getParentActivity());
                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                    builder.setMessage(LocaleController.getString("EditMessageError", R.string.EditMessageError));
                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                    ChatActivity.this.showDialog(builder.create());
                                    if (ChatActivity.this.chatActivityEnterView != null) {
                                        ChatActivity.this.chatActivityEnterView.setEditingMessageObject(null, false);
                                    }
                                } else if (ChatActivity.this.chatActivityEnterView != null) {
                                    ChatActivity.this.chatActivityEnterView.showEditDoneProgress(false, true);
                                }
                            }
                        });
                    }
                });
            }
        }
    }

    private String getMessageContent(MessageObject messageObject, int previousUid, boolean name) {
        String str = TtmlNode.ANONYMOUS_REGION_ID;
        if (name && previousUid != messageObject.messageOwner.from_id) {
            StringBuilder stringBuilder;
            if (messageObject.messageOwner.from_id > 0) {
                User user = MessagesController.getInstance(this.currentAccount).getUser(Integer.valueOf(messageObject.messageOwner.from_id));
                if (user != null) {
                    stringBuilder = new StringBuilder();
                    stringBuilder.append(ContactsController.formatName(user.first_name, user.last_name));
                    stringBuilder.append(":\n");
                    str = stringBuilder.toString();
                }
            } else if (messageObject.messageOwner.from_id < 0) {
                Chat chat = MessagesController.getInstance(this.currentAccount).getChat(Integer.valueOf(-messageObject.messageOwner.from_id));
                if (chat != null) {
                    stringBuilder = new StringBuilder();
                    stringBuilder.append(chat.title);
                    stringBuilder.append(":\n");
                    str = stringBuilder.toString();
                }
            }
        }
        StringBuilder stringBuilder2;
        if (messageObject.type == 0 && messageObject.messageOwner.message != null) {
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append(str);
            stringBuilder2.append(messageObject.messageOwner.message);
            return stringBuilder2.toString();
        } else if (messageObject.messageOwner.media == null || messageObject.messageOwner.message == null) {
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append(str);
            stringBuilder2.append(messageObject.messageText);
            return stringBuilder2.toString();
        } else {
            stringBuilder2 = new StringBuilder();
            stringBuilder2.append(str);
            stringBuilder2.append(messageObject.messageOwner.message);
            return stringBuilder2.toString();
        }
    }

    private void saveMessageToGallery(MessageObject messageObject) {
        String path = messageObject.messageOwner.attachPath;
        if (!(TextUtils.isEmpty(path) || new File(path).exists())) {
            path = null;
        }
        if (TextUtils.isEmpty(path)) {
            path = FileLoader.getPathToMessage(messageObject.messageOwner).toString();
        }
        MediaController.saveFile(path, getParentActivity(), messageObject.isVideo(), null, null);
    }

    private void processSelectedOption(int option) {
        if (this.selectedObject != null) {
            if (getParentActivity() != null) {
                int i = 3;
                int a = 0;
                AlertDialog.Builder builder;
                String path;
                switch (option) {
                    case 0:
                        if (r7.selectedObjectGroup == null) {
                            if (SendMessagesHelper.getInstance(r7.currentAccount).retrySendMessage(r7.selectedObject, false)) {
                                updateVisibleRows();
                                moveScrollToLastMessage();
                                break;
                            }
                        }
                        boolean success = true;
                        for (i = 0; i < r7.selectedObjectGroup.messages.size(); i++) {
                            if (!SendMessagesHelper.getInstance(r7.currentAccount).retrySendMessage((MessageObject) r7.selectedObjectGroup.messages.get(i), false)) {
                                success = false;
                            }
                        }
                        if (success) {
                            moveScrollToLastMessage();
                        }
                        break;
                        break;
                    case 1:
                        if (getParentActivity() != null) {
                            createDeleteMessagesAlert(r7.selectedObject, r7.selectedObjectGroup);
                            break;
                        }
                        r7.selectedObject = null;
                        r7.selectedObjectGroup = null;
                        return;
                    case 2:
                        r7.forwardingMessage = r7.selectedObject;
                        r7.forwardingMessageGroup = r7.selectedObjectGroup;
                        Bundle args = new Bundle();
                        args.putBoolean("onlySelect", true);
                        args.putInt("dialogsType", 3);
                        DialogsActivity fragment = new DialogsActivity(args);
                        fragment.setDelegate(r7);
                        presentFragment(fragment);
                        break;
                    case 3:
                        AndroidUtilities.addToClipboard(getMessageContent(r7.selectedObject, 0, false));
                        break;
                    case 4:
                        if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") == 0) {
                            if (r7.selectedObjectGroup == null) {
                                saveMessageToGallery(r7.selectedObject);
                                break;
                            }
                            while (true) {
                                i = a;
                                if (i >= r7.selectedObjectGroup.messages.size()) {
                                    break;
                                }
                                saveMessageToGallery((MessageObject) r7.selectedObjectGroup.messages.get(i));
                                a = i + 1;
                            }
                        } else {
                            getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                            r7.selectedObject = null;
                            r7.selectedObjectGroup = null;
                            return;
                        }
                        break;
                    case 5:
                        File f;
                        File locFile = null;
                        if (!TextUtils.isEmpty(r7.selectedObject.messageOwner.attachPath)) {
                            f = new File(r7.selectedObject.messageOwner.attachPath);
                            if (f.exists()) {
                                locFile = f;
                            }
                        }
                        if (locFile == null) {
                            f = FileLoader.getPathToMessage(r7.selectedObject.messageOwner);
                            if (f.exists()) {
                                locFile = f;
                            }
                        }
                        if (locFile != null) {
                            if (!locFile.getName().toLowerCase().endsWith("attheme")) {
                                if (!LocaleController.getInstance().applyLanguageFile(locFile, r7.currentAccount)) {
                                    if (getParentActivity() != null) {
                                        AlertDialog.Builder builder2 = new AlertDialog.Builder(getParentActivity());
                                        builder2.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                        builder2.setMessage(LocaleController.getString("IncorrectLocalization", R.string.IncorrectLocalization));
                                        builder2.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                        showDialog(builder2.create());
                                        break;
                                    }
                                    r7.selectedObject = null;
                                    r7.selectedObjectGroup = null;
                                    return;
                                }
                                presentFragment(new LanguageSelectActivity());
                                break;
                            }
                            if (r7.chatLayoutManager != null) {
                                int lastPosition = r7.chatLayoutManager.findFirstVisibleItemPosition();
                                if (lastPosition != 0) {
                                    r7.scrollToPositionOnRecreate = lastPosition;
                                    Holder holder = (Holder) r7.chatListView.findViewHolderForAdapterPosition(r7.scrollToPositionOnRecreate);
                                    if (holder != null) {
                                        r7.scrollToOffsetOnRecreate = (r7.chatListView.getMeasuredHeight() - holder.itemView.getBottom()) - r7.chatListView.getPaddingBottom();
                                    } else {
                                        r7.scrollToPositionOnRecreate = -1;
                                    }
                                } else {
                                    r7.scrollToPositionOnRecreate = -1;
                                }
                            }
                            ThemeInfo themeInfo = Theme.applyThemeFile(locFile, r7.selectedObject.getDocumentName(), true);
                            if (themeInfo != null) {
                                presentFragment(new ThemePreviewActivity(locFile, themeInfo));
                            } else {
                                r7.scrollToPositionOnRecreate = -1;
                                if (getParentActivity() == null) {
                                    r7.selectedObject = null;
                                    r7.selectedObjectGroup = null;
                                    return;
                                }
                                builder = new AlertDialog.Builder(getParentActivity());
                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                                builder.setMessage(LocaleController.getString("IncorrectTheme", R.string.IncorrectTheme));
                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
                                showDialog(builder.create());
                            }
                            break;
                        }
                        break;
                    case 6:
                        path = r7.selectedObject.messageOwner.attachPath;
                        if (!(path == null || path.length() <= 0 || new File(path).exists())) {
                            path = null;
                        }
                        if (path == null || path.length() == 0) {
                            path = FileLoader.getPathToMessage(r7.selectedObject.messageOwner).toString();
                        }
                        Intent intent = new Intent("android.intent.action.SEND");
                        intent.setType(r7.selectedObject.getDocument().mime_type);
                        File f2 = new File(path);
                        if (VERSION.SDK_INT >= 24) {
                            try {
                                intent.putExtra("android.intent.extra.STREAM", FileProvider.getUriForFile(getParentActivity(), "org.telegram.messenger.beta.provider", f2));
                                intent.setFlags(1);
                            } catch (Exception e) {
                                Exception ignore = e;
                                intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(f2));
                            }
                        } else {
                            intent.putExtra("android.intent.extra.STREAM", Uri.fromFile(f2));
                        }
                        getParentActivity().startActivityForResult(Intent.createChooser(intent, LocaleController.getString("ShareFile", R.string.ShareFile)), 500);
                        break;
                    case 7:
                        path = r7.selectedObject.messageOwner.attachPath;
                        if (!(path == null || path.length() <= 0 || new File(path).exists())) {
                            path = null;
                        }
                        if (path == null || path.length() == 0) {
                            path = FileLoader.getPathToMessage(r7.selectedObject.messageOwner).toString();
                        }
                        if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") == 0) {
                            MediaController.saveFile(path, getParentActivity(), 0, null, null);
                            break;
                        }
                        getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                        r7.selectedObject = null;
                        r7.selectedObjectGroup = null;
                        return;
                        break;
                    case 8:
                        showReplyPanel(true, r7.selectedObject, null, null, false);
                        break;
                    case 9:
                        Context parentActivity = getParentActivity();
                        InputStickerSet inputStickerSet = r7.selectedObject.getInputStickerSet();
                        StickersAlertDelegate stickersAlertDelegate = (r7.bottomOverlayChat.getVisibility() == 0 || !ChatObject.canSendStickers(r7.currentChat)) ? null : r7.chatActivityEnterView;
                        showDialog(new StickersAlert(parentActivity, r7, inputStickerSet, null, stickersAlertDelegate));
                        break;
                    case 10:
                        if (VERSION.SDK_INT < edit || getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") == 0) {
                            String fileName = FileLoader.getDocumentFileName(r7.selectedObject.getDocument());
                            if (TextUtils.isEmpty(fileName)) {
                                fileName = r7.selectedObject.getFileName();
                            }
                            String path2 = r7.selectedObject.messageOwner.attachPath;
                            if (!(path2 == null || path2.length() <= 0 || new File(path2).exists())) {
                                path2 = null;
                            }
                            if (path2 == null || path2.length() == 0) {
                                path2 = FileLoader.getPathToMessage(r7.selectedObject.messageOwner).toString();
                            }
                            Context parentActivity2 = getParentActivity();
                            if (!r7.selectedObject.isMusic()) {
                                i = 2;
                            }
                            MediaController.saveFile(path2, parentActivity2, i, fileName, r7.selectedObject.getDocument() != null ? r7.selectedObject.getDocument().mime_type : TtmlNode.ANONYMOUS_REGION_ID);
                            break;
                        }
                        getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
                        r7.selectedObject = null;
                        r7.selectedObjectGroup = null;
                        return;
                    case 11:
                        Document document = r7.selectedObject.getDocument();
                        MessagesController.getInstance(r7.currentAccount).saveGif(document);
                        showGifHint();
                        r7.chatActivityEnterView.addRecentGif(document);
                        break;
                    case 12:
                        startEditingMessageObject(r7.selectedObject);
                        r7.selectedObject = null;
                        r7.selectedObjectGroup = null;
                        break;
                    case 13:
                        final boolean[] checks;
                        i = r7.selectedObject.getId();
                        builder = new AlertDialog.Builder(getParentActivity());
                        if (ChatObject.isChannel(r7.currentChat) && r7.currentChat.megagroup) {
                            builder.setMessage(LocaleController.getString("PinMessageAlert", R.string.PinMessageAlert));
                            checks = new boolean[]{true};
                            FrameLayout frameLayout = new FrameLayout(getParentActivity());
                            CheckBoxCell cell = new CheckBoxCell(getParentActivity(), 1);
                            cell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                            cell.setText(LocaleController.getString("PinNotify", R.string.PinNotify), TtmlNode.ANONYMOUS_REGION_ID, true, false);
                            cell.setPadding(LocaleController.isRTL ? AndroidUtilities.dp(8.0f) : 0, 0, LocaleController.isRTL ? 0 : AndroidUtilities.dp(8.0f), 0);
                            frameLayout.addView(cell, LayoutHelper.createFrame(-1, 48.0f, 51, 8.0f, 0.0f, 8.0f, 0.0f));
                            cell.setOnClickListener(new OnClickListener() {
                                public void onClick(View v) {
                                    CheckBoxCell cell = (CheckBoxCell) v;
                                    checks[0] = checks[0] ^ true;
                                    cell.setChecked(checks[0], true);
                                }
                            });
                            builder.setView(frameLayout);
                        } else {
                            builder.setMessage(LocaleController.getString("PinMessageAlertChannel", R.string.PinMessageAlertChannel));
                            checks = new boolean[]{false};
                        }
                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialogInterface, int i) {
                                MessagesController.getInstance(ChatActivity.this.currentAccount).pinChannelMessage(ChatActivity.this.currentChat, i, checks[0]);
                            }
                        });
                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                        showDialog(builder.create());
                        break;
                    case 14:
                        AlertDialog.Builder builder3 = new AlertDialog.Builder(getParentActivity());
                        builder3.setMessage(LocaleController.getString("UnpinMessageAlert", R.string.UnpinMessageAlert));
                        builder3.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialogInterface, int i) {
                                MessagesController.getInstance(ChatActivity.this.currentAccount).pinChannelMessage(ChatActivity.this.currentChat, 0, false);
                            }
                        });
                        builder3.setTitle(LocaleController.getString("AppName", R.string.AppName));
                        builder3.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                        showDialog(builder3.create());
                        break;
                    case 15:
                        Bundle args2 = new Bundle();
                        args2.putInt("user_id", r7.selectedObject.messageOwner.media.user_id);
                        args2.putString("phone", r7.selectedObject.messageOwner.media.phone_number);
                        args2.putBoolean("addContact", true);
                        presentFragment(new ContactAddActivity(args2));
                        break;
                    case 16:
                        AndroidUtilities.addToClipboard(r7.selectedObject.messageOwner.media.phone_number);
                        break;
                    case 17:
                        try {
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("tel:");
                            stringBuilder.append(r7.selectedObject.messageOwner.media.phone_number);
                            Intent intent2 = new Intent("android.intent.action.DIAL", Uri.parse(stringBuilder.toString()));
                            intent2.addFlags(268435456);
                            getParentActivity().startActivityForResult(intent2, 500);
                            break;
                        } catch (Throwable e2) {
                            FileLog.e(e2);
                            break;
                        }
                    case 18:
                        if (r7.currentUser != null) {
                            VoIPHelper.startCall(r7.currentUser, getParentActivity(), MessagesController.getInstance(r7.currentAccount).getUserFull(r7.currentUser.id));
                            break;
                        }
                        break;
                    case 19:
                        VoIPHelper.showRateAlert(getParentActivity(), (TL_messageActionPhoneCall) r7.selectedObject.messageOwner.action);
                        break;
                    case 20:
                        DataQuery.getInstance(r7.currentAccount).addRecentSticker(2, r7.selectedObject.getDocument(), (int) (System.currentTimeMillis() / 1000), false);
                        break;
                    case 21:
                        DataQuery.getInstance(r7.currentAccount).addRecentSticker(2, r7.selectedObject.getDocument(), (int) (System.currentTimeMillis() / 1000), true);
                        break;
                    case 22:
                        TL_channels_exportMessageLink req = new TL_channels_exportMessageLink();
                        req.id = r7.selectedObject.getId();
                        req.channel = MessagesController.getInputChannel(r7.currentChat);
                        ConnectionsManager.getInstance(r7.currentAccount).sendRequest(req, new RequestDelegate() {
                            public void run(final TLObject response, TL_error error) {
                                AndroidUtilities.runOnUIThread(new Runnable() {
                                    public void run() {
                                        if (response != null) {
                                            try {
                                                ((ClipboardManager) ApplicationLoader.applicationContext.getSystemService("clipboard")).setPrimaryClip(ClipData.newPlainText("label", response.link));
                                                Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("LinkCopied", R.string.LinkCopied), 0).show();
                                            } catch (Throwable e) {
                                                FileLog.e(e);
                                            }
                                        }
                                    }
                                });
                            }
                        });
                        break;
                    case edit /*23*/:
                        showDialog(AlertsCreator.createReportAlert(getParentActivity(), r7.dialog_id, r7.selectedObject.getId(), r7));
                        break;
                    default:
                        break;
                }
                r7.selectedObject = null;
                r7.selectedObjectGroup = null;
            }
        }
    }

    public boolean checkRecordLocked() {
        if (this.chatActivityEnterView == null || !this.chatActivityEnterView.isRecordLocked()) {
            return false;
        }
        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
        if (this.chatActivityEnterView.isInVideoMode()) {
            builder.setTitle(LocaleController.getString("DiscardVideoMessageTitle", R.string.DiscardVideoMessageTitle));
            builder.setMessage(LocaleController.getString("DiscardVideoMessageDescription", R.string.DiscardVideoMessageDescription));
        } else {
            builder.setTitle(LocaleController.getString("DiscardVoiceMessageTitle", R.string.DiscardVoiceMessageTitle));
            builder.setMessage(LocaleController.getString("DiscardVoiceMessageDescription", R.string.DiscardVoiceMessageDescription));
        }
        builder.setPositiveButton(LocaleController.getString("DiscardVoiceMessageAction", R.string.DiscardVoiceMessageAction), new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                if (ChatActivity.this.chatActivityEnterView != null) {
                    ChatActivity.this.chatActivityEnterView.cancelRecordingAudioVideo();
                }
            }
        });
        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
        showDialog(builder.create());
        return true;
    }

    public boolean onBackPressed() {
        if (checkRecordLocked()) {
            return false;
        }
        if (this.actionBar != null && this.actionBar.isActionModeShowed()) {
            for (int a = 1; a >= 0; a--) {
                this.selectedMessagesIds[a].clear();
                this.selectedMessagesCanCopyIds[a].clear();
                this.selectedMessagesCanStarIds[a].clear();
            }
            this.chatActivityEnterView.setEditingMessageObject(null, false);
            this.actionBar.hideActionMode();
            updatePinnedMessageView(true);
            this.cantDeleteMessagesCount = 0;
            this.canEditMessagesCount = 0;
            updateVisibleRows();
            return false;
        } else if (this.chatActivityEnterView == null || !this.chatActivityEnterView.isPopupShowing()) {
            return true;
        } else {
            this.chatActivityEnterView.hidePopup(true);
            return false;
        }
    }

    private void updateVisibleRows() {
        if (this.chatListView != null) {
            int pos;
            int lastVisibleItem = -1;
            if (!(r0.wasManualScroll || r0.unreadMessageObject == null || r0.chatListView.getMeasuredHeight() == 0)) {
                pos = r0.messages.indexOf(r0.unreadMessageObject);
                if (pos >= 0) {
                    lastVisibleItem = r0.chatAdapter.messagesStartRow + pos;
                }
            }
            pos = r0.chatListView.getChildCount();
            Drawable drawable = null;
            MessageObject editingMessageObject = r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEditingMessageObject() : null;
            int a = 0;
            while (a < pos) {
                int i;
                View view = r0.chatListView.getChildAt(a);
                if (view instanceof ChatMessageCell) {
                    ChatMessageCell cell = (ChatMessageCell) view;
                    MessageObject messageObject = cell.getMessageObject();
                    boolean disableSelection = false;
                    boolean selected = false;
                    boolean z = true;
                    if (r0.actionBar.isActionModeShowed()) {
                        i = a;
                        int idx = messageObject.getDialogId() == r0.dialog_id ? 0 : 1;
                        if (messageObject != editingMessageObject) {
                            if (r0.selectedMessagesIds[idx].indexOfKey(messageObject.getId()) < 0) {
                                view.setBackgroundDrawable(drawable);
                                disableSelection = true;
                            }
                        }
                        setCellSelectionBackground(messageObject, cell, idx);
                        selected = true;
                        disableSelection = true;
                    } else {
                        i = a;
                        view.setBackgroundDrawable(drawable);
                    }
                    cell.setMessageObject(cell.getMessageObject(), cell.getCurrentMessagesGroup(), cell.isPinnedBottom(), cell.isPinnedTop());
                    boolean z2 = !disableSelection;
                    boolean z3 = disableSelection && selected;
                    cell.setCheckPressed(z2, z3);
                    z2 = (r0.highlightMessageId == ConnectionsManager.DEFAULT_DATACENTER_ID || messageObject == null || messageObject.getId() != r0.highlightMessageId) ? false : true;
                    cell.setHighlighted(z2);
                    if (r0.searchContainer != null && r0.searchContainer.getVisibility() == 0) {
                        DataQuery instance = DataQuery.getInstance(r0.currentAccount);
                        a = messageObject.getId();
                        DataQuery dataQuery = instance;
                        if (messageObject.getDialogId() != r0.mergeDialogId) {
                            z = false;
                        }
                        if (dataQuery.isMessageFound(a, z) && DataQuery.getInstance(r0.currentAccount).getLastSearchQuery() != null) {
                            cell.setHighlightedText(DataQuery.getInstance(r0.currentAccount).getLastSearchQuery());
                            drawable = null;
                        }
                    }
                    drawable = null;
                    cell.setHighlightedText(null);
                } else {
                    i = a;
                    if (view instanceof ChatActionCell) {
                        ChatActionCell cell2 = (ChatActionCell) view;
                        cell2.setMessageObject(cell2.getMessageObject());
                    }
                }
                a = i + 1;
            }
            r0.chatListView.invalidate();
            if (lastVisibleItem != -1) {
                r0.chatLayoutManager.scrollToPositionWithOffset(lastVisibleItem, ((r0.chatListView.getMeasuredHeight() - r0.chatListView.getPaddingBottom()) - r0.chatListView.getPaddingTop()) - AndroidUtilities.dp(29.0f));
            }
        }
    }

    private void checkEditTimer() {
        if (this.chatActivityEnterView != null) {
            MessageObject messageObject = this.chatActivityEnterView.getEditingMessageObject();
            if (messageObject != null) {
                if (this.currentUser == null || !this.currentUser.self) {
                    int dt = messageObject.canEditMessageAnytime(this.currentChat) ? 360 : (MessagesController.getInstance(this.currentAccount).maxEditTime + 300) - Math.abs(ConnectionsManager.getInstance(this.currentAccount).getCurrentTime() - messageObject.messageOwner.date);
                    if (dt > 0) {
                        if (dt <= 300) {
                            if (this.actionModeSubTextView.getVisibility() != 0) {
                                this.actionModeSubTextView.setVisibility(0);
                            }
                            SimpleTextView simpleTextView = this.actionModeSubTextView;
                            Object[] objArr = new Object[1];
                            objArr[0] = String.format("%d:%02d", new Object[]{Integer.valueOf(dt / 60), Integer.valueOf(dt % 60)});
                            simpleTextView.setText(LocaleController.formatString("TimeToEdit", R.string.TimeToEdit, objArr));
                        } else if (this.actionModeSubTextView.getVisibility() != 8) {
                            this.actionModeSubTextView.setVisibility(8);
                        }
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                ChatActivity.this.checkEditTimer();
                            }
                        }, 1000);
                    } else {
                        this.chatActivityEnterView.onEditTimeExpired();
                        this.actionModeSubTextView.setText(LocaleController.formatString("TimeToEditExpired", R.string.TimeToEditExpired, new Object[0]));
                    }
                    return;
                }
                if (this.actionModeSubTextView.getVisibility() != 8) {
                    this.actionModeSubTextView.setVisibility(8);
                }
            }
        }
    }

    private ArrayList<MessageObject> createVoiceMessagesPlaylist(MessageObject startMessageObject, boolean playingUnreadMedia) {
        ArrayList<MessageObject> messageObjects = new ArrayList();
        messageObjects.add(startMessageObject);
        int messageId = startMessageObject.getId();
        long startDialogId = startMessageObject.getDialogId();
        if (messageId != 0) {
            for (int a = this.messages.size() - 1; a >= 0; a--) {
                MessageObject messageObject = (MessageObject) this.messages.get(a);
                if (messageObject.getDialogId() != this.mergeDialogId || startMessageObject.getDialogId() == this.mergeDialogId) {
                    if (((this.currentEncryptedChat == null && messageObject.getId() > messageId) || (this.currentEncryptedChat != null && messageObject.getId() < messageId)) && ((messageObject.isVoice() || messageObject.isRoundVideo()) && (!playingUnreadMedia || (messageObject.isContentUnread() && !messageObject.isOut())))) {
                        messageObjects.add(messageObject);
                    }
                }
            }
        }
        return messageObjects;
    }

    private void alertUserOpenError(MessageObject message) {
        if (getParentActivity() != null) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
            if (message.type == 3) {
                builder.setMessage(LocaleController.getString("NoPlayerInstalled", R.string.NoPlayerInstalled));
            } else {
                builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.getDocument().mime_type));
            }
            showDialog(builder.create());
        }
    }

    private void openSearchWithText(String text) {
        boolean z = false;
        if (!this.actionBar.isSearchFieldVisible()) {
            this.avatarContainer.setVisibility(8);
            this.headerItem.setVisibility(8);
            this.attachItem.setVisibility(8);
            this.searchItem.setVisibility(0);
            updateSearchButtons(0, 0, -1);
            updateBottomOverlay();
        }
        if (text == null) {
            z = true;
        }
        this.openSearchKeyboard = z;
        this.searchItem.openSearch(this.openSearchKeyboard);
        if (text != null) {
            this.searchItem.getSearchField().setText(text);
            this.searchItem.getSearchField().setSelection(this.searchItem.getSearchField().length());
            DataQuery.getInstance(this.currentAccount).searchMessagesInChat(text, this.dialog_id, this.mergeDialogId, this.classGuid, 0, this.searchingUserMessages);
        }
        updatePinnedMessageView(true);
    }

    public void didSelectLocation(MessageMedia location, int live) {
        SendMessagesHelper.getInstance(this.currentAccount).sendMessage(location, this.dialog_id, this.replyingMessageObject, null, null);
        moveScrollToLastMessage();
        if (live == 1) {
            showReplyPanel(false, null, null, null, false);
            DataQuery.getInstance(this.currentAccount).cleanDraft(this.dialog_id, true);
        }
        if (this.paused) {
            this.scrollToTopOnResume = true;
        }
    }

    public boolean isSecretChat() {
        return this.currentEncryptedChat != null;
    }

    public User getCurrentUser() {
        return this.currentUser;
    }

    public Chat getCurrentChat() {
        return this.currentChat;
    }

    public boolean allowGroupPhotos() {
        if (this.currentEncryptedChat != null) {
            if (AndroidUtilities.getPeerLayerVersion(this.currentEncryptedChat.layer) < 73) {
                return false;
            }
        }
        return true;
    }

    public EncryptedChat getCurrentEncryptedChat() {
        return this.currentEncryptedChat;
    }

    public ChatFull getCurrentChatInfo() {
        return this.info;
    }

    public void sendMedia(PhotoEntry photoEntry, VideoEditedInfo videoEditedInfo) {
        ChatActivity chatActivity = this;
        PhotoEntry photoEntry2 = photoEntry;
        VideoEditedInfo videoEditedInfo2 = videoEditedInfo;
        if (photoEntry2.isVideo) {
            if (videoEditedInfo2 != null) {
                SendMessagesHelper.prepareSendingVideo(photoEntry2.path, videoEditedInfo2.estimatedSize, videoEditedInfo2.estimatedDuration, videoEditedInfo2.resultWidth, videoEditedInfo2.resultHeight, videoEditedInfo2, chatActivity.dialog_id, chatActivity.replyingMessageObject, photoEntry2.caption, photoEntry2.entities, photoEntry2.ttl);
            } else {
                SendMessagesHelper.prepareSendingVideo(photoEntry2.path, 0, 0, 0, 0, null, chatActivity.dialog_id, chatActivity.replyingMessageObject, photoEntry2.caption, photoEntry2.entities, photoEntry2.ttl);
            }
            showReplyPanel(false, null, null, null, false);
            DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
        } else if (photoEntry2.imagePath != null) {
            SendMessagesHelper.prepareSendingPhoto(photoEntry2.imagePath, null, chatActivity.dialog_id, chatActivity.replyingMessageObject, photoEntry2.caption, photoEntry2.entities, photoEntry2.stickers, null, photoEntry2.ttl);
            showReplyPanel(false, null, null, null, false);
            DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
        } else if (photoEntry2.path != null) {
            SendMessagesHelper.prepareSendingPhoto(photoEntry2.path, null, chatActivity.dialog_id, chatActivity.replyingMessageObject, photoEntry2.caption, photoEntry2.entities, photoEntry2.stickers, null, photoEntry2.ttl);
            showReplyPanel(false, null, null, null, false);
            DataQuery.getInstance(chatActivity.currentAccount).cleanDraft(chatActivity.dialog_id, true);
        }
    }

    public void showOpenGameAlert(TL_game game, MessageObject messageObject, String urlStr, boolean ask, int uid) {
        TL_game tL_game = game;
        User user = MessagesController.getInstance(this.currentAccount).getUser(Integer.valueOf(uid));
        String name;
        final MessageObject messageObject2;
        final String str;
        if (ask) {
            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
            if (user != null) {
                name = ContactsController.formatName(user.first_name, user.last_name);
            } else {
                name = TtmlNode.ANONYMOUS_REGION_ID;
            }
            builder.setMessage(LocaleController.formatString("BotPermissionGameAlert", R.string.BotPermissionGameAlert, name));
            final TL_game tL_game2 = tL_game;
            messageObject2 = messageObject;
            str = urlStr;
            final int i = uid;
            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialogInterface, int i) {
                    ChatActivity.this.showOpenGameAlert(tL_game2, messageObject2, str, false, i);
                    Editor edit = MessagesController.getNotificationsSettings(ChatActivity.this.currentAccount).edit();
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("askgame_");
                    stringBuilder.append(i);
                    edit.putBoolean(stringBuilder.toString(), false).commit();
                }
            });
            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
            showDialog(builder.create());
        } else if (VERSION.SDK_INT < 21 || AndroidUtilities.isTablet() || !WebviewActivity.supportWebview()) {
            Activity parentActivity = getParentActivity();
            name = tL_game.short_name;
            String str2 = (user == null || user.username == null) ? TtmlNode.ANONYMOUS_REGION_ID : user.username;
            WebviewActivity.openGameInBrowser(urlStr, messageObject, parentActivity, name, str2);
        } else {
            if (r6.parentLayout.fragmentsStack.get(r6.parentLayout.fragmentsStack.size() - 1) == r6) {
                name = (user == null || TextUtils.isEmpty(user.username)) ? TtmlNode.ANONYMOUS_REGION_ID : user.username;
                presentFragment(new WebviewActivity(urlStr, name, tL_game.title, tL_game.short_name, messageObject));
            }
            messageObject2 = messageObject;
            str = urlStr;
        }
    }

    public void showOpenUrlAlert(final String url, boolean ask) {
        boolean z = false;
        if (!Browser.isInternalUrl(url, null)) {
            if (ask) {
                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
                builder.setMessage(LocaleController.formatString("OpenUrlAlert", R.string.OpenUrlAlert, url));
                builder.setPositiveButton(LocaleController.getString("Open", R.string.Open), new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialogInterface, int i) {
                        Browser.openUrl(ChatActivity.this.getParentActivity(), url, ChatActivity.this.inlineReturn == 0);
                    }
                });
                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
                showDialog(builder.create());
                return;
            }
        }
        Context parentActivity = getParentActivity();
        if (this.inlineReturn == 0) {
            z = true;
        }
        Browser.openUrl(parentActivity, url, z);
    }

    private void removeMessageObject(MessageObject messageObject) {
        int index = this.messages.indexOf(messageObject);
        if (index != -1) {
            this.messages.remove(index);
            if (this.chatAdapter != null) {
                this.chatAdapter.notifyItemRemoved(this.chatAdapter.messagesStartRow + index);
            }
        }
    }

    private void setCellSelectionBackground(MessageObject message, ChatMessageCell messageCell, int idx) {
        GroupedMessages groupedMessages = getValidGroupedMessage(message);
        if (groupedMessages != null) {
            boolean hasUnselected = false;
            for (int a = 0; a < groupedMessages.messages.size(); a++) {
                if (this.selectedMessagesIds[idx].indexOfKey(((MessageObject) groupedMessages.messages.get(a)).getId()) < 0) {
                    hasUnselected = true;
                    break;
                }
            }
            if (!hasUnselected) {
                groupedMessages = null;
            }
        }
        if (groupedMessages == null) {
            messageCell.setBackgroundColor(Theme.getColor(Theme.key_chat_selectedBackground));
        } else {
            messageCell.setBackground(null);
        }
    }

    public ThemeDescription[] getThemeDescriptions() {
        View subtitleTextView;
        View emojiView;
        ThemeDescriptionDelegate selectedBackgroundDelegate = new ThemeDescriptionDelegate() {
            public void didSetColor() {
                ChatActivity.this.updateVisibleRows();
                if (ChatActivity.this.chatActivityEnterView != null && ChatActivity.this.chatActivityEnterView.getEmojiView() != null) {
                    ChatActivity.this.chatActivityEnterView.getEmojiView().updateUIColors();
                }
            }
        };
        ThemeDescription[] themeDescriptionArr = new ThemeDescription[340];
        themeDescriptionArr[0] = new ThemeDescription(this.fragmentView, 0, null, null, null, null, Theme.key_chat_wallpaper);
        themeDescriptionArr[1] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault);
        themeDescriptionArr[2] = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault);
        themeDescriptionArr[3] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarDefaultIcon);
        themeDescriptionArr[4] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector);
        themeDescriptionArr[5] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUBACKGROUND, null, null, null, null, Theme.key_actionBarDefaultSubmenuBackground);
        themeDescriptionArr[6] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, null, Theme.key_actionBarDefaultSubmenuItem);
        themeDescriptionArr[7] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault);
        themeDescriptionArr[8] = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault);
        themeDescriptionArr[9] = new ThemeDescription(this.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarDefaultIcon);
        View view = null;
        themeDescriptionArr[10] = new ThemeDescription(this.avatarContainer != null ? r0.avatarContainer.getTitleTextView() : null, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle);
        if (r0.avatarContainer != null) {
            subtitleTextView = r0.avatarContainer.getSubtitleTextView();
        } else {
            subtitleTextView = null;
        }
        themeDescriptionArr[11] = new ThemeDescription(subtitleTextView, ThemeDescription.FLAG_TEXTCOLOR, null, new Paint[]{Theme.chat_statusPaint, Theme.chat_statusRecordPaint}, null, null, Theme.key_actionBarDefaultSubtitle, null);
        themeDescriptionArr[12] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector);
        themeDescriptionArr[13] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_SEARCH, null, null, null, null, Theme.key_actionBarDefaultSearch);
        themeDescriptionArr[14] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER, null, null, null, null, Theme.key_actionBarDefaultSearchPlaceholder);
        themeDescriptionArr[15] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_AM_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon);
        themeDescriptionArr[16] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_AM_BACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefault);
        themeDescriptionArr[17] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_AM_TOPBACKGROUND, null, null, null, null, Theme.key_actionBarActionModeDefaultTop);
        themeDescriptionArr[18] = new ThemeDescription(r0.actionBar, ThemeDescription.FLAG_AB_AM_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultSelector);
        themeDescriptionArr[19] = new ThemeDescription(r0.selectedMessagesCountTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon);
        themeDescriptionArr[20] = new ThemeDescription(r0.actionModeTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon);
        themeDescriptionArr[21] = new ThemeDescription(r0.actionModeSubTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_actionBarActionModeDefaultIcon);
        themeDescriptionArr[22] = new ThemeDescription(r0.avatarContainer != null ? r0.avatarContainer.getTitleTextView() : null, 0, null, null, new Drawable[]{Theme.chat_muteIconDrawable}, null, Theme.key_chat_muteIcon);
        if (r0.avatarContainer != null) {
            subtitleTextView = r0.avatarContainer.getTitleTextView();
        } else {
            subtitleTextView = null;
        }
        themeDescriptionArr[edit] = new ThemeDescription(subtitleTextView, 0, null, null, new Drawable[]{Theme.chat_lockIconDrawable}, null, Theme.key_chat_lockIcon);
        themeDescriptionArr[24] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.avatar_photoDrawable, Theme.avatar_broadcastDrawable, Theme.avatar_savedDrawable}, null, Theme.key_avatar_text);
        themeDescriptionArr[25] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundRed);
        themeDescriptionArr[26] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundOrange);
        themeDescriptionArr[27] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundViolet);
        themeDescriptionArr[28] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundGreen);
        themeDescriptionArr[29] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundCyan);
        themeDescriptionArr[bot_help] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundBlue);
        themeDescriptionArr[bot_settings] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_backgroundPink);
        themeDescriptionArr[32] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageRed);
        themeDescriptionArr[33] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageOrange);
        themeDescriptionArr[34] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageViolet);
        themeDescriptionArr[35] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageGreen);
        themeDescriptionArr[36] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageCyan);
        themeDescriptionArr[37] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessageBlue);
        themeDescriptionArr[38] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_avatar_nameInMessagePink);
        themeDescriptionArr[39] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, new Drawable[]{Theme.chat_msgInDrawable, Theme.chat_msgInMediaDrawable}, null, Theme.key_chat_inBubble);
        themeDescriptionArr[search] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInSelectedDrawable, Theme.chat_msgInMediaSelectedDrawable}, null, Theme.key_chat_inBubbleSelected);
        themeDescriptionArr[41] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, new Drawable[]{Theme.chat_msgInShadowDrawable, Theme.chat_msgInMediaShadowDrawable}, null, Theme.key_chat_inBubbleShadow);
        themeDescriptionArr[42] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutDrawable, Theme.chat_msgOutMediaDrawable}, null, Theme.key_chat_outBubble);
        themeDescriptionArr[43] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutSelectedDrawable, Theme.chat_msgOutMediaSelectedDrawable}, null, Theme.key_chat_outBubbleSelected);
        themeDescriptionArr[44] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutShadowDrawable, Theme.chat_msgOutMediaShadowDrawable}, null, Theme.key_chat_outBubbleShadow);
        themeDescriptionArr[45] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActionCell.class}, Theme.chat_actionTextPaint, null, null, Theme.key_chat_serviceText);
        themeDescriptionArr[46] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatActionCell.class}, Theme.chat_actionTextPaint, null, null, Theme.key_chat_serviceLink);
        themeDescriptionArr[47] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_shareIconDrawable, Theme.chat_replyIconDrawable, Theme.chat_botInlineDrawable, Theme.chat_botLinkDrawalbe, Theme.chat_goIconDrawable}, null, Theme.key_chat_serviceIcon);
        themeDescriptionArr[48] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, Theme.key_chat_serviceBackground);
        themeDescriptionArr[49] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, null, null, null, Theme.key_chat_serviceBackgroundSelected);
        themeDescriptionArr[50] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, null, null, Theme.key_chat_messageTextIn);
        themeDescriptionArr[51] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_messageTextOut);
        themeDescriptionArr[52] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class, BotHelpCell.class}, null, null, null, Theme.key_chat_messageLinkIn, null);
        themeDescriptionArr[53] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_messageLinkOut, null);
        themeDescriptionArr[54] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutCheckDrawable, Theme.chat_msgOutHalfCheckDrawable}, null, Theme.key_chat_outSentCheck);
        themeDescriptionArr[55] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutCheckSelectedDrawable, Theme.chat_msgOutHalfCheckSelectedDrawable}, null, Theme.key_chat_outSentCheckSelected);
        themeDescriptionArr[56] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutClockDrawable}, null, Theme.key_chat_outSentClock);
        themeDescriptionArr[57] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutSelectedClockDrawable}, null, Theme.key_chat_outSentClockSelected);
        themeDescriptionArr[58] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInClockDrawable}, null, Theme.key_chat_inSentClock);
        themeDescriptionArr[59] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInSelectedClockDrawable}, null, Theme.key_chat_inSentClockSelected);
        themeDescriptionArr[60] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaCheckDrawable, Theme.chat_msgMediaHalfCheckDrawable}, null, Theme.key_chat_mediaSentCheck);
        themeDescriptionArr[61] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgStickerHalfCheckDrawable, Theme.chat_msgStickerCheckDrawable, Theme.chat_msgStickerClockDrawable, Theme.chat_msgStickerViewsDrawable}, null, Theme.key_chat_serviceText);
        themeDescriptionArr[62] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaClockDrawable}, null, Theme.key_chat_mediaSentClock);
        themeDescriptionArr[63] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutViewsDrawable}, null, Theme.key_chat_outViews);
        themeDescriptionArr[64] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutViewsSelectedDrawable}, null, Theme.key_chat_outViewsSelected);
        themeDescriptionArr[65] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsDrawable}, null, Theme.key_chat_inViews);
        themeDescriptionArr[66] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInViewsSelectedDrawable}, null, Theme.key_chat_inViewsSelected);
        themeDescriptionArr[67] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaViewsDrawable}, null, Theme.key_chat_mediaViews);
        themeDescriptionArr[68] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutMenuDrawable}, null, Theme.key_chat_outMenu);
        themeDescriptionArr[69] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutMenuSelectedDrawable}, null, Theme.key_chat_outMenuSelected);
        themeDescriptionArr[70] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuDrawable}, null, Theme.key_chat_inMenu);
        themeDescriptionArr[71] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInMenuSelectedDrawable}, null, Theme.key_chat_inMenuSelected);
        themeDescriptionArr[72] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgMediaMenuDrawable}, null, Theme.key_chat_mediaMenu);
        themeDescriptionArr[73] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutInstantDrawable, Theme.chat_msgOutCallDrawable}, null, Theme.key_chat_outInstant);
        themeDescriptionArr[74] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgOutCallSelectedDrawable}, null, Theme.key_chat_outInstantSelected);
        themeDescriptionArr[75] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInInstantDrawable, Theme.chat_msgInCallDrawable}, null, Theme.key_chat_inInstant);
        themeDescriptionArr[76] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgInCallSelectedDrawable}, null, Theme.key_chat_inInstantSelected);
        themeDescriptionArr[77] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallUpRedDrawable, Theme.chat_msgCallDownRedDrawable}, null, Theme.key_calls_callReceivedRedIcon);
        themeDescriptionArr[78] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgCallUpGreenDrawable, Theme.chat_msgCallDownGreenDrawable}, null, Theme.key_calls_callReceivedGreenIcon);
        themeDescriptionArr[79] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_msgErrorPaint, null, null, Theme.key_chat_sentError);
        themeDescriptionArr[80] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_msgErrorDrawable}, null, Theme.key_chat_sentErrorIcon);
        themeDescriptionArr[81] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, selectedBackgroundDelegate, Theme.key_chat_selectedBackground);
        themeDescriptionArr[82] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_durationPaint, null, null, Theme.key_chat_previewDurationText);
        themeDescriptionArr[83] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_gamePaint, null, null, Theme.key_chat_previewGameText);
        themeDescriptionArr[84] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewInstantText);
        themeDescriptionArr[85] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewInstantText);
        themeDescriptionArr[86] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewInstantSelectedText);
        themeDescriptionArr[87] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewInstantSelectedText);
        themeDescriptionArr[88] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_deleteProgressPaint, null, null, Theme.key_chat_secretTimeText);
        themeDescriptionArr[89] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerNameText);
        themeDescriptionArr[90] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_botButtonPaint, null, null, Theme.key_chat_botButtonText);
        themeDescriptionArr[91] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_botProgressPaint, null, null, Theme.key_chat_botProgress);
        themeDescriptionArr[92] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inForwardedNameText);
        themeDescriptionArr[93] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outForwardedNameText);
        themeDescriptionArr[94] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inViaBotNameText);
        themeDescriptionArr[95] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outViaBotNameText);
        themeDescriptionArr[96] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerViaBotNameText);
        themeDescriptionArr[97] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyLine);
        themeDescriptionArr[98] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyLine);
        themeDescriptionArr[99] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyLine);
        themeDescriptionArr[100] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyNameText);
        themeDescriptionArr[101] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyNameText);
        themeDescriptionArr[102] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyNameText);
        themeDescriptionArr[103] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMessageText);
        themeDescriptionArr[104] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMessageText);
        themeDescriptionArr[105] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMediaMessageText);
        themeDescriptionArr[106] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMediaMessageText);
        themeDescriptionArr[107] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inReplyMediaMessageSelectedText);
        themeDescriptionArr[108] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outReplyMediaMessageSelectedText);
        themeDescriptionArr[109] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_stickerReplyMessageText);
        themeDescriptionArr[110] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inPreviewLine);
        themeDescriptionArr[111] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outPreviewLine);
        themeDescriptionArr[112] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inSiteNameText);
        themeDescriptionArr[113] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outSiteNameText);
        themeDescriptionArr[114] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactNameText);
        themeDescriptionArr[115] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactNameText);
        themeDescriptionArr[116] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inContactPhoneText);
        themeDescriptionArr[117] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outContactPhoneText);
        themeDescriptionArr[118] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaProgress);
        themeDescriptionArr[119] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioProgress);
        themeDescriptionArr[120] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioProgress);
        themeDescriptionArr[121] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSelectedProgress);
        themeDescriptionArr[122] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSelectedProgress);
        themeDescriptionArr[123] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaTimeText);
        themeDescriptionArr[124] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inTimeText);
        themeDescriptionArr[125] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outTimeText);
        themeDescriptionArr[126] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inTimeSelectedText);
        themeDescriptionArr[127] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_adminText);
        themeDescriptionArr[128] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_adminSelectedText);
        themeDescriptionArr[TsExtractor.TS_STREAM_TYPE_AC3] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outTimeSelectedText);
        themeDescriptionArr[TsExtractor.TS_STREAM_TYPE_HDMV_DTS] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioPerfomerText);
        themeDescriptionArr[131] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioPerfomerText);
        themeDescriptionArr[132] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioTitleText);
        themeDescriptionArr[133] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioTitleText);
        themeDescriptionArr[TsExtractor.TS_STREAM_TYPE_SPLICE_INFO] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioDurationText);
        themeDescriptionArr[TsExtractor.TS_STREAM_TYPE_E_AC3] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioDurationText);
        themeDescriptionArr[136] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioDurationSelectedText);
        themeDescriptionArr[137] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioDurationSelectedText);
        themeDescriptionArr[TsExtractor.TS_STREAM_TYPE_DTS] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbar);
        themeDescriptionArr[139] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbar);
        themeDescriptionArr[140] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbarSelected);
        themeDescriptionArr[141] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbarSelected);
        themeDescriptionArr[142] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioSeekbarFill);
        themeDescriptionArr[143] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inAudioCacheSeekbar);
        themeDescriptionArr[144] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioSeekbarFill);
        themeDescriptionArr[145] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outAudioCacheSeekbar);
        themeDescriptionArr[146] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbar);
        themeDescriptionArr[147] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbar);
        themeDescriptionArr[148] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbarSelected);
        themeDescriptionArr[149] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbarSelected);
        themeDescriptionArr[150] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVoiceSeekbarFill);
        themeDescriptionArr[151] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVoiceSeekbarFill);
        themeDescriptionArr[152] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileProgress);
        themeDescriptionArr[153] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileProgress);
        themeDescriptionArr[154] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileProgressSelected);
        themeDescriptionArr[155] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileProgressSelected);
        themeDescriptionArr[156] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileNameText);
        themeDescriptionArr[157] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileNameText);
        themeDescriptionArr[158] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileInfoText);
        themeDescriptionArr[159] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileInfoText);
        themeDescriptionArr[160] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileInfoSelectedText);
        themeDescriptionArr[161] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileInfoSelectedText);
        themeDescriptionArr[162] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileBackground);
        themeDescriptionArr[163] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileBackground);
        themeDescriptionArr[164] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inFileBackgroundSelected);
        themeDescriptionArr[165] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outFileBackgroundSelected);
        themeDescriptionArr[166] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueNameText);
        themeDescriptionArr[167] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueNameText);
        themeDescriptionArr[168] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueInfoText);
        themeDescriptionArr[169] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueInfoText);
        themeDescriptionArr[170] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_inVenueInfoSelectedText);
        themeDescriptionArr[171] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_outVenueInfoSelectedText);
        themeDescriptionArr[172] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, null, null, Theme.key_chat_mediaInfoText);
        themeDescriptionArr[173] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_urlPaint, null, null, Theme.key_chat_linkSelectBackground);
        themeDescriptionArr[174] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, Theme.chat_textSearchSelectionPaint, null, null, Theme.key_chat_textSelectBackground);
        themeDescriptionArr[175] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[0][0], Theme.chat_fileStatesDrawable[1][0], Theme.chat_fileStatesDrawable[2][0], Theme.chat_fileStatesDrawable[3][0], Theme.chat_fileStatesDrawable[4][0]}, null, Theme.key_chat_outLoader);
        themeDescriptionArr[176] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[0][0], Theme.chat_fileStatesDrawable[1][0], Theme.chat_fileStatesDrawable[2][0], Theme.chat_fileStatesDrawable[3][0], Theme.chat_fileStatesDrawable[4][0]}, null, Theme.key_chat_outBubble);
        themeDescriptionArr[177] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[0][1], Theme.chat_fileStatesDrawable[1][1], Theme.chat_fileStatesDrawable[2][1], Theme.chat_fileStatesDrawable[3][1], Theme.chat_fileStatesDrawable[4][1]}, null, Theme.key_chat_outLoaderSelected);
        themeDescriptionArr[178] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[0][1], Theme.chat_fileStatesDrawable[1][1], Theme.chat_fileStatesDrawable[2][1], Theme.chat_fileStatesDrawable[3][1], Theme.chat_fileStatesDrawable[4][1]}, null, Theme.key_chat_outBubbleSelected);
        themeDescriptionArr[179] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[5][0], Theme.chat_fileStatesDrawable[6][0], Theme.chat_fileStatesDrawable[7][0], Theme.chat_fileStatesDrawable[8][0], Theme.chat_fileStatesDrawable[9][0]}, null, Theme.key_chat_inLoader);
        themeDescriptionArr[180] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[5][0], Theme.chat_fileStatesDrawable[6][0], Theme.chat_fileStatesDrawable[7][0], Theme.chat_fileStatesDrawable[8][0], Theme.chat_fileStatesDrawable[9][0]}, null, Theme.key_chat_inBubble);
        themeDescriptionArr[181] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[5][1], Theme.chat_fileStatesDrawable[6][1], Theme.chat_fileStatesDrawable[7][1], Theme.chat_fileStatesDrawable[8][1], Theme.chat_fileStatesDrawable[9][1]}, null, Theme.key_chat_inLoaderSelected);
        themeDescriptionArr[182] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_fileStatesDrawable[5][1], Theme.chat_fileStatesDrawable[6][1], Theme.chat_fileStatesDrawable[7][1], Theme.chat_fileStatesDrawable[8][1], Theme.chat_fileStatesDrawable[9][1]}, null, Theme.key_chat_inBubbleSelected);
        themeDescriptionArr[183] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[0][0], Theme.chat_photoStatesDrawables[1][0], Theme.chat_photoStatesDrawables[2][0], Theme.chat_photoStatesDrawables[3][0]}, null, Theme.key_chat_mediaLoaderPhoto);
        themeDescriptionArr[184] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[0][0], Theme.chat_photoStatesDrawables[1][0], Theme.chat_photoStatesDrawables[2][0], Theme.chat_photoStatesDrawables[3][0]}, null, Theme.key_chat_mediaLoaderPhotoIcon);
        themeDescriptionArr[185] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[0][1], Theme.chat_photoStatesDrawables[1][1], Theme.chat_photoStatesDrawables[2][1], Theme.chat_photoStatesDrawables[3][1]}, null, Theme.key_chat_mediaLoaderPhotoSelected);
        themeDescriptionArr[186] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[0][1], Theme.chat_photoStatesDrawables[1][1], Theme.chat_photoStatesDrawables[2][1], Theme.chat_photoStatesDrawables[3][1]}, null, Theme.key_chat_mediaLoaderPhotoIconSelected);
        themeDescriptionArr[187] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[7][0], Theme.chat_photoStatesDrawables[8][0]}, null, Theme.key_chat_outLoaderPhoto);
        themeDescriptionArr[188] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[7][0], Theme.chat_photoStatesDrawables[8][0]}, null, Theme.key_chat_outLoaderPhotoIcon);
        themeDescriptionArr[PsExtractor.PRIVATE_STREAM_1] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[7][1], Theme.chat_photoStatesDrawables[8][1]}, null, Theme.key_chat_outLoaderPhotoSelected);
        themeDescriptionArr[190] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[7][1], Theme.chat_photoStatesDrawables[8][1]}, null, Theme.key_chat_outLoaderPhotoIconSelected);
        themeDescriptionArr[191] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[10][0], Theme.chat_photoStatesDrawables[11][0]}, null, Theme.key_chat_inLoaderPhoto);
        themeDescriptionArr[PsExtractor.AUDIO_STREAM] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[10][0], Theme.chat_photoStatesDrawables[11][0]}, null, Theme.key_chat_inLoaderPhotoIcon);
        themeDescriptionArr[193] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[10][1], Theme.chat_photoStatesDrawables[11][1]}, null, Theme.key_chat_inLoaderPhotoSelected);
        themeDescriptionArr[194] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[10][1], Theme.chat_photoStatesDrawables[11][1]}, null, Theme.key_chat_inLoaderPhotoIconSelected);
        themeDescriptionArr[195] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[9][0]}, null, Theme.key_chat_outFileIcon);
        themeDescriptionArr[196] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[9][1]}, null, Theme.key_chat_outFileSelectedIcon);
        themeDescriptionArr[197] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[12][0]}, null, Theme.key_chat_inFileIcon);
        themeDescriptionArr[198] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_photoStatesDrawables[12][1]}, null, Theme.key_chat_inFileSelectedIcon);
        themeDescriptionArr[199] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, Theme.key_chat_inContactBackground);
        themeDescriptionArr[Callback.DEFAULT_DRAG_ANIMATION_DURATION] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[0]}, null, Theme.key_chat_inContactIcon);
        themeDescriptionArr[201] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, Theme.key_chat_outContactBackground);
        themeDescriptionArr[202] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_contactDrawable[1]}, null, Theme.key_chat_outContactIcon);
        themeDescriptionArr[203] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[0]}, null, Theme.key_chat_inLocationBackground);
        themeDescriptionArr[204] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[0]}, null, Theme.key_chat_inLocationIcon);
        themeDescriptionArr[205] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[1]}, null, Theme.key_chat_outLocationBackground);
        themeDescriptionArr[206] = new ThemeDescription(r0.chatListView, 0, new Class[]{ChatMessageCell.class}, null, new Drawable[]{Theme.chat_locationDrawable[1]}, null, Theme.key_chat_outLocationIcon);
        themeDescriptionArr[207] = new ThemeDescription(r0.mentionContainer, 0, null, Theme.chat_composeBackgroundPaint, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[208] = new ThemeDescription(r0.mentionContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow);
        themeDescriptionArr[209] = new ThemeDescription(r0.searchContainer, 0, null, Theme.chat_composeBackgroundPaint, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[210] = new ThemeDescription(r0.searchContainer, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow);
        themeDescriptionArr[211] = new ThemeDescription(r0.bottomOverlay, 0, null, Theme.chat_composeBackgroundPaint, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[212] = new ThemeDescription(r0.bottomOverlay, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow);
        themeDescriptionArr[213] = new ThemeDescription(r0.bottomOverlayChat, 0, null, Theme.chat_composeBackgroundPaint, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[214] = new ThemeDescription(r0.bottomOverlayChat, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow);
        themeDescriptionArr[215] = new ThemeDescription(r0.chatActivityEnterView, 0, null, Theme.chat_composeBackgroundPaint, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[216] = new ThemeDescription(r0.chatActivityEnterView, 0, null, null, new Drawable[]{Theme.chat_composeShadowDrawable}, null, Theme.key_chat_messagePanelShadow);
        themeDescriptionArr[217] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[]{ChatActivityEnterView.class}, new String[]{"audioVideoButtonContainer"}, null, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[218] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, null, null, null, Theme.key_chat_messagePanelText);
        themeDescriptionArr[219] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordSendText"}, null, null, null, Theme.key_chat_fieldOverlayText);
        themeDescriptionArr[220] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_HINTTEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, null, null, null, Theme.key_chat_messagePanelHint);
        themeDescriptionArr[221] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, null, null, null, Theme.key_chat_messagePanelSend);
        themeDescriptionArr[222] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"emojiButton"}, null, null, null, Theme.key_chat_messagePanelIcons);
        themeDescriptionArr[223] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, null, null, null, Theme.key_chat_messagePanelIcons);
        themeDescriptionArr[224] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, null, null, null, Theme.key_chat_messagePanelIcons);
        themeDescriptionArr[225] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, null, null, null, Theme.key_chat_messagePanelIcons);
        themeDescriptionArr[226] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"audioSendButton"}, null, null, null, Theme.key_chat_messagePanelIcons);
        themeDescriptionArr[227] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"videoSendButton"}, null, null, null, Theme.key_chat_messagePanelIcons);
        themeDescriptionArr[228] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonImage"}, null, null, null, Theme.key_chat_editDoneIcon);
        themeDescriptionArr[229] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioPanel"}, null, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[230] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"micDrawable"}, null, null, null, Theme.key_chat_messagePanelVoicePressed);
        themeDescriptionArr[231] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"cameraDrawable"}, null, null, null, Theme.key_chat_messagePanelVoicePressed);
        themeDescriptionArr[232] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"sendDrawable"}, null, null, null, Theme.key_chat_messagePanelVoicePressed);
        themeDescriptionArr[233] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockDrawable"}, null, null, null, Theme.key_chat_messagePanelVoiceLock);
        themeDescriptionArr[234] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockTopDrawable"}, null, null, null, Theme.key_chat_messagePanelVoiceLock);
        themeDescriptionArr[235] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockArrowDrawable"}, null, null, null, Theme.key_chat_messagePanelVoiceLock);
        themeDescriptionArr[236] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockBackgroundDrawable"}, null, null, null, Theme.key_chat_messagePanelVoiceLockBackground);
        themeDescriptionArr[237] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockShadowDrawable"}, null, null, null, Theme.key_chat_messagePanelVoiceLockShadow);
        themeDescriptionArr[238] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordDeleteImageView"}, null, null, null, Theme.key_chat_messagePanelVoiceDelete);
        themeDescriptionArr[239] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioBackground"}, null, null, null, Theme.key_chat_recordedVoiceBackground);
        themeDescriptionArr[PsExtractor.VIDEO_STREAM_MASK] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordTimeText"}, null, null, null, Theme.key_chat_recordTime);
        themeDescriptionArr[241] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[]{ChatActivityEnterView.class}, new String[]{"recordTimeContainer"}, null, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[242] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordCancelText"}, null, null, null, Theme.key_chat_recordVoiceCancel);
        themeDescriptionArr[243] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[]{ChatActivityEnterView.class}, new String[]{"recordPanel"}, null, null, null, Theme.key_chat_messagePanelBackground);
        themeDescriptionArr[244] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioTimeTextView"}, null, null, null, Theme.key_chat_messagePanelVoiceDuration);
        themeDescriptionArr[245] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordCancelImage"}, null, null, null, Theme.key_chat_recordVoiceCancel);
        themeDescriptionArr[246] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, null, null, null, Theme.key_contextProgressInner1);
        themeDescriptionArr[247] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, null, null, null, Theme.key_contextProgressOuter1);
        themeDescriptionArr[248] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, null, null, null, Theme.key_chat_messagePanelCancelInlineBot);
        themeDescriptionArr[249] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"redDotPaint"}, null, null, null, Theme.key_chat_recordedVoiceDot);
        themeDescriptionArr[Callback.DEFAULT_SWIPE_ANIMATION_DURATION] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"paint"}, null, null, null, Theme.key_chat_messagePanelVoiceBackground);
        themeDescriptionArr[251] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"paintRecord"}, null, null, null, Theme.key_chat_messagePanelVoiceShadow);
        themeDescriptionArr[252] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, null, null, null, Theme.key_chat_recordedVoiceProgress);
        themeDescriptionArr[253] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, null, null, null, Theme.key_chat_recordedVoiceProgressInner);
        themeDescriptionArr[254] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"playDrawable"}, null, null, null, Theme.key_chat_recordedVoicePlayPause);
        themeDescriptionArr[255] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"pauseDrawable"}, null, null, null, Theme.key_chat_recordedVoicePlayPause);
        themeDescriptionArr[256] = new ThemeDescription(r0.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"dotPaint"}, null, null, null, Theme.key_chat_emojiPanelNewTrending);
        themeDescriptionArr[257] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"playDrawable"}, null, null, null, Theme.key_chat_recordedVoicePlayPausePressed);
        themeDescriptionArr[258] = new ThemeDescription(r0.chatActivityEnterView, ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"pauseDrawable"}, null, null, null, Theme.key_chat_recordedVoicePlayPausePressed);
        themeDescriptionArr[259] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelBackground);
        themeDescriptionArr[260] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelShadowLine);
        themeDescriptionArr[261] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelEmptyText);
        themeDescriptionArr[262] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelIcon);
        themeDescriptionArr[263] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelIconSelected);
        themeDescriptionArr[264] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelStickerPackSelector);
        themeDescriptionArr[265] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelIconSelector);
        themeDescriptionArr[266] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelBackspace);
        themeDescriptionArr[267] = new ThemeDescription(r0.chatActivityEnterView != null ? r0.chatActivityEnterView.getEmojiView() : r0.chatActivityEnterView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelTrendingTitle);
        if (r0.chatActivityEnterView != null) {
            emojiView = r0.chatActivityEnterView.getEmojiView();
        } else {
            emojiView = r0.chatActivityEnterView;
        }
        themeDescriptionArr[268] = new ThemeDescription(emojiView, 0, new Class[]{EmojiView.class}, null, null, null, selectedBackgroundDelegate, Theme.key_chat_emojiPanelTrendingDescription);
        themeDescriptionArr[269] = new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonText);
        themeDescriptionArr[270] = new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonBackground);
        themeDescriptionArr[271] = new ThemeDescription(null, 0, null, null, null, null, Theme.key_chat_botKeyboardButtonBackgroundPressed);
        themeDescriptionArr[272] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, null, null, null, Theme.key_inappPlayerBackground);
        themeDescriptionArr[273] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"playButton"}, null, null, null, Theme.key_inappPlayerPlayPause);
        themeDescriptionArr[274] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, null, null, null, Theme.key_inappPlayerTitle);
        themeDescriptionArr[275] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_FASTSCROLL, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, null, null, null, Theme.key_inappPlayerPerformer);
        themeDescriptionArr[276] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"closeButton"}, null, null, null, Theme.key_inappPlayerClose);
        themeDescriptionArr[277] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, null, null, null, Theme.key_returnToCallBackground);
        themeDescriptionArr[278] = new ThemeDescription(r0.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, null, null, null, Theme.key_returnToCallText);
        themeDescriptionArr[279] = new ThemeDescription(r0.pinnedLineView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_chat_topPanelLine);
        themeDescriptionArr[280] = new ThemeDescription(r0.pinnedMessageNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle);
        themeDescriptionArr[281] = new ThemeDescription(r0.pinnedMessageTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage);
        themeDescriptionArr[282] = new ThemeDescription(r0.alertNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelTitle);
        themeDescriptionArr[283] = new ThemeDescription(r0.alertTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_topPanelMessage);
        themeDescriptionArr[284] = new ThemeDescription(r0.closePinned, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_topPanelClose);
        themeDescriptionArr[285] = new ThemeDescription(r0.closeReportSpam, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_topPanelClose);
        themeDescriptionArr[286] = new ThemeDescription(r0.reportSpamView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground);
        themeDescriptionArr[287] = new ThemeDescription(r0.alertView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground);
        themeDescriptionArr[288] = new ThemeDescription(r0.pinnedMessageView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_topPanelBackground);
        themeDescriptionArr[289] = new ThemeDescription(r0.addToContactsButton, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_addContact);
        themeDescriptionArr[290] = new ThemeDescription(r0.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_reportSpam);
        themeDescriptionArr[291] = new ThemeDescription(r0.replyLineView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_chat_replyPanelLine);
        themeDescriptionArr[292] = new ThemeDescription(r0.replyNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_replyPanelName);
        themeDescriptionArr[293] = new ThemeDescription(r0.replyObjectTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_replyPanelMessage);
        themeDescriptionArr[294] = new ThemeDescription(r0.replyIconImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_replyPanelIcons);
        themeDescriptionArr[295] = new ThemeDescription(r0.replyCloseImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_replyPanelClose);
        themeDescriptionArr[296] = new ThemeDescription(r0.searchUpButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_searchPanelIcons);
        themeDescriptionArr[297] = new ThemeDescription(r0.searchDownButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_searchPanelIcons);
        themeDescriptionArr[298] = new ThemeDescription(r0.searchCalendarButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_searchPanelIcons);
        themeDescriptionArr[299] = new ThemeDescription(r0.searchUserButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_searchPanelIcons);
        themeDescriptionArr[300] = new ThemeDescription(r0.searchCountText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_searchPanelText);
        themeDescriptionArr[301] = new ThemeDescription(r0.bottomOverlayText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_secretChatStatusText);
        themeDescriptionArr[302] = new ThemeDescription(r0.bottomOverlayChatText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_fieldOverlayText);
        themeDescriptionArr[303] = new ThemeDescription(r0.bigEmptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_serviceText);
        themeDescriptionArr[304] = new ThemeDescription(r0.emptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_serviceText);
        themeDescriptionArr[305] = new ThemeDescription(r0.progressBar, ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, Theme.key_chat_serviceText);
        themeDescriptionArr[306] = new ThemeDescription(r0.stickersPanelArrow, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_stickersHintPanel);
        themeDescriptionArr[307] = new ThemeDescription(r0.stickersListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{StickerCell.class}, null, null, null, Theme.key_chat_stickersHintPanel);
        themeDescriptionArr[308] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE, new Class[]{ChatUnreadCell.class}, new String[]{"backgroundLayout"}, null, null, null, Theme.key_chat_unreadMessagesStartBackground);
        themeDescriptionArr[309] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"imageView"}, null, null, null, Theme.key_chat_unreadMessagesStartArrowIcon);
        themeDescriptionArr[310] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"textView"}, null, null, null, Theme.key_chat_unreadMessagesStartText);
        themeDescriptionArr[311] = new ThemeDescription(r0.progressView2, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, Theme.key_chat_serviceBackground);
        themeDescriptionArr[312] = new ThemeDescription(r0.emptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, Theme.key_chat_serviceBackground);
        themeDescriptionArr[313] = new ThemeDescription(r0.bigEmptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, Theme.key_chat_serviceBackground);
        themeDescriptionArr[314] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_SERVICEBACKGROUND, new Class[]{ChatLoadingCell.class}, new String[]{"textView"}, null, null, null, Theme.key_chat_serviceBackground);
        themeDescriptionArr[315] = new ThemeDescription(r0.chatListView, ThemeDescription.FLAG_PROGRESSBAR, new Class[]{ChatLoadingCell.class}, new String[]{"textView"}, null, null, null, Theme.key_chat_serviceText);
        themeDescriptionArr[316] = new ThemeDescription(r0.mentionListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotSwitchCell.class}, new String[]{"textView"}, null, null, null, Theme.key_chat_botSwitchToInlineText);
        themeDescriptionArr[317] = new ThemeDescription(r0.mentionListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"nameTextView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText);
        themeDescriptionArr[318] = new ThemeDescription(r0.mentionListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"usernameTextView"}, null, null, null, Theme.key_windowBackgroundWhiteGrayText3);
        themeDescriptionArr[319] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, new Drawable[]{Theme.chat_inlineResultFile, Theme.chat_inlineResultAudio, Theme.chat_inlineResultLocation}, null, Theme.key_chat_inlineResultIcon);
        themeDescriptionArr[320] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteGrayText2);
        themeDescriptionArr[321] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteLinkText);
        themeDescriptionArr[322] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_windowBackgroundWhiteBlackText);
        themeDescriptionArr[323] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_chat_inAudioProgress);
        themeDescriptionArr[324] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_chat_inAudioSelectedProgress);
        themeDescriptionArr[325] = new ThemeDescription(r0.mentionListView, 0, new Class[]{ContextLinkCell.class}, null, null, null, Theme.key_divider);
        themeDescriptionArr[326] = new ThemeDescription(r0.gifHintTextView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_gifSaveHintBackground);
        themeDescriptionArr[327] = new ThemeDescription(r0.gifHintTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_gifSaveHintText);
        themeDescriptionArr[328] = new ThemeDescription(r0.pagedownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_goDownButtonCounterBackground);
        themeDescriptionArr[329] = new ThemeDescription(r0.pagedownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_goDownButtonCounter);
        themeDescriptionArr[330] = new ThemeDescription(r0.pagedownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_goDownButton);
        themeDescriptionArr[331] = new ThemeDescription(r0.pagedownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_chat_goDownButtonShadow);
        themeDescriptionArr[332] = new ThemeDescription(r0.pagedownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_goDownButtonIcon);
        themeDescriptionArr[333] = new ThemeDescription(r0.mentiondownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_goDownButtonCounterBackground);
        themeDescriptionArr[334] = new ThemeDescription(r0.mentiondownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, Theme.key_chat_goDownButtonCounter);
        themeDescriptionArr[335] = new ThemeDescription(r0.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, Theme.key_chat_goDownButton);
        themeDescriptionArr[336] = new ThemeDescription(r0.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER | ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, null, null, null, null, Theme.key_chat_goDownButtonShadow);
        themeDescriptionArr[337] = new ThemeDescription(r0.mentiondownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, Theme.key_chat_goDownButtonIcon);
        themeDescriptionArr[338] = new ThemeDescription(r0.avatarContainer != null ? r0.avatarContainer.getTimeItem() : null, 0, null, null, null, null, Theme.key_chat_secretTimerBackground);
        if (r0.avatarContainer != null) {
            view = r0.avatarContainer.getTimeItem();
        }
        themeDescriptionArr[339] = new ThemeDescription(view, 0, null, null, null, null, Theme.key_chat_secretTimerText);
        return themeDescriptionArr;
    }
}
